<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openstack on Coffee, Coke and Code</title>
    <link>http://diabloneo.github.io/categories/openstack/</link>
    <description>Recent content in Openstack on Coffee, Coke and Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Jun 2015 23:43:51 +0800</lastBuildDate>
    <atom:link href="http://diabloneo.github.io/categories/openstack/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>通过demon学习OpenStack开发所需的基础知识--软件包管理</title>
      <link>http://diabloneo.github.io/blog/2015/06/14/%E9%80%9A%E8%BF%87demon%E5%AD%A6%E4%B9%A0openstack%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86--%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86</link>
      <pubDate>Sun, 14 Jun 2015 23:43:51 +0800</pubDate>
      
      <guid>http://diabloneo.github.io/blog/2015/06/14/%E9%80%9A%E8%BF%87demon%E5%AD%A6%E4%B9%A0openstack%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86--%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86</guid>
      <description>

&lt;h1 id=&#34;为什么写这个系列:94f69792b7dc1942b667319368c483b3&#34;&gt;为什么写这个系列&lt;/h1&gt;

&lt;p&gt;OpenStack是目前我所知的最大最复杂的基于Python项目。整个OpenStack项目包含了数十个主要的子项目，每个子项目所用到的库也不尽相同。因此，对于Python初学者和未接触过OpenStack项目的人来说，入门的难度相当大。&lt;/p&gt;

&lt;p&gt;幸运的是，OpenStack中的项目有很多共同点。比如，它们有相同的代码库结构，都尽可能是用同样的库，配置文件和单元测试的规范也都几乎一样。因此，通过学习这些共通的部分，我们就可以快速掌握多个OpenStack项目。但是，万事开头难，学习这些基础知识总是痛苦的。不过，学习的难点并不在于这些知识点本身有多难理解，而是这些基础知识的应用场景和应用效果对初学者来说都是模糊的。这个系列文章的目的就是帮助有需要的人了解OpenStack中一些常见的知识点。理解过程就是通过动手做一个web application demo来实现的。&lt;/p&gt;

&lt;p&gt;这个系列文章会涉及到以下的知识点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;包管理和pbr&lt;/li&gt;
&lt;li&gt;WSGI, RESTful Service和Pecan框架&lt;/li&gt;
&lt;li&gt;eventlet&lt;/li&gt;
&lt;li&gt;SQLAlchymy&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的知识点是不会专门讲的，如果有遇到不会的请自学：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;软件包管理:94f69792b7dc1942b667319368c483b3&#34;&gt;软件包管理&lt;/h1&gt;

&lt;p&gt;软件包管理是每个OpenStack项目的基础，其目的是用来将项目代码打包成源码包或者二进制包进行分发。一个项目的代码可能会被打包放到PyPI上，这样你可以通过&lt;strong&gt;pip&lt;/strong&gt;命令安装这个包；也可能会被打包放到项目的软件仓库里，这样你可以通过&lt;strong&gt;apt-get install&lt;/strong&gt;或者&lt;strong&gt;yum install&lt;/strong&gt;来安装这个软件包。&lt;/p&gt;

&lt;p&gt;不幸的是，Python在软件包管理十分混乱，至少历史上十分混乱。原因有两个：一是标准库提供的软件包管理功能十分弱，二是官方没有提供统一的软件包管理标准。对于这个领域，我曾经也是混乱的，只知道使用&lt;strong&gt;easy_install&lt;/strong&gt;和&lt;strong&gt;pip&lt;/strong&gt;来安装软件包。不过自从看了*The Hacker&amp;rsquo;s Guide to Python*（《Python高手之路》）之后，算是知道点来龙去脉。&lt;/p&gt;

&lt;p&gt;##软件打包工具的历史
这里我会讲一下我知道的Python的软件打包工具的历史，我们按照历史顺序来叙述。&lt;/p&gt;

&lt;h3 id=&#34;distutils-before-2000:94f69792b7dc1942b667319368c483b3&#34;&gt;distutils (before 2000)&lt;/h3&gt;

&lt;p&gt;disutils自从1998年起就是Python标准库的一部分了，不过它在2000年就停止了开发。disutils是最早的Python打包工具和标准，也奠定了对Python软件进行打包的一个基本工作方式：*使用setup.py文件*。来看一个setup.py文件的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

from disutils.core import setup

setup(name=&#39;webdemo&#39;,
      description=&#39;A simple web demo.&#39;,
      author=&#39;author name&#39;,
      author_email=&#39;author_name@example.com&#39;
      url=&#39;http://example.com&#39;,
      packages=[&#39;webdemo&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*setup.py*文件是放在项目根目录下的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜ ~/programming/python/webdemo git:(master) ✗ $ ls
LICENSE  README.md  setup.py  webdemo 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后你就可以使用命令&lt;code&gt;python setup.py build&lt;/code&gt;来编译包，可以使用&lt;code&gt;python setup.py install&lt;/code&gt;来安装这个项目。如果需要帮助，可以通过&lt;code&gt;python setup.py --help-commands&lt;/code&gt;来查看支持的命令。&lt;/p&gt;

&lt;h3 id=&#34;setuptools:94f69792b7dc1942b667319368c483b3&#34;&gt;setuptools&lt;/h3&gt;

&lt;p&gt;disutils停止开发后，setuptools成了继任者。setuptools提供了很多高级功能，包括自动依赖处理、Egg分发格式以及easy_install命令。setuptools的使用方式和disutils差不多，也是以一个setup函数作为入口，只不过该函数来自于setuptools模块，而且支持更多的参数，比如classifiers, setup_requires等，参数更多意味着功能更多。&lt;/p&gt;

&lt;p&gt;后来有一段时间setuptools项目发展开始变得缓慢了，就有人从setuptools项目创建了&lt;strong&gt;distribute&lt;/strong&gt;项目。distribute开始支持Python 3等新特性。不过一段时间后，distribute项目又和setuptools项目合并了（2013年3月）。因此，现在已经不存在distribute项目了。&lt;/p&gt;

&lt;p&gt;到目前为止，setuptools还是使用最多的打包工具，而且开发很活跃，2015年6月刚刚发布了18.0版本。setuptools项目的文档在：&lt;a href=&#34;http://pythonhosted.org/setuptools/&#34;&gt;http://pythonhosted.org/setuptools/&lt;/a&gt;。OpenStack目前也是使用setuptools库来执行打包操作，我们下面会详细点介绍setuptools工具。&lt;/p&gt;

&lt;h3 id=&#34;disutils2:94f69792b7dc1942b667319368c483b3&#34;&gt;disutils2&lt;/h3&gt;

&lt;p&gt;在setuptools项目发展的过程中，有一个叫disutils2的项目也在并行开发中，其目的是全面取代Python标准库中的distutils。disutils2的最大改进是将setup函数的参数单独放到一个setup.cfg的文件中（这些成为包的元数据）。不够disutils2这个项目缺点很多，而且没有功能上还不如setuptools项目，所以在2012年的时候，这个项目被废弃了。&lt;/p&gt;

&lt;h3 id=&#34;distlib:94f69792b7dc1942b667319368c483b3&#34;&gt;distlib&lt;/h3&gt;

&lt;p&gt;这个是一个新的打包工具，目标也是取代disutils。不过这个项目的开发进展也不快，到2015年才发布了0.2.0版本。目前还未能并入到Python的标准库中。不过可以保持关注。项目文档地址：&lt;a href=&#34;https://readthedocs.org/projects/distlib/&#34;&gt;https://readthedocs.org/projects/distlib/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;在openstack中使用打包工具:94f69792b7dc1942b667319368c483b3&#34;&gt;在OpenStack中使用打包工具&lt;/h2&gt;

&lt;p&gt;前面已经提到了，OpenStack也是使用setuptools工具来进行打包，不过为了满足OpenStack项目的需求，引入了一个辅助工具&lt;strong&gt;pbr&lt;/strong&gt;来配合setuptools完成打包工作。&lt;/p&gt;

&lt;h3 id=&#34;pbr-python-build-reasonableness:94f69792b7dc1942b667319368c483b3&#34;&gt;pbr (Python Build Reasonableness)&lt;/h3&gt;

&lt;p&gt;pbr是一个setuptools的扩展工具，被开发出来的主要目的是为了方便使用setuptools，其项目文档地址也在OpenStack官网内：&lt;a href=&#34;http://docs.openstack.org/developer/pbr/&#34;&gt;http://docs.openstack.org/developer/pbr/&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;先说一下pbr如何使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import setuptools

setuptools.setup(setup_requires=[&#39;pbr&#39;], pbr=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照上面的方式就可以配置setuptools工具使用pbr来协助完成打包工作。这里的*setup_requires*参数意思是setup函数在执行之前需要依赖的包的列表。这里的依赖的包的功能可以理解为生成setup的实际参数。你可以看到，当使用pbr的时候，setup函数只有两个参数，然而实际上*setuptools.setup*函数实际上是*disutils.core.setup*函数，会接收任何参数，这些参数可以通过在调用时指定，也可以通过所依赖的扩展来生成（比如pbr）。&lt;/p&gt;

&lt;p&gt;那么OpenStack社区为啥要开发pbr呢？因为setuptools库使用起来还是有点麻烦，参数太多，而且直接通过指定setup函数的参数的方法实在太不方便了。pbr就是为了方便而生的，它带了了如下的改进：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用setup.cfg文件来提供包的元数据。这个是从disutils2学来的。&lt;/li&gt;
&lt;li&gt;基于requirements.txt文件来实现自动依赖安装。requirements.txt文件中包含了一个项目所要依赖的库，这个文件的格式是和pip兼容的。&lt;/li&gt;
&lt;li&gt;利用Sphinx实现文档自动化。&lt;/li&gt;
&lt;li&gt;基于*git history*自动生成AUTHORS和ChangeLog文件。&lt;/li&gt;
&lt;li&gt;针对git自动创建文件列表。&lt;/li&gt;
&lt;li&gt;基于*git tags*的版本号管理。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;pbr的版本推导:94f69792b7dc1942b667319368c483b3&#34;&gt;pbr的版本推导&lt;/h4&gt;

&lt;p&gt;这里重点说明一下*基于git tag的版本号管理*这个功能。当使用pbr的时候，版本号有两种方式：&lt;strong&gt;postversioning&lt;/strong&gt;和&lt;strong&gt;preversioning&lt;/strong&gt;，postversioning是默认方式。要是用preversioning的方式，则需要设置setup.cfg文件中的*[metadata]段的version字段的值*。无论采用哪种方式，版本号都是从git的历史推理得到的。pbr使用的版本号标准是&lt;a href=&#34;http://docs.openstack.org/developer/pbr/semver.html&#34;&gt;Linux/Python Compatible Semantic Versioning 3.0.0&lt;/a&gt;，简单的说就是下面这个标准：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a version number MAJOR.MINOR.PATCH, increment the:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MAJOR version when you make incompatible API changes,&lt;/li&gt;
&lt;li&gt;MINOR version when you add functionality in a backwards-compatible manner,&lt;/li&gt;
&lt;li&gt;and PATCH version when you make backwards-compatible bug fixes.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;pbr的版本推导按照如下的步骤进行（注意，最终版本号才是软件包的版本号）：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果设置version的值为一个给定的版本号，且这个版本号刚好对应一个tag，则这个值就是最终版本号（注意，这里只有签名的tag才有效）。&lt;/li&gt;
&lt;li&gt;如果不是上面情况，则pbr会找到最近的一个tag，然后为其MINOR值加1得到一个比它大的最小版本号（注意，这个还不是最终版本号）。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;然后pbr会从最近的一个tag开始遍历所有的git commit，并检查每个提交的commit message，在commit message中查找&lt;strong&gt;Sem-Ver:&lt;/strong&gt;这样的行：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果*Sem-Ver*的值是*bugfix*，则会增加版本号中PATCH部分的值。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果*Sem-Ver*的值是*feature*或者*deprecation*，则会增加版本号中MINOR部分的值。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果*Sem-Ver*的值是*api-break*，则会增加版本号中MAJOR部分的值。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果*Sem-Ver*行不存在，则认为值是*bugfix*。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果*Sem-Ver*的值不在上面列出的范围内，则会给出警告。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果使用的是postversioning的方式，也就是setup.cfg中不指定version的值，则pbr会使用规则3推导出来的值作为目标版本号（只是目标版本号，不是最终版本号）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果使用的是preversioning的方式，也就是setup.cfg中指定了version的值（而且不符合规则1），则会检查指定的version是否高于规则3推导出来的版本号，如果没有，则会抛出异常，如果有，则使用指定的版本号作为目标版本号。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在得到目标版本号之后，开始计算开发版本号。开发版本号的形式如下：&lt;strong&gt;MAJOR.MINOR.PATCH.devN&lt;/strong&gt;。这里要计算的是&lt;strong&gt;devN&lt;/strong&gt;中的&lt;strong&gt;N&lt;/strong&gt;。这个值等于从最近的git tag开始的提交数量。计算完开发版本号之后，就得到了最终版本号。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总的来说，从上面的规则计算出来的版本号只有两种形式，一种是发布版本号（对应到某个tag），另一种是开发版本号。&lt;strong&gt;注意：pbr要求tag都是要签名的&lt;/strong&gt;，也就是打tag时要使用&lt;code&gt;git tag -a -s X.Y.Z&lt;/code&gt;的形式。&lt;/p&gt;

&lt;h3 id=&#34;setup-cfg和requirements-txt:94f69792b7dc1942b667319368c483b3&#34;&gt;setup.cfg和requirements.txt&lt;/h3&gt;

&lt;h4 id=&#34;setup-cfg:94f69792b7dc1942b667319368c483b3&#34;&gt;setup.cfg&lt;/h4&gt;

&lt;p&gt;由于OpenStack项目都使用了setuptools和pbr来执行打包工作，因此项目的元数据都放在*setup.cfg*文件中。我们以*keystone*项目的setup.cfg文件为例来说明这个文件里一般会包含什么内容。以下是写这篇文章时最新的keystone项目的setup.cfg文件的内容（以&lt;strong&gt;#&lt;/strong&gt;开头的是我加的注释）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[metadata]  # 元数据段
name = keystone  # 软件包名称
version = 8.0.0  # 软件包版本号，还可以指定preversoining, postversioning等值，具体的作用看pbr的文档。
summary = OpenStack Identity  # 简介
description-file =  # 指定README文件
    README.rst
author = OpenStack  # 作者
author-email = openstack-dev@lists.openstack.org  # 作者邮件
home-page = http://www.openstack.org/  # 主页
classifier =  # 包的分类，下面具体说
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7

[files]  # 文件段
packages =  # 包名称
    keystone

[global]  # 全局段
setup-hooks =  # 指定安装hook
    pbr.hooks.setup_hook


[egg_info]  # 指定egg信息
tag_build =
tag_date = 0
tag_svn_revision = 0

[build_sphinx]  # 文档build相关信息
all_files = 1
build-dir = doc/build
source-dir = doc/source

[compile_catalog]
directory = keystone/locale
domain = keystone

[update_catalog]
domain = keystone
output_dir = keystone/locale
input_file = keystone/locale/keystone.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = keystone/locale/keystone.pot
copyright_holder = OpenStack Foundation
msgid_bugs_address = https://bugs.launchpad.net/keystone

# NOTE(dstanek): Uncomment the [pbr] section below and remove the ext.apidoc
# Sphinx extension when https://launchpad.net/bugs/1260495 is fixed.
[pbr]  # pbr本身的配置
warnerrors = True
autodoc_tree_index_modules = True

[entry_points]  # 指定入口点
console_scripts =  # 指定要生成的可执行文件
    keystone-all = keystone.cmd.all:main
    keystone-manage = keystone.cmd.manage:main

# 下面是其他entry_points内容，主要用于指定不同功能的扩展，和打包无关。
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(上面有些未注释的部分我目前还不太清楚，后续补充，可以先参考&lt;a href=&#34;https://www.python.org/dev/peps/pep-0301/&#34;&gt;PEP301&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这里说说一下&lt;strong&gt;classifier&lt;/strong&gt;这个参数。这个参数是用来指定一个软件包的分类、许可证、允许运行的操作系统、允许运行的Python的版本的信息。这些信息是在一个叫trove的项目。关于Python和trove的关系，请参考&lt;a href=&#34;http://stackoverflow.com/questions/9094220/trove-classifiers-definition&#34;&gt;http://stackoverflow.com/questions/9094220/trove-classifiers-definition&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;你可以在PyPI上找到完整的classifier值列表，地址是：&lt;a href=&#34;https://pypi.python.org/pypi?:action=list_classifiers&#34;&gt;https://pypi.python.org/pypi?%3Aaction=list_classifiers&lt;/a&gt;。另外，你也可以通过setuptools的命令来获取这个列表，在项目根目录下执行：&lt;code&gt;python setup.py register --list-classifiers&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;requirements-txt:94f69792b7dc1942b667319368c483b3&#34;&gt;requirements.txt&lt;/h4&gt;

&lt;p&gt;这个文件指定了一个项目依赖的包有哪些，并且支出了依赖的包的版本需求，可以看看keystone项目的requirements.txt：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# The order of packages is significant, because pip processes them in the order
# of appearance. Changing the order has an impact on the overall integration
# process, which may cause wedges in the gate later.

pbr&amp;lt;2.0,&amp;gt;=0.11
WebOb&amp;gt;=1.2.3
eventlet&amp;gt;=0.17.4
greenlet&amp;gt;=0.3.2
PasteDeploy&amp;gt;=1.5.0
Paste
Routes!=2.0,&amp;gt;=1.12.3
cryptography&amp;gt;=0.8.2 # Apache-2.0
six&amp;gt;=1.9.0
SQLAlchemy&amp;lt;1.1.0,&amp;gt;=0.9.7
sqlalchemy-migrate&amp;gt;=0.9.6
stevedore&amp;gt;=1.5.0 # Apache-2.0
passlib
python-keystoneclient&amp;gt;=1.6.0
keystonemiddleware&amp;gt;=1.5.0
oslo.concurrency&amp;gt;=2.1.0 # Apache-2.0
oslo.config&amp;gt;=1.11.0 # Apache-2.0
oslo.messaging!=1.12.0,&amp;gt;=1.8.0 # Apache-2.0
oslo.db&amp;gt;=1.10.0 # Apache-2.0
oslo.i18n&amp;gt;=1.5.0 # Apache-2.0
oslo.log&amp;gt;=1.2.0 # Apache-2.0
oslo.middleware!=2.0.0,&amp;gt;=1.2.0 # Apache-2.0
oslo.policy&amp;gt;=0.5.0 # Apache-2.0
oslo.serialization&amp;gt;=1.4.0 # Apache-2.0
oslo.service&amp;gt;=0.1.0 # Apache-2.0
oslo.utils&amp;gt;=1.6.0 # Apache-2.0
oauthlib&amp;gt;=0.6
pysaml2&amp;gt;=2.4.0
dogpile.cache&amp;gt;=0.5.3
jsonschema!=2.5.0,&amp;lt;3.0.0,&amp;gt;=2.0.0
pycadf&amp;gt;=0.8.0
msgpack-python&amp;gt;=0.4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;软件包归档格式:94f69792b7dc1942b667319368c483b3&#34;&gt;软件包归档格式&lt;/h2&gt;

&lt;p&gt;Python的软件包一开始是没有官方的标准分发格式的。比如Java有jar包或者war包作为分发格式，Python则什么都没有。后来不同的工具都开始引入一些比较通用的归档格式。比如，setuptools引入了Egg格式。但是，这些都不是官方支持的，存在元数据和包结构彼此不兼容的问题。因此，为了解决这个问题，&lt;strong&gt;PEP 427&lt;/strong&gt;定义了新的分发包标准，名为&lt;strong&gt;Wheel&lt;/strong&gt;。目前pip和setuptools工具都支持Wheel格式。这里我们简单总结一下常用的分发格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tar.gz&lt;/strong&gt;格式：这个就是标准压缩格式，里面包含了项目元数据和代码，可以使用&lt;code&gt;python setup.py sdist&lt;/code&gt;命令生成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.egg&lt;/strong&gt;格式：这个本质上也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据以及源代码。这个格式由setuptools项目引入。可以通过命令&lt;code&gt;python setup.py bdist_egg&lt;/code&gt;命令生成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.whl&lt;/strong&gt;格式：这个是Wheel包，也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据和代码，还支持免安装直接运行。whl分发包内的元数据和egg包是有些不同的。这个格式是由PEP 427引入的。可以通过命令&lt;code&gt;python setup.py bdist_wheel&lt;/code&gt;生成。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;egg-info和-dist-info目录:94f69792b7dc1942b667319368c483b3&#34;&gt;.egg-info和.dist-info目录&lt;/h3&gt;

&lt;p&gt;如果你到系统中安装Python库的路径下看看，就能看到很多名称以*.egg-info&lt;em&gt;或者以&lt;/em&gt;.dist-info&lt;em&gt;结尾的目录。这些目录的内容就是这个库的元数据，是从库的分发包中拷贝出来的。其中&lt;/em&gt;.egg-info&lt;em&gt;类型的目录来自于Egg格式的分发包，&lt;/em&gt;.dist-info*类型的目录来自于Wheel格式的分发包。&lt;/p&gt;

&lt;h2 id=&#34;软件包的安装:94f69792b7dc1942b667319368c483b3&#34;&gt;软件包的安装&lt;/h2&gt;

&lt;h3 id=&#34;安装工具:94f69792b7dc1942b667319368c483b3&#34;&gt;安装工具&lt;/h3&gt;

&lt;p&gt;上面已经提到了，setuptools项目提供了一个软件包安装工具**esay_install*。easy_install支持从软件归档文件中或者从PyPI上安装软件包，不过这个工具并不好用，比如缺少卸载功能等，因此并不流行，现在更多的都是使用pip工具。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pip&lt;/strong&gt;项目提供了很好的软件包安装方式，并且已经被包含到Python 3.4中，可以从PyPI、tarball或者Wheel归档中安装和卸载软件按包。关于pip常见的用法，这里就不赘述了(&lt;em&gt;pip install, pip uninstall, pip search, &amp;hellip;&lt;/em&gt;)。&lt;/p&gt;

&lt;h3 id=&#34;安装路径:94f69792b7dc1942b667319368c483b3&#34;&gt;安装路径&lt;/h3&gt;

&lt;p&gt;软件包的安装路径依赖于操作系统、Python版本和安装方式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在Debian系的系统上（比如Ubuntu）

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;apt-get install&lt;/code&gt;从系统软件源安装

&lt;ul&gt;
&lt;li&gt;Python 2.7: /usr/lib/python2.7/dist-packages&lt;/li&gt;
&lt;li&gt;Python 3.4: /usr/lib/python3.4/dist-packages&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;pip install&lt;/code&gt;命令安装

&lt;ul&gt;
&lt;li&gt;Python 2.7: /usr/local/lib/python2.7/dist-packages&lt;/li&gt;
&lt;li&gt;Python 3.4: /usr/local/lib/python3.4/dist-packages&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在virtualenv中使用&lt;code&gt;pip install&lt;/code&gt;安装

&lt;ul&gt;
&lt;li&gt;Python 2.7: lib/python2.7/site-packages&lt;/li&gt;
&lt;li&gt;Python 3.4: lib/python3.4/site-packages&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在CentOS系的系统上

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;yum install&lt;/code&gt;命令安装

&lt;ul&gt;
&lt;li&gt;Python 2.7: /usr/lib/python2.7/site-packages&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;以开发模式安装:94f69792b7dc1942b667319368c483b3&#34;&gt;以开发模式安装&lt;/h3&gt;

&lt;p&gt;pip的安装命令可以使用&lt;strong&gt;-e&lt;/strong&gt;选项，用来从本地代码目录或者版本库URL来安装一个开发版本的库。采用这种方式的时候，在安装目录下只会创建一个包含软件包信息的文件，真正的代码不会安装到系统目录下。&lt;/p&gt;

&lt;h1 id=&#34;webdemo的打包管理:94f69792b7dc1942b667319368c483b3&#34;&gt;webdemo的打包管理&lt;/h1&gt;

&lt;p&gt;学习过包管理相关的知识后，我们就要以OpenStack的方法来创建一个我们自己的项目。这个项目的名称是&lt;strong&gt;webdemo&lt;/strong&gt;，就是一个简单的web服务器。这个项目会贯穿这个系列文章。在本文中，我们首先要创建webdemo的项目框架并添加软件包管理相关的内容。&lt;/p&gt;

&lt;h2 id=&#34;项目目录结构:94f69792b7dc1942b667319368c483b3&#34;&gt;项目目录结构&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;➜ ~/programming/python/webdemo git:(master) ✗ $ tree .
.
├── LICENSE
├── README.md
├── requirement.txt
├── setup.cfg
├── setup.py
└── webdemo
    └── __init__.py

1 directory, 6 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个是一个最简单的Python项目目录：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;源代码放在子目录*webdemo/*下&lt;/li&gt;
&lt;li&gt;然后包含了软件包管理的所需的文件：setup.py, setup.cfg, requirements.txt&lt;/li&gt;
&lt;li&gt;LICENSE和README&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;软件包管理相关:94f69792b7dc1942b667319368c483b3&#34;&gt;软件包管理相关&lt;/h3&gt;

&lt;p&gt;首先是setup.py，就是这么简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import setuptools


# In python &amp;lt; 2.7.4, a lazy loading of package `pbr` will break
# setuptools if some other modules registered functions in `atexit`.
# solution from: http://bugs.python.org/issue15881#msg170215
try:
        import multiprocessing  # noqa
except ImportError:
        pass


setuptools.setup(
    setup_requires=[&#39;pbr&#39;], pbr=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后是setup.cfg：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[metadata]
name = webdemo
version = 0.0.1
summary = Web Application Demo
description-file = README.md
author = author
author-email = author@example.com
classifier =
    Environment :: Web Environment
    Intended Audience :: Developers
    Intended Audience :: Education
    License :: OSI Approved :: GNU General Public License v2 (GPLv2)
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7

[global]
setup-hooks =
    pbr.hooks.setup_hook

[files]
packages =
    webdemo

[entry_points]
console_scripts =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只包含最基本的信息。接下来是requirements.txt文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# The order of packages is significant, because pip processes them in the order
# of appearance. Changing the order has an impact on the overall integration
# process, which may cause wedges in the gate later.

pbr&amp;lt;2.0,&amp;gt;=0.11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前只依赖于pbr库。源代码目录下现在只有一个空的&lt;strong&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt;文件。我们已经搭建好了这个最简单的项目框架了。首先，我们要把这些代码提交到git库，然后打上tag *0.0.1*：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜ ~/programming/python/webdemo git:(master) ✗ $ git log --oneline
697427c Add packaging information
2cbbf4d Initial commit
➜ ~/programming/python/webdemo git:(master) ✗ $ git tag -a -s 0.0.1
➜ ~/programming/python/webdemo git:(master) ✗ $ git tag
0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以使用&lt;code&gt;python setup.py sdist&lt;/code&gt;命令来生成一个0.0.1版本的源码归档了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜ ~/programming/python/webdemo git:(master) ✗ $ python setup.py sdist
running sdist
[pbr] Writing ChangeLog
[pbr] Generating ChangeLog
[pbr] Generating AUTHORS
running egg_info
writing pbr to webdemo.egg-info/pbr.json
writing webdemo.egg-info/PKG-INFO
writing top-level names to webdemo.egg-info/top_level.txt
writing dependency_links to webdemo.egg-info/dependency_links.txt
writing entry points to webdemo.egg-info/entry_points.txt
[pbr] Processing SOURCES.txt
[pbr] In git context, generating filelist from git
warning: no previously-included files found matching &#39;.gitreview&#39;
warning: no previously-included files matching &#39;*.pyc&#39; found anywhere in distribution
writing manifest file &#39;webdemo.egg-info/SOURCES.txt&#39;
warning: sdist: standard file not found: should have one of README, README.rst, README.txt

running check
warning: check: missing required meta-data: url

creating webdemo-0.0.1
creating webdemo-0.0.1/webdemo
creating webdemo-0.0.1/webdemo.egg-info
making hard links in webdemo-0.0.1...
hard linking AUTHORS -&amp;gt; webdemo-0.0.1
hard linking ChangeLog -&amp;gt; webdemo-0.0.1
hard linking LICENSE -&amp;gt; webdemo-0.0.1
hard linking README.md -&amp;gt; webdemo-0.0.1
hard linking requirement.txt -&amp;gt; webdemo-0.0.1
hard linking setup.cfg -&amp;gt; webdemo-0.0.1
hard linking setup.py -&amp;gt; webdemo-0.0.1
hard linking webdemo/__init__.py -&amp;gt; webdemo-0.0.1/webdemo
hard linking webdemo.egg-info/PKG-INFO -&amp;gt; webdemo-0.0.1/webdemo.egg-info
hard linking webdemo.egg-info/SOURCES.txt -&amp;gt; webdemo-0.0.1/webdemo.egg-info
hard linking webdemo.egg-info/dependency_links.txt -&amp;gt; webdemo-0.0.1/webdemo.egg-info
hard linking webdemo.egg-info/entry_points.txt -&amp;gt; webdemo-0.0.1/webdemo.egg-info
hard linking webdemo.egg-info/not-zip-safe -&amp;gt; webdemo-0.0.1/webdemo.egg-info
hard linking webdemo.egg-info/pbr.json -&amp;gt; webdemo-0.0.1/webdemo.egg-info
hard linking webdemo.egg-info/top_level.txt -&amp;gt; webdemo-0.0.1/webdemo.egg-info
copying setup.cfg -&amp;gt; webdemo-0.0.1
Writing webdemo-0.0.1/setup.cfg
Creating tar archive
removing &#39;webdemo-0.0.1&#39; (and everything under it)
➜ ~/programming/python/webdemo git:(master) ✗ $ ls dist
webdemo-0.0.1.tar.gz
➜ ~/programming/python/webdemo git:(master) ✗ $ ls
AUTHORS  ChangeLog  dist  LICENSE  README.md  requirement.txt  setup.cfg  setup.py  webdemo  webdemo.egg-info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;验证成功，在*dist/*目录下生成了一个0.0.1版本的源码归档，同时生成了如下的文件和目录：*AUTHORS, ChangeLog, webdemo.egg-info*。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>