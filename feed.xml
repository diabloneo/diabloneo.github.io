<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffee, Coke and Code</title>
    <description>Archive diabloneo's articles.
</description>
    <link>http://diabloneo.github.io//</link>
    <atom:link href="http://diabloneo.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 15 Oct 2017 23:39:57 +0800</pubDate>
    <lastBuildDate>Sun, 15 Oct 2017 23:39:57 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>想到什么写什么周报 第3期 - 2017-10-15</title>
        <description>&lt;h1 id=&quot;ubuntu-1710artful-aardvark进入最终冻结状态-将于10月19日发布&quot;&gt;Ubuntu 17.10（Artful Aardvark）进入最终冻结状态 将于10月19日发布&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.cnbeta.com/articles/soft/660503.htm&quot;&gt;http://www.cnbeta.com/articles/soft/660503.htm&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;下周就能升级了，yeah！&lt;/p&gt;

&lt;h1 id=&quot;go-192&quot;&gt;Go 1.9.2&lt;/h1&gt;

&lt;p&gt;1.9.1的一个fix出问题了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It appears that the security release Go 1.9.1 may have broken fresh “go get” checkouts of non-Git repositories at least in some cases. So probably we should issue Go 1.9.2 sooner rather than later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;issue: &lt;a href=&quot;https://github.com/golang/go/issues/22201&quot;&gt;https://github.com/golang/go/issues/22201&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;gopherfest-2017-upspin-rob-pike&quot;&gt;Gopherfest 2017: Upspin (Rob Pike)&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ENLWEfi0Tkg&amp;amp;index=27&amp;amp;list=WL&quot;&gt;https://www.youtube.com/watch?v=ENLWEfi0Tkg&amp;amp;index=27&amp;amp;list=WL&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rob Pike在今年的Gopherfest上介绍他新参与的项目 &lt;strong&gt;Upspin&lt;/strong&gt;，一种分布式的名字空间系统，用来管理分布在不同位置的数据。这个系统有 &lt;em&gt;key server&lt;/em&gt;, &lt;em&gt;directory server&lt;/em&gt;和 &lt;em&gt;storage server&lt;/em&gt;。 &lt;em&gt;Key server&lt;/em&gt;是集中式的，存储用户数据的地方实现 &lt;em&gt;directory server&lt;/em&gt;和 &lt;em&gt;storage server&lt;/em&gt;，这样用户就能用一种方式访问自己的、位于不同云端的数据。官网 &lt;a href=&quot;https://upspin.io/&quot;&gt;https://upspin.io/&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;go-ten-years-and-climbing&quot;&gt;Go: Ten years and climbing&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://commandcenter.blogspot.com/2017/09/go-ten-years-and-climbing.html&quot;&gt;https://commandcenter.blogspot.com/2017/09/go-ten-years-and-climbing.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rob Pike回顾Go发展的第一个十年，从2007年9月20日下午的一个讨论开始（Robert Griesemer, Rob Pike, and Ken Thompson ），一直到现在Go在很多领域都得到了广泛的应用。文章中还特别提到了Go在中国非常的流行。&lt;/p&gt;

&lt;h1 id=&quot;microservices-from-design-to-deployment-中文版--微服务从设计到部署&quot;&gt;Microservices from Design to Deployment 中文版 — 《微服务：从设计到部署》&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/oopsguy/microservices-from-design-to-deployment-chinese&quot;&gt;https://github.com/oopsguy/microservices-from-design-to-deployment-chinese&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;introducing-abseil-a-new-common-libraries-project&quot;&gt;Introducing Abseil, a new common libraries project&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://opensource.googleblog.com/2017/09/introducing-abseil-new-common-libraries.html&quot;&gt;https://opensource.googleblog.com/2017/09/introducing-abseil-new-common-libraries.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google开源的一个C++库。&lt;/p&gt;

&lt;h1 id=&quot;press-release-influxdatas-time-series-platform-now-available-on-ibm-cloud&quot;&gt;Press Release: InfluxData’s Time Series Platform Now Available on IBM Cloud&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.influxdata.com/blog/influxdata-on-ibm-cloud/&quot;&gt;https://www.influxdata.com/blog/influxdata-on-ibm-cloud/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;InfluxData在IBM Cloud上推出InfluxCloud。&lt;/p&gt;

&lt;h1 id=&quot;阿里云溪大会&quot;&gt;阿里云溪大会&lt;/h1&gt;

&lt;p&gt;首日发布的产品: &lt;a href=&quot;https://linux.cn/article-8953-1.html&quot;&gt;https://linux.cn/article-8953-1.html&lt;/a&gt;
发布ElasticSearch云服务: &lt;a href=&quot;https://linux.cn/article-8959-1.html&quot;&gt;https://linux.cn/article-8959-1.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;为什么-sql-正在击败-nosql数据的未来是什么&quot;&gt;为什么 SQL 正在击败 NoSQL，数据的未来是什么？&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://linux.cn/article-8949-1.html&quot;&gt;https://linux.cn/article-8949-1.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;TimescaleDB的CEO写的一篇StarWar风格的文章，介绍了SQL和NoSQL交替发展的历史。&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href=&quot;https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a&quot;&gt;https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我的理解是，SQL很自然的描述了数据的关系，但是有一段时间SQL的实现不足以支撑数据的增长，所以出现了NoSQL的方式来管理数据，现在SQL的实现又变得更强大了，也能支撑更大的数据量了。其实SQL一直很流行。&lt;/p&gt;

&lt;h1 id=&quot;digital-ocean的对象存储ga了&quot;&gt;Digital Ocean的对象存储GA了&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;DigitalOcean Spaces is Object Storage designed for developers who want a simple way to store and serve a vast amount of data. Almost 90,000 developers signed up to try it out, and now it’s generally available to host your web assets and backups. Try out Spaces with a free 2-month trial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;pingcap-与腾讯云达成合作htap-数据库-tidb-现开放内测&quot;&gt;PingCAP 与腾讯云达成合作，HTAP 数据库 TiDB 现开放内测&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://cloud.tencent.com/producwidb&quot;&gt;https://cloud.tencent.com/producwidb&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;cockroachdb-11-is-here&quot;&gt;CockroachDB 1.1 is here&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.cockroachlabs.com/blog/cockroachdb-1dot1/&quot;&gt;https://www.cockroachlabs.com/blog/cockroachdb-1dot1/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;包括数据导入的改进、集群任务管理的改进、性能提升。另外，百度也在使用CockroachDB。&lt;/p&gt;

&lt;h1 id=&quot;words-still-matter--mediums-missionfive-years-in&quot;&gt;Words still matter – Medium’s mission — five years in&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.medium.com/words-still-matter-6e9163216052&quot;&gt;https://blog.medium.com/words-still-matter-6e9163216052&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Medium CEO在Medium成立5年的时候撰文，重点是说明Medium为什么要做一个读者订阅服务，而不是采用广告模式。这样可以让Medium直接服务读者和作者，而不是其他的买单人。Medium的收入分配模式是 &lt;strong&gt;Attention = Money&lt;/strong&gt;，所以做了一个鼓掌系统。&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/10/15/write-what-i-have-003.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/10/15/write-what-i-have-003.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第2期 - 2017-10-08</title>
        <description>&lt;h1 id=&quot;golang-184-and-191-released&quot;&gt;Golang 1.8.4 and 1.9.1 Released&lt;/h1&gt;

&lt;p&gt;解决了两个安全问题：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一个是go get的时候拒绝在vcs内部再执行vcs checkout（git submodule除外）&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By nesting a git checkout inside another version control repository, it was possible for an attacker to trick the “go get” command into executing arbitrary code. The go command now refuses to use version control checkouts found inside other version control systems, with an exception for git submodules (git inside git).
The issue is tracked as https://golang.org/issue/22125 (Go 1.8.4) and https://golang.org/issue/22131 (Go 1.9.1). Fixes are linked from the issues.
Thanks to Simon Rawet for the report.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;第二个是和SMTP通过非TLS通道发送PlainAuth认证信息的问题&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the smtp package, PlainAuth is documented as sending credentials only over authenticated, encrypted TLS connections, but it was changed in Go 1.1 to also send credentials on non-TLS connections when the remote server advertises that PLAIN authentication is supported. The change was meant to allow use of PLAIN authentication on localhost, but it has the effect of allowing a man-in-the-middle attacker to harvest credentials. PlainAuth now requires either TLS or a localhost connection before sending credentials, regardless of what the remote server claims.
This issue is tracked as https://golang.org/issue/22134 (Go 1.8.4) and https://golang.org/issue/22133 (Go 1.9.1). Fixes are linked from the issues.
Thanks to Stevie Johnstone for the report.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;a-decade-of-dynamo-powering-the-next-wave-of-high-performance-internet-scale-applications&quot;&gt;A Decade of Dynamo: Powering the next wave of high-performance, internet-scale applications&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.allthingsdistributed.com/2017/10/a-decade-of-dynamo.html&quot;&gt;http://www.allthingsdistributed.com/2017/10/a-decade-of-dynamo.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wener Vogels写的关于Amazon Dynamo十周年纪念的文章。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;2004年Amazon开始遇到Oracle数据库的瓶颈，深度调查后发现70%的数据组织方式都是key-value式，操作只返回一行；20%的数据操作会返回多行，但是都属于同一张表。&lt;/li&gt;
  &lt;li&gt;然后开始根据自己的需要设计Dynamo的原型：Our goal was to build a database that would have the unbounded scalability, consistent performance and the high availability to support the needs of our rapidly growing business.&lt;/li&gt;
  &lt;li&gt;2007年在SOSP上发表论文。&lt;/li&gt;
  &lt;li&gt;然后决定将其作为云服务推出，推出前在多个方面进行了加强和改进。&lt;/li&gt;
  &lt;li&gt;在2012年1月份，正式在公有云上推出DynamoDB。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在有很多大公司在使用DynamoDB来存储关键数据，包括Lyft, Tinder, Comcase, BMW等。&lt;/p&gt;

&lt;h1 id=&quot;amazon-linux-ami-201709发布&quot;&gt;Amazon Linux AMI 2017.09发布&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/aws/now-available-amazon-linux-ami-2017-09/&quot;&gt;https://aws.amazon.com/blogs/aws/now-available-amazon-linux-ami-2017-09/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon更新了Linux AMI版本到2017.09，包含主要特性是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Kernel升级到4.9.51&lt;/li&gt;
  &lt;li&gt;Amazon SSM Agent默认安装&lt;/li&gt;
  &lt;li&gt;Python升级到3.6&lt;/li&gt;
  &lt;li&gt;Ruby升级到2.4&lt;/li&gt;
  &lt;li&gt;OpenSSL升级到1.0.2k&lt;/li&gt;
  &lt;li&gt;HTTP/2支持，内置的软件包httpd24, nginx和curl支持HTTP/2&lt;/li&gt;
  &lt;li&gt;Postgres升级到9.6版本，MySQL升级到5.7版本&lt;/li&gt;
  &lt;li&gt;OpenMPI升级到2.1.1&lt;/li&gt;
  &lt;li&gt;其他软件包升级&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;things-go-better-with-step-functions&quot;&gt;Things Go Better With Step Functions&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/aws/things-go-better-with-step-functions/&quot;&gt;https://aws.amazon.com/blogs/aws/things-go-better-with-step-functions/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了可口可乐公司通过Step Function来降低一个积分系统费用的案例。可口可乐一开始使用一个中间带有等待90秒的Lambda函数来实现一个移动支付的积分逻辑，这个等待是因为需要调用老旧的后端代码来实现计费核算。Lambda函数是按照运行时长收费的，所以等待的90秒钟都是白花花的银子。后来可口可乐开始使用Step Function，将这个Lambda函数拆分成一个具有三次状态转换的状态机（start -&amp;gt; wait -&amp;gt; points -&amp;gt; end），这样就不用在Lambda函数中进行等待。原先等待90秒的费用变成了状态转换的费用，从而节约了开支。&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/10/08/write-what-i-have-002.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/10/08/write-what-i-have-002.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第1期 - 2017-10-01</title>
        <description>&lt;h1 id=&quot;go-185和191快要发布了&quot;&gt;Go 1.8.5和1.9.1快要发布了&lt;/h1&gt;

&lt;p&gt;预计发布时间是北京时间10月5日。&lt;/p&gt;

&lt;h1 id=&quot;rob-pikes-go-proverb&quot;&gt;Rob Pike’s Go Proverb&lt;/h1&gt;

&lt;p&gt;看了个视频，是Rob Pike分享自己关于Go的一些编程格言的，具体见文章：&lt;a href=&quot;http://diabloneo.github.io/2017/09/29/rob-pike-go-proverb.html&quot;&gt;Rob Pike’s Go Proverb&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;uber-jaeger-一个分布式tracing系统&quot;&gt;Uber Jaeger: 一个分布式tracing系统&lt;/h1&gt;

&lt;p&gt;Uber开源的一个分布式tracing系统，具体见文章： &lt;a href=&quot;http://diabloneo.github.io/2017/09/30/uber-jaeger-introduction.html&quot;&gt;Uber Jaeger介绍&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/10/01/write-what-i-have-001.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/10/01/write-what-i-have-001.html</guid>
        
        
      </item>
    
      <item>
        <title>Uber Jaeger介绍</title>
        <description>&lt;h1 id=&quot;jaeger加入cncf&quot;&gt;Jaeger加入CNCF&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Jaeger&lt;/strong&gt;是 &lt;em&gt;Uber&lt;/em&gt;开源的 &lt;strong&gt;&lt;a href=&quot;http://opentracing.io/&quot;&gt;OpenTracing&lt;/a&gt;&lt;/strong&gt;实现，包括客户端和服务端。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目地址: &lt;a href=&quot;https://github.com/jaegertracing/jaeger/&quot;&gt;https://github.com/jaegertracing/jaeger/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;项目文档: &lt;a href=&quot;http://jaeger.readthedocs.io/en/latest/&quot;&gt;http://jaeger.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jaeger项目4月14日开源，9月13日被 &lt;em&gt;CNCF&lt;/em&gt;接受成为第12个托管项目, &lt;a href=&quot;https://www.cncf.io/blog/2017/09/13/cncf-hosts-jaeger/&quot;&gt;CNCF Hosts Jaeger&lt;/a&gt;。CNCF托管的其他11个项目是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Kubernetes&lt;/li&gt;
  &lt;li&gt;Prometheus&lt;/li&gt;
  &lt;li&gt;OpenTracing&lt;/li&gt;
  &lt;li&gt;Fluentd&lt;/li&gt;
  &lt;li&gt;Linkerd&lt;/li&gt;
  &lt;li&gt;gRPC&lt;/li&gt;
  &lt;li&gt;CoreDNS&lt;/li&gt;
  &lt;li&gt;containerd&lt;/li&gt;
  &lt;li&gt;rkt&lt;/li&gt;
  &lt;li&gt;CNI&lt;/li&gt;
  &lt;li&gt;Envoy&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jaeger架构&quot;&gt;Jaeger架构&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Jaeger&lt;/em&gt;的架构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00018_uber_jaeger_architecture.png&quot; alt=&quot;Jaeger Architecture&quot; /&gt;
&lt;em&gt;图片来自http://jaeger.readthedocs.io/en/latest/architecture/&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Jaeger的架构很简洁：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在每个服务器上运行 &lt;em&gt;jaeger-agent&lt;/em&gt;，用于收集本服务器的信息，然后发送给 &lt;em&gt;jaeger-collector&lt;/em&gt;。&lt;/li&gt;
  &lt;li&gt;每个服务都嵌入 &lt;em&gt;jaeger-client&lt;/em&gt;，这是一个客户端，会把服务的请求处理的tracing信息发送给 &lt;em&gt;jaeger-agent&lt;/em&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;jaeger-collector&lt;/em&gt;是一个中心化的服务端，用于收集 &lt;em&gt;jaeger-agent&lt;/em&gt;发送过来的tracing信息进行处理后存储到数据库中（目前只支持Cassandra）。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;jaeger-query&lt;/em&gt;是一个查询服务，对外保护tracing信息的查询API。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;jaeger-ui&lt;/em&gt;是一个浏览器客户端。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jaeger的demo&quot;&gt;Jaeger的demo&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Jaeger&lt;/em&gt;项目的leader写了一篇很好的文章来介绍Jaeger的使用 &lt;a href=&quot;https://medium.com/opentracing/take-opentracing-for-a-hotrod-ride-f6e3141f7941&quot;&gt;Take OpenTracing for a HotROD ride&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;文中演示了查看服务的架构，查看请求的详细构成，定位延迟原因等基本用法。还介绍了span，基于上下文的log，tag，OpenTracing baggage等概念。要了解 &lt;em&gt;Jaeger&lt;/em&gt;能做什么，可以从这篇文章开始。&lt;/p&gt;

&lt;p&gt;这个demo项目是用了 &lt;em&gt;Uber&lt;/em&gt;的 &lt;strong&gt;&lt;a href=&quot;https://github.com/uber/tchannel&quot;&gt;TChannel&lt;/a&gt;&lt;/strong&gt;来实现微服务的RPC，它已经和OpenTracing做了集成，用起来很方便。另外一个流行的rpc框架 &lt;strong&gt;gRPC&lt;/strong&gt;也已经和OpenTracing进行了集成。&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/09/30/uber-jaeger-introduction.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/09/30/uber-jaeger-introduction.html</guid>
        
        
      </item>
    
      <item>
        <title>Rob Pike's Go Proverb</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00017_rob_pike_go_proverb.png&quot; alt=&quot;Rob Pike&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rob Pike在2015年的Gopherfest的演讲，题目是 &lt;em&gt;Go Proverbs&lt;/em&gt;. YouTube地址:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;index=27&amp;amp;t=1s&amp;amp;list=WL&quot;&gt;Go Proverbs - Rob Pike - Gopherfest - November 18, 2015&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;他分享了他自己写的几条Go编程的格言，类似 &lt;em&gt;The Zen of Python&lt;/em&gt;，但是没那么正式，格言的列表如下，推荐看视频：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t communicate by sharing memory, share memory by communicating.&lt;/li&gt;
  &lt;li&gt;Concurrency is not parallism.&lt;/li&gt;
  &lt;li&gt;Channels orchestrate; mutexes serialize.&lt;/li&gt;
  &lt;li&gt;The bigger the interface, the weaker the abstraction.&lt;/li&gt;
  &lt;li&gt;Make the zero value useful. (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes.Buffer&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;sync.Mutex&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;interface{}&lt;/code&gt; says nothing.&lt;/li&gt;
  &lt;li&gt;Gofmt’s style is no one’s favorite, yet gofmt is everyone’s favorite.&lt;/li&gt;
  &lt;li&gt;A little copying is better than a little dependency.&lt;/li&gt;
  &lt;li&gt;Syscall must always be guarded with build tags.&lt;/li&gt;
  &lt;li&gt;Cgo must always be guarded with build tags.&lt;/li&gt;
  &lt;li&gt;Cgo is not Go. (他说自己几乎不使用cgo)&lt;/li&gt;
  &lt;li&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; package, there are no guarantees.&lt;/li&gt;
  &lt;li&gt;Clear is better than clever.&lt;/li&gt;
  &lt;li&gt;Reflection is never clear.&lt;/li&gt;
  &lt;li&gt;Errors are values.&lt;/li&gt;
  &lt;li&gt;Don’t just check errors, handle them gracefully.&lt;/li&gt;
  &lt;li&gt;Design the architecture, name the components, document the details.&lt;/li&gt;
  &lt;li&gt;Documentation is for users.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 29 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/09/29/rob-pike-go-proverb.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/09/29/rob-pike-go-proverb.html</guid>
        
        
      </item>
    
      <item>
        <title>SDC 2017 Day 3 General Session</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00016_sdc2017_day3.jpg&quot; alt=&quot;Day3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天SDC 2017进入第三天，早上还是General Session。&lt;/p&gt;

&lt;h1 id=&quot;impact-of-persistent-memory-on-ssds-and-fabrics&quot;&gt;Impact of Persistent Memory on SSDs and Fabrics&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549928&quot;&gt;https://sniasdc17.pathable.com/meetings/549928&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;是一个联合介绍PM的session，三个公司分别介绍了他们在PM上的产品，具体的可以到他们官网上查看&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.everspin.com/&quot;&gt;https://www.everspin.com/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.newisys.com/&quot;&gt;http://www.newisys.com/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.mobiveil.com/&quot;&gt;http://www.mobiveil.com/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;linux-optimizations-for-low-latency-block-devices&quot;&gt;Linux Optimizations for Low Latency Block Devices&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549964&quot;&gt;https://sniasdc17.pathable.com/meetings/549964&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Througput is easy, latency is hard&lt;/strong&gt;。存储的性能在不断的提升，但是软件层面要提高latency是很困难的。&lt;/p&gt;

&lt;p&gt;SPDK带来的latency降低有限，代价不小，不适用于普通的应用，比较适合专门做硬件的使用。kernel的I/O增加了polling机制，可以有效降低延迟，同时不增加应用的复杂度。一开始做的是不断的polling，会导致CPU 100%，后来增加了hybrid polling机制，cpu降低到58%的同时，I/O延迟和不断的polling是一样的。后续会继续改进，会在需要I/O结果时再做polling，可以进一步降低CPU。&lt;/p&gt;

&lt;h1 id=&quot;data-and-intelligence-in-storage&quot;&gt;Data and Intelligence in Storage&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549932&quot;&gt;https://sniasdc17.pathable.com/meetings/549932&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Intel的广告，介绍了Intel Rack Scale Design。&lt;/p&gt;

&lt;h1 id=&quot;persistent-memory-new-tier-or-storage-replacement&quot;&gt;Persistent Memory: New Tier or Storage Replacement?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549982&quot;&gt;https://sniasdc17.pathable.com/meetings/549982&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个没听。&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/09/14/sdc-2017-3.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/09/14/sdc-2017-3.html</guid>
        
        
      </item>
    
      <item>
        <title>SDC 2017 Day 2 General Session</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00014_sdc2017_day2.jpg&quot; alt=&quot;Day2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天会议的第二天，上午是General Session。从现场看，参会人数大约150人。整个General Session包括4个Keynote。&lt;/p&gt;

&lt;h1 id=&quot;snia-20-years-of-storage-innovation-and-predictions-for-the-next-20-years&quot;&gt;SNIA: 20 Years of Storage Innovation and Predictions for the Next 20 Years&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549880&quot;&gt;https://sniasdc17.pathable.com/meetings/549880&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因为今年是SNIA 20周年，这个keynote紧扣20年这个周期，回顾了过去20周年的存储的发展以及SNIA在这期间的工作。&lt;/p&gt;

&lt;p&gt;Michael Qros特别强调了标准化的重要性，他举了供电系统作为例子。供电系统刚出现的时候没有标准话，而且建设之后很难再推倒重来，所以长期下来，现在供电系统就有2种不同的电压标准以及两种不同的频率标准（4种组合），以及15种不同的接口标准。这种缺失标准化的做法，导致解决供电问题的成本上升。所以SNIA在过去20年在存储方面做了很多标准化工作，将来也会继续推进存储的标准化工作。他也分享了SNIA在接下来的主要方向，包括：storage management, flash, persistent memory, cloud, green, object drives, security。&lt;/p&gt;

&lt;h1 id=&quot;memories-of-tomorrow&quot;&gt;Memories of Tomorrow&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549938&quot;&gt;https://sniasdc17.pathable.com/meetings/549938&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了非易失性内存，作者称为storage class memory的最新进展。目前内存和存储的主要问题是：内存数据是易失的，存储的时延则太高。persistent memory（非易失存储内存）是目前被看好的解决方案。但是PM的推广和应用属于架构改变，需要这个计算机系统的严禁来配合，从BIOS到CPU到操作系统到应用软件都需要做出修改，才能充分发挥这种新技术的优势。作者认为SSD的推广和普及也是有类似的过程，不断改进的SATA，以及新出现的NVMe都是为了更好的发挥出SSD的能力。因为PM方面还有很多工作需要去做。&lt;/p&gt;

&lt;h1 id=&quot;goodbye-xfs-building-a-new-faster-storage-backend-for-ceph&quot;&gt;Goodbye, XFS: Building a new, faster storage backend for Ceph&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/550621&quot;&gt;https://sniasdc17.pathable.com/meetings/550621&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sage Weil回顾了Ceph在store方面的历史。他最开始的直觉是要做一个文件系统，绕过POSIX，这样可以更好的作为存储的底层，所以在2008年之前，Ceph使用的是FakeStore + EBOFS。但是那个时候资源有限，Ceph的其他方面需要更多的投入，自己的文件系统无法做好，所以后来Ceph就转到了大家熟悉的FileStore + XFS + LevelDB的模式，利用已经成熟的解决方案来实现底层的数据存储。FileStore的主要问题是POSIX操作无法实现事务，所以就采用了double write的解决方案，也就有了double write的问题。他还分享了好几个FileStore的问题，都是由于POSIX接口并不适用于OSD的操作需求导致的。所以，Sage觉得实际上一开始自己做文件系统的方向是对的，现在Ceph项目壮大，开始有能力重新回到这个轨道上来，所以从2016年开始，BlueStore的研发就开始了，直到最近L版中正式product ready。最后Sage介绍了BlueStore中解决的几个主要问题，以及和FileStore的性能对比数据，BlueStore相对FileStore来说有很大的性能提升。&lt;/p&gt;

&lt;h1 id=&quot;recent-developments-in-the-linux-io-stack&quot;&gt;Recent Developments in The Linux I/O Stack&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/550618&quot;&gt;https://sniasdc17.pathable.com/meetings/550618&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;内核开发者Martin Petersen介绍了Linux从2013年到现在，在I/O栈方面的总体进展。他通过展示不通类型IO类型系统的开发活跃度来介绍Linux的开发重点。简单的总结一下，活跃度较高的是block层、SCSI和NVMe，SATA的活跃度正在慢慢下降，IDE已经基本不动了，新出现的Persistent Memory呈上升趋势。这个活跃度很客观的反应了目前设备的流行程度。&lt;/p&gt;

&lt;p&gt;他重点介绍了从2013年开始block层的开发比较活跃的原因：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从2013年开始引入了blk-mq，即Multiqueue Block Layer。新的block层的出现是为了更好的使用新设备，遗留的块层是为HDD设计的，现在显然过时了，所以kernel引入了blk-mq，并且不断的改进。&lt;/li&gt;
  &lt;li&gt;除了性能的提升，block层也在I/O抽象接口方面做了很多工作，block层不再是只提供简单的read、write和passthrough这些简单的接口，还有&lt;/li&gt;
  &lt;li&gt;很多其他高级特性，比如discard、write zeros等。&lt;/li&gt;
  &lt;li&gt;增加对zoned block device的支持。&lt;/li&gt;
  &lt;li&gt;NVMe支持的改进。&lt;/li&gt;
  &lt;li&gt;Persistent Memory的支持。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，一张commit数量的图显示，2017年的以来，Block Storage方面的开发活跃度正在高速增长。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00015_sdc2017_block_storage_commits.png&quot; alt=&quot;Block Storage Commits&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/09/13/sdc-2017-2.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/09/13/sdc-2017-2.html</guid>
        
        
      </item>
    
      <item>
        <title>SDC 2017 Day 1</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00013_sdc2017_day1.jpg&quot; alt=&quot;Day1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;9月11日到14日，SNIA SDC (Storage Developer Conference) 2017在美国圣何塞召开。我把今天听的几个演讲分享一下。给出的链接可以下载演讲的幻灯片。&lt;/p&gt;

&lt;h1 id=&quot;causally-ordering-distributed-file-system-events&quot;&gt;Causally Ordering Distributed File System Events&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Dell EMC Isilon&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549459&quot;&gt;https://sniasdc17.pathable.com/meetings/549459&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;讲了一种在Isilon中使用的高效的分布式文件系统的事件排序方法。基本思路是，Isilon中的每个inode都有编号以及版本号，通过组合文件操作中的inode信息来表示一个事件。将所有的事件发送到一个排序节点上，构建一个有向无环图，然后使用拓扑排序得到一个事件序列。这个事件序列可以用于写入log文件，用于实现文件系统的快照功能。&lt;/p&gt;

&lt;h1 id=&quot;container-native-storage---solving-the-persistent-storage-challenge-with-gluster&quot;&gt;Container Native Storage - Solving the Persistent Storage Challenge With Gluster&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;RedHat&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549464&quot;&gt;https://sniasdc17.pathable.com/meetings/549464&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用Gluster来为容器K8s的容器提供存储。&lt;/p&gt;

&lt;h1 id=&quot;breaking-the-cloud-storage-chains&quot;&gt;Breaking the Cloud Storage Chains&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;INFINIDAT&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549469&quot;&gt;https://sniasdc17.pathable.com/meetings/549469&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了InfiniBox产品，这个产品可以帮助拜托公有云的存储绑定问题。将这个存储放在私有云中，然后通过共有云的VPC网络和公有云连接起来，使得公有云的计算资源可以访问到私有云的存储。这种方法的好处包括：省钱、不会有公有云绑定问题，数据安全等。至于性能问题，在网络延迟为2ms的情况下，对于文件系统，Infinibox比公有云性能好；对于块存储，在带宽方面比公有云好。&lt;/p&gt;

&lt;h1 id=&quot;universal-hybrid-cloud-connector-for-seamless-data-migration&quot;&gt;Universal Hybrid Cloud Connector for Seamless Data Migration&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Veritas Technologies&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549473&quot;&gt;https://sniasdc17.pathable.com/meetings/549473&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;基于VxFS之上，实现了一种Mutti-Volume filesystem + SmartTier的文件系统，可以通过配置文件把文件系统的数据分布到不同的本地磁盘或者公有云对象存储上。类似AWS Storage Gateway。&lt;/p&gt;

&lt;h1 id=&quot;providing-efficient-storage-operations-for-both-data-centers-and-hyperscale-applications&quot;&gt;Providing Efficient Storage Operations for Both Data Centers and Hyperscale Applications&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Samsung&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549818&quot;&gt;https://sniasdc17.pathable.com/meetings/549818&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为了发挥出SSD的性能，需要应用或者host控制SSD的更多方面。探讨了Open Channel和IO Determinism。&lt;/p&gt;

&lt;h1 id=&quot;andromeda-building-the-next-generation-high-density-storage-interface-for-successful-adoption&quot;&gt;Andromeda: Building the Next-Generation High-Density Storage Interface for Successful Adoption&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Microsoft&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549841&quot;&gt;https://sniasdc17.pathable.com/meetings/549841&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了微软在SSD应用方面的一些进展。微软的不同应用有不同的SSD性能需求，为了在一个节点上同时运行不同的应用，需要应用和host来控制SSD的运行时配置。采用了Open Channel的方案，正在尝试将log manager和media manager分开，log manager放在host中，media manager放在硬盘中，从让不同应用都可以把SSD的性能发挥出来。&lt;/p&gt;

&lt;h1 id=&quot;dynamic-reliability-methods-for-a-clustered-task-server&quot;&gt;Dynamic Reliability Methods for a Clustered-task Server&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Dell EMC&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sniasdc17.pathable.com/meetings/549848&quot;&gt;https://sniasdc17.pathable.com/meetings/549848&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;讲了一个对服务器集群生命周期进行建模的方法。个人觉得这个方法更适合给硬盘使用&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/09/12/sdc-2017-1.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/09/12/sdc-2017-1.html</guid>
        
        
      </item>
    
      <item>
        <title>GopherCon 2017 观后感(2)</title>
        <description>&lt;p&gt;GopherConf 2017于7月13日到15日在美国丹佛举行，我在youtube上看了一些视频，本文是一些视频的观后感。&lt;/p&gt;

&lt;h1 id=&quot;ian-schenck---operability-in-go&quot;&gt;Ian Schenck - Operability in Go&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SIl3wi1iWPE&quot;&gt;https://www.youtube.com/watch?v=SIl3wi1iWPE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍使用 stuct log（github.com/Sirupsen/logrus）和 expvar库来增强互操作性，其实和互操作性没什么关系，就是讲增强导出log的可读性，并且通过expvar来暴露程序运行时的内部状态。不推荐看。&lt;/p&gt;

&lt;h1 id=&quot;jon-bodner---runtime-generated-typesafe-and-declarative-pick-any-three&quot;&gt;Jon Bodner - Runtime Generated, Typesafe, and Declarative: Pick Any Three&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hz6d7rzqJ6Q&quot;&gt;https://www.youtube.com/watch?v=hz6d7rzqJ6Q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了https://github.com/jonbodner/proteus 项目。这个项目通过使用sturct tag, function generation, reflect和template来实现了一个DAO层。这个DAO层可以用来实现把一种DSL转换成对存储系统的访问。演讲中描述了如何使用这个方法来实现SQL的访问。另外，大家都认为大量使用reflect会很慢，但是作者还现场跑了benchmark，说明对于存储访问这种重IO的操作，reflect带来的影响可以接受，速度是足够快的。&lt;/p&gt;

&lt;h1 id=&quot;david-crawshaw---go-build-modes&quot;&gt;David Crawshaw - Go Build Modes&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=x-LhC-J2Vbk&quot;&gt;https://www.youtube.com/watch?v=x-LhC-J2Vbk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了go的8种build mode：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;exe(static)&lt;/li&gt;
  &lt;li&gt;exe(with libc)&lt;/li&gt;
  &lt;li&gt;exe(with libc and non-Go code)&lt;/li&gt;
  &lt;li&gt;pie&lt;/li&gt;
  &lt;li&gt;c-archive&lt;/li&gt;
  &lt;li&gt;c-shared&lt;/li&gt;
  &lt;li&gt;shared&lt;/li&gt;
  &lt;li&gt;plugin
最后介绍了go plugin的一种应用场景。Plugin的模式正在被慢慢改进，不过短期内还不会进入生产ready。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;edward-muller---go-anti-patterns&quot;&gt;Edward Muller - Go Anti-Patterns&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ltqV6pDKZD8&quot;&gt;https://www.youtube.com/watch?v=ltqV6pDKZD8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了go的一些反模式，也就是非常规编码模式。不过，这种事情见仁见智，可以参考，不一定全部接受。&lt;/p&gt;

&lt;h1 id=&quot;mitchell-hashimoto---advanced-testing-with-go&quot;&gt;Mitchell Hashimoto - Advanced Testing with Go&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8hQG7QlcLBk&quot;&gt;https://www.youtube.com/watch?v=8hQG7QlcLBk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;讲了golang单元测试的一些基本需求以及HashiCorp在这方面对应的技术实现。&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/08/16/gophercon-2017-2.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/08/16/gophercon-2017-2.html</guid>
        
        
      </item>
    
      <item>
        <title>GopherCon 2017 观后感(1)</title>
        <description>&lt;p&gt;GopherConf 2017于7月13日到15日在美国丹佛举行，我在youtube上看了一些视频，本文是一些视频的观后感。&lt;/p&gt;

&lt;h1 id=&quot;russ-cox---the-future-of-go&quot;&gt;Russ Cox - The Future of Go&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0Zbh_vmAKvk&quot;&gt;https://www.youtube.com/watch?v=0Zbh_vmAKvk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;开始为Go2进行宣传。Go2的开发启动还早，但是社区已经开始考虑这个问题。Russ Cox分享了社区这几年来是如何改进语言的。我总结了几点如下：&lt;/p&gt;

&lt;p&gt;首选需要清晰的描述出问题，以便社区进行讨论。
一个问题是否要解决取决于该问题的重要性和影响范围。社区引入一个不确定的feature的方式是等，等到这个feature足够重要了引入。。他举了Go 1.9中新增的type alias和monotonic clock的例子。这两个问题的解决都是在1.9版本中引入的，虽然问题的提出和解决方案在很早之前就完成了，但直到今年才决定要放到Go中。
解决问题的方式不一定是增加变成语言特性，也可能是增加工具（race detection），或者是增加标准库。&lt;/p&gt;

&lt;p&gt;最后，他呼吁大家参与ExperienceReport（golang.org/wiki/ExperienceReports），为社区提供更多的问题积累，以便社区更好的决定哪些特性要引入到语言中。&lt;/p&gt;

&lt;h1 id=&quot;keith-randall---generating-better-machine-code-with-ssa&quot;&gt;Keith Randall - Generating Better Machine Code with SSA&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uTMvKVma5ms&quot;&gt;https://www.youtube.com/watch?v=uTMvKVma5ms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;讲述了Golang为什么要引入SSA（Static Single Assignemnt）。从1.5版本之后开始引入，1.7版本合入主干发布。SSA能够让Go代码更快更小，也能够让编译器更方便的对代码进行优化。从结果来看，引入SSA
后，AMD64平台，代码性能提升12%，缩小13%；ARM平台，性能提升20%，缩小18%。&lt;/p&gt;

&lt;h1 id=&quot;kavya-joshi---understanding-channels&quot;&gt;Kavya Joshi - Understanding Channels&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=KBZlN0izeiY&quot;&gt;https://www.youtube.com/watch?v=KBZlN0izeiY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了channel的内部实现，以及channel导致的goroutine的阻塞和唤醒在runtime中是如何实现的。&lt;/p&gt;

&lt;h1 id=&quot;rhys-hiltner---an-introduction-to-go-tool-trace&quot;&gt;Rhys Hiltner - An Introduction to “go tool trace”&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=V74JnrGTwKA&quot;&gt;https://www.youtube.com/watch?v=V74JnrGTwKA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了 go tool trace，内容一般，听得也不太清楚，不推荐。&lt;/p&gt;

&lt;h1 id=&quot;sam-boyer---the-new-era-of-go-package&quot;&gt;Sam Boyer - The New Era of Go Package&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5LtMb090AZI&quot;&gt;https://www.youtube.com/watch?v=5LtMb090AZI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;介绍了社区的实验项目 github.com/golang/dep ，这是一个用来实现包依赖管理的工具，用来解决现在广为诟病的包依赖问题。如果合适，将来会进入go tool chain。该项目已经production ready，大家可以开始使用了。&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2017/08/05/gophercon-2017-1.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2017/08/05/gophercon-2017-1.html</guid>
        
        
      </item>
    
  </channel>
</rss>
