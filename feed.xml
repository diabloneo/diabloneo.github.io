<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffee, Coke and Code</title>
    <description>Archive diabloneo's articles.
</description>
    <link>http://diabloneo.github.io//</link>
    <atom:link href="http://diabloneo.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 12 Mar 2018 22:01:46 +0800</pubDate>
    <lastBuildDate>Mon, 12 Mar 2018 22:01:46 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>想到什么写什么周报 第21期 - 2018-03-12</title>
        <description>&lt;h1 id=&quot;book-go-internals&quot;&gt;Book: go-internals&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/teh-cmc/go-internals&quot;&gt;https://github.com/teh-cmc/go-internals&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;go--package-versioning&quot;&gt;Go += Package Versioning&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://research.swtch.com/vgo-intro&quot;&gt;https://research.swtch.com/vgo-intro&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/12/write-what-i-have-021.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/12/write-what-i-have-021.html</guid>
        
        
      </item>
    
      <item>
        <title>Go终于要引入软件包版本管理了</title>
        <description>&lt;p&gt;最近Russ Cox发表了篇文章: &lt;a href=&quot;https://research.swtch.com/vgo-intro&amp;gt;*&quot;&gt;&lt;strong&gt;Go += Package Versioning&lt;/strong&gt;&lt;/a&gt;。从这篇文章开始，Go社区算是开始着手处理对待软件包管理问题了。这篇文章也算是为接下来的正式提案预热。&lt;/p&gt;

&lt;p&gt;提案包含4个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Import Compatiblity Rule: 导入兼容性规则。建议的规则很简单：如果一个新的package和老的package具有同样的import path，那么新的package就需要具备向后兼容性。Russ Cox指出，通过期待包的作者遵循这条规则，新的包管理系统不需要处理兼容性问题，这样会使得整个包管理系统更加简单和健壮。如果你熟悉OpenStack，那么你应该知道每个项目下的requirements有多麻烦，而且不同项目间还需要兼容同一个requirements。&lt;/li&gt;
  &lt;li&gt;Minimal Version Select: 现在的包管理器一般都采用如下的策略：选择最新的版本。Russ Cox认为这是个错误的默认行为，因为只要上游软件包有更新，那么你的编译结果就会改变，这个不是开发者在大部分情况下所期望的行为。所以他采取的默认策略是选贼最老的版本。这个方案不仅使得编译结果稳定，而且也是软件包管理更加简单。&lt;/li&gt;
  &lt;li&gt;Defining Go Modules: 一个Go module是一个package集合，这些package共享同样的import path prefix，称为module path。一个module定义在一个新的文件中，称为go.mod。一个module在网络上会存储成一个zip文件，可以通过HTTP协议下载，可以避免通过go get下载时需要安装各种cvs程序，而且也方便走代理。&lt;/li&gt;
  &lt;li&gt;The go Command: go命令需要修改以支持Go Module。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基于这个目标，Russ Cox开发了一个新的go命令：vgo。这个新的工具支持版本管理。另一篇文章 https://research.swtch.com/vgo-tour 说明了这个工具的使用。&lt;/p&gt;

&lt;p&gt;现在这个命令还处于开发阶段，但是已经实现了上述4个步骤中的前三个。&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/12/versioning-go-command.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/12/versioning-go-command.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第20期 - 2018-03-04</title>
        <description>&lt;h1 id=&quot;gerritbot&quot;&gt;GerritBot&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/golang/go/wiki/GerritBot&quot;&gt;https://github.com/golang/go/wiki/GerritBot&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go社区开始接收Github的pr，不过是通过GerritBot自动映射为一个Gerrit change，review和comment也是在gerrit里完成。&lt;/p&gt;

&lt;h1 id=&quot;github-shouldnt-allow-username-reuse&quot;&gt;GitHub Shouldn’t Allow Username Reuse&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://donatstudios.com/GithubsTotalSecurityFacepalm&quot;&gt;https://donatstudios.com/GithubsTotalSecurityFacepalm&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最近go-bindata的作者从网络上消失了，顺便把自己的github账号删除了。这个做法导致了很多依赖go-bindata的项目无法编译。于是有人重建了原作者的账号，同步了一份最新的代码，同时也声明他们使用这种无奈举措的原因。本文的作者提出的观点是，这种做法有安全问题，github账号不应该被重用，否则会导致信任问题。&lt;/p&gt;

&lt;h1 id=&quot;this-week-in-elasticsearch-and-apache-lucene---2018-02-05&quot;&gt;This Week in Elasticsearch and Apache Lucene - 2018-02-05&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.elastic.co/blog/this-week-in-elasticsearch-and-apache-lucene-2018-02-05&quot;&gt;https://www.elastic.co/blog/this-week-in-elasticsearch-and-apache-lucene-2018-02-05&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ES也要支持sql了。&lt;/p&gt;

&lt;h1 id=&quot;how-google-cloud-storage-offers-strongly-consistent-object-listing-thanks-to-spanner&quot;&gt;How Google Cloud Storage offers strongly consistent object listing thanks to Spanner&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://cloudplatform.googleblog.com/2018/02/how-Google-Cloud-Storage-offers-strongly-consistent-object-listing-thanks-to-Spanner.html&quot;&gt;https://cloudplatform.googleblog.com/2018/02/how-Google-Cloud-Storage-offers-strongly-consistent-object-listing-thanks-to-Spanner.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud Storage依靠Spanner服务提升了数据的一致性，在这方面已经超过AWS了。可以对比两个对象存储服务的一致性说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://cloud.google.com/storage/docs/consistency&quot;&gt;https://cloud.google.com/storage/docs/consistency&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html#ConsistencyModel。&quot;&gt;https://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html#ConsistencyModel。&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;go-2017-survey-results&quot;&gt;Go 2017 Survey Results&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.golang.org/survey2017-results&quot;&gt;https://blog.golang.org/survey2017-results&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go 2017年的用户调查报告。&lt;/p&gt;

&lt;h1 id=&quot;defer-internals&quot;&gt;Defer Internals&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.learngoprogramming.com/yeah-semantically-after-is-the-right-word-fad1d5181891&quot;&gt;https://blog.learngoprogramming.com/yeah-semantically-after-is-the-right-word-fad1d5181891&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;快速介绍了下defer的内部实现，是在return语句之前。&lt;/p&gt;

&lt;h1 id=&quot;postgresql-rocks-except-when-it-blocks-understanding-locks&quot;&gt;PostgreSQL rocks, except when it blocks: Understanding locks&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2018/02/15/when-postgresql-blocks/&quot;&gt;https://www.citusdata.com/blog/2018/02/15/when-postgresql-blocks/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;CitusData发布的一篇关于Postgres的lock介绍文章，里面有两张表格，可以方便的查询pg的lock级别。&lt;/p&gt;

&lt;h1 id=&quot;a-gophers-reading-list&quot;&gt;A Gopher’s Reading List&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/enocom/gopher-reading-list&quot;&gt;https://github.com/enocom/gopher-reading-list&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一个关于Go语言文章的列表，从初级到高级都有。&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/04/write-what-i-have-020.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/04/write-what-i-have-020.html</guid>
        
        
      </item>
    
      <item>
        <title>Go 1.10中Go的build cache和test cache</title>
        <description>&lt;p&gt;最近Go发布了1.10版本，引入了cache等重要特性。Russ Cox去年11月份的时候在邮件列表golang-dev里发了一篇帖子说明了这几个变化。帖子的地址是： &lt;em&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/golang-dev/qfa3mHN4ZPA&quot;&gt;https://groups.google.com/forum/#!topic/golang-dev/qfa3mHN4ZPA&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;build-cache&quot;&gt;Build Cache&lt;/h1&gt;

&lt;p&gt;意思就是会把编译过程的中间结果cache下来，从而实现增量编译。原来需要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;go build -i&lt;/code&gt;命令来实现，现在go build命令默认启用了cache。启用cache后的效果是很明显的，我司的一个大程序的编译时间如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全新编译，耗时107秒。&lt;/li&gt;
  &lt;li&gt;修改一个文件后，再次编译，耗时22秒。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;test-cache&quot;&gt;Test Cache&lt;/h1&gt;

&lt;p&gt;测试现在也默认启用了cache，在内容没有变化的情况下，对于同样的参数的测试，会直接使用cache的测试结果，也就是同样的测试不会重复跑。当使用cache的结果时，go test命令最后会显示 &lt;code class=&quot;highlighter-rouge&quot;&gt;(cached)&lt;/code&gt; 的字样:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ ~/go/src/project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;feature&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;project/dp/master
ok      project/dp/master    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cached&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;cache-path-and-clean-cache&quot;&gt;Cache Path and Clean Cache&lt;/h1&gt;

&lt;p&gt;cache默认的存储路径是操作系统所确定的用户缓存目录，但是可以通过GOCACHE环境变量修改。在Ubuntu下的默认cache路径是 &lt;em&gt;~/.cache/go-build&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;如果要清除cache，可以使用如下两个命令:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go clean -cache&lt;/code&gt; 清除build cache。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go clean -testcache&lt;/code&gt; 清除test cache。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 04 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/04/go-1.10-cache.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/04/go-1.10-cache.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第19期 - 2018-02-13</title>
        <description>&lt;h1 id=&quot;prometheus原理和源码分析&quot;&gt;Prometheus原理和源码分析&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/Prometheus-theory-source-code&quot;&gt;http://www.infoq.com/cn/articles/Prometheus-theory-source-code&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;go-walkthrough-fmt&quot;&gt;Go Walkthrough: fmt&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/go-walkthrough/go-walkthrough-fmt-55a14bbbfc53&quot;&gt;https://medium.com/go-walkthrough/go-walkthrough-fmt-55a14bbbfc53&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;关于Go的fmt库的介绍，最后有关于fmt.Formatter接口实现的例子。&lt;/p&gt;

&lt;h1 id=&quot;github-introduces-multiple-commit-authors&quot;&gt;GitHub Introduces Multiple Commit Authors&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/01/github-multiple-author-commit&quot;&gt;https://www.infoq.com/news/2018/01/github-multiple-author-commit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Github引入联合提交提交者功能。通过在commit message中添加 Co-authored-by 字段来实现。&lt;/p&gt;

&lt;h1 id=&quot;两篇关于nmi中断的文章&quot;&gt;两篇关于NMI中断的文章&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;NMI是什么&lt;/strong&gt; &lt;em&gt;&lt;a href=&quot;http://linuxperf.com/?p=72&quot;&gt;http://linuxperf.com/?p=72&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;内核如何检测SOFT LOCKUP与HARD LOCKUP？&lt;/strong&gt; &lt;em&gt;&lt;a href=&quot;http://linuxperf.com/?p=83&quot;&gt;http://linuxperf.com/?p=83&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了NMI以及Linux如何实现LOCKUP检测。&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/02/13/write-what-i-have-019.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/02/13/write-what-i-have-019.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第18期 - 2018-02-04</title>
        <description>&lt;h1 id=&quot;5-gotchas-of-defer-in-go&quot;&gt;5 Gotchas of Defer in Go&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.learngoprogramming.com/gotchas-of-defer-in-go-1-8d070894cb01&quot;&gt;https://blog.learngoprogramming.com/gotchas-of-defer-in-go-1-8d070894cb01&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa&quot;&gt;https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-iii-36a1ab3d6ef1&quot;&gt;https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-iii-36a1ab3d6ef1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;三篇关于Go defer使用陷阱的文章，适合刚入门Go语言的同学看。还有Part 4，不过还没出来。&lt;/p&gt;

&lt;h1 id=&quot;avoiding-memory-leak-in-golang-api&quot;&gt;Avoiding Memory Leak in Golang API&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://hackernoon.com/avoiding-memory-leak-in-golang-api-1843ef45fca8&quot;&gt;https://hackernoon.com/avoiding-memory-leak-in-golang-api-1843ef45fca8&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;用Golang开发API服务时遇到的几个坑。&lt;/p&gt;

&lt;h1 id=&quot;practical-tradeoffs-in-google-cloud-spanner-azure-cosmos-db-and-yugabyte-db&quot;&gt;Practical Tradeoffs in Google Cloud Spanner, Azure Cosmos DB and YugaByte DB&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.yugabyte.com/practical-tradeoffs-in-google-cloud-spanner-azure-cosmos-db-and-yugabyte-db-ce720e07c0fd&quot;&gt;https://blog.yugabyte.com/practical-tradeoffs-in-google-cloud-spanner-azure-cosmos-db-and-yugabyte-db-ce720e07c0fd&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;介绍了CAP理论和PACELC理论。&lt;/li&gt;
  &lt;li&gt;介绍了Google Spanner, Azure Cosmos DB和YugaByte DB在实现中的选择。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-state-of-go-110&quot;&gt;The State of Go 1.10&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://speakerdeck.com/campoy/the-state-of-go-1-dot-10&quot;&gt;https://speakerdeck.com/campoy/the-state-of-go-1-dot-10&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Francesc Campoy关于Go 1.10版本的变化的幻灯片。Go 1.10版本计划本月发布。&lt;/p&gt;

&lt;h1 id=&quot;cncfs-rook-project-brings-storage-capability-to-cloud-native-workloads&quot;&gt;CNCF’s Rook Project Brings Storage Capability to Cloud-Native Workloads&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://thenewstack.io/cncfs-rook-project-brings-storage-capability-cloud-native-workloads/&quot;&gt;https://thenewstack.io/cncfs-rook-project-brings-storage-capability-cloud-native-workloads/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rook成为CNCF的第15个项目，目前处于Inception级别，刚发布了Alpha版本。Rook是一个针对K8s环境的软件定义存储编排工具，目前专注于编排Ceph，以后会支持其他的存储。&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/02/04/write-what-i-have-018.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/02/04/write-what-i-have-018.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第17期 - 2018-01-29</title>
        <description>&lt;h1 id=&quot;stream--go-news-feeds-for-over-300-million-end-users&quot;&gt;Stream &amp;amp; Go: News Feeds for Over 300 Million End Users&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackshare.io/stream/stream-and-go-news-feeds-for-over-300-million-end-users&quot;&gt;https://stackshare.io/stream/stream-and-go-news-feeds-for-over-300-million-end-users&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Stream，一家做Feed流服务的公司，介绍自己的架构的文章，很有借鉴意义。&lt;/p&gt;

&lt;h1 id=&quot;hello-中国&quot;&gt;Hello, 中国!&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.golang.org/hello-china&quot;&gt;https://blog.golang.org/hello-china&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go语言官方发表了一篇blog：Hello, 中国!  文中提到了中国社区是最大的Go社区之一，中国也是Goi最流行的国家之一。2018年Go将会为中国提供更多帮助。&lt;/p&gt;

&lt;h1 id=&quot;go-193-发布&quot;&gt;Go 1.9.3 发布&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://golang.org/doc/devel/release.html#go1.9.minor&quot;&gt;https://golang.org/doc/devel/release.html#go1.9.minor&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;twirp-a-sweet-new-rpc-framework-for-go&quot;&gt;Twirp: a sweet new RPC framework for Go&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.twitch.tv/twirp-a-sweet-new-rpc-framework-for-go-5f2febbf35f&quot;&gt;https://blog.twitch.tv/twirp-a-sweet-new-rpc-framework-for-go-5f2febbf35f&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;grpc只支持http2，不能在某些环境中使用，比如AWS的ELB&lt;/li&gt;
  &lt;li&gt;grpc生成的代码依赖runtime，有版本要求，容易因为版本问题导致bug&lt;/li&gt;
  &lt;li&gt;grpc项目太复杂，自己实现了http2协议以及控制机制&lt;/li&gt;
  &lt;li&gt;grpc只支持protobuf&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;automatic-stackdriver-tracing-for-grpc&quot;&gt;Automatic Stackdriver Tracing for gRPC&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://rakyll.org/grpc-trace/&quot;&gt;https://rakyll.org/grpc-trace/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了 cloud.google.com/go/trace的使用，这个项目已经被opencensus.io/trace 替代。&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/01/29/write-what-i-have-017.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/01/29/write-what-i-have-017.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第16期 - 2018-01-21</title>
        <description>&lt;h1 id=&quot;announcing-go-support-for-aws-lambda&quot;&gt;Announcing Go Support for AWS Lambda&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://aws.amazon.com/cn/blogs/compute/announcing-go-support-for-aws-lambda/&quot;&gt;https://aws.amazon.com/cn/blogs/compute/announcing-go-support-for-aws-lambda/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda正式支持Go语言。去年的re:Invent大会上就宣布今年会支持，没想到这么快。&lt;/p&gt;

&lt;h1 id=&quot;database-sharding-explained-in-plain-english&quot;&gt;Database sharding explained in plain English&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2018/01/10/sharding-in-plain-english/&quot;&gt;https://www.citusdata.com/blog/2018/01/10/sharding-in-plain-english/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Citus团队介绍如何给数据库做sharding。&lt;/p&gt;

&lt;h1 id=&quot;golang-uk-conference-2017--will-sewell--jim-fisher---golangs-realtime-gc-in-theory-and-practice&quot;&gt;Golang UK Conference 2017 | Will Sewell &amp;amp; Jim Fisher - Golang’s Realtime GC in Theory and Practice&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bMujSVMarqY&quot;&gt;https://www.youtube.com/watch?v=bMujSVMarqY&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了GC的理论算法，以及Go的GC的实现情况。&lt;/p&gt;

&lt;h1 id=&quot;why-are-there-nil-channels-in-go&quot;&gt;Why are there nil channels in Go?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/justforfunc/why-are-there-nil-channels-in-go-9877cc0b2308&quot;&gt;https://medium.com/justforfunc/why-are-there-nil-channels-in-go-9877cc0b2308&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Francesc Campoy在 justforfunc节目中介绍的 nil channel的一个应用。关键点：读写一个nil channel会被阻塞，读一个已关闭的channel永远不会阻塞（而是得到类型的默认值）。&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/01/21/write-what-i-have-016.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/01/21/write-what-i-have-016.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第15期 - 2018-01-15</title>
        <description>&lt;h1 id=&quot;aws-sdk-for-go-20-developer-preview&quot;&gt;AWS SDK for Go 2.0 Developer Preview&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://aws.amazon.com/cn/blogs/developer/aws-sdk-for-go-2-0-developer-preview/&quot;&gt;https://aws.amazon.com/cn/blogs/developer/aws-sdk-for-go-2-0-developer-preview/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;变化：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 去掉了session，只保留config，使用更简单。
2. 支持API Request方法，允许对每个请求进行相关设置后再发送。
3. API资源支持强类型。
4. 直接支持slice和map类型了，不用再转成指针形式。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;目前2.0版本处于开发者preview状态。1.0版本将会继续维护很长一段时间，不用担心。&lt;/p&gt;

&lt;h1 id=&quot;introducing-container-storage-interface-csi-alpha-for-kubernetes&quot;&gt;Introducing Container Storage Interface (CSI) Alpha for Kubernetes&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://blog.kubernetes.io/2018/01/introducing-container-storage-interface.html&quot;&gt;http://blog.kubernetes.io/2018/01/introducing-container-storage-interface.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;CSI进入Alpha阶段。&lt;/p&gt;

&lt;h1 id=&quot;how-to-correctly-use-contextcontext-in-go-17&quot;&gt;How to correctly use context.Context in Go 1.7&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/@cep21/how-to-correctly-use-context-context-in-go-1-7-8f2c0fafdf39&quot;&gt;https://medium.com/@cep21/how-to-correctly-use-context-context-in-go-1-7-8f2c0fafdf39&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;关于context的用法的文章，作者反对通过context.Value传递可以控制程序行为的参数。&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/01/15/write-what-i-have-015.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/01/15/write-what-i-have-015.html</guid>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第14期 - 2018-01-08</title>
        <description>&lt;h1 id=&quot;go-experience-report-generics-in-kubernetes&quot;&gt;Go Experience Report: Generics in Kubernetes&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/@arschles/go-experience-report-generics-in-kubernetes-25da87430301&quot;&gt;https://medium.com/@arschles/go-experience-report-generics-in-kubernetes-25da87430301&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes自己内建了一套部分替代泛型的runtime系统，你可以看到类似runtime.Object这样的对象以及相关的处理。由于Go不支持泛型，k8s这也是不得以而为之，不过这种做法在目前的情况下很好的解决了需求。作者还讨论了自动生成代码替代这套自定义的runtime是否可行的问题，答案是可行，但是会生成太多的代码，以至于项目过于庞大而变得不合适。&lt;/p&gt;

&lt;h1 id=&quot;how-to-improve-iot-application-performance-with-multi-row-dml&quot;&gt;How to Improve IoT Application Performance with Multi-Row DML&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.cockroachlabs.com/blog/multi-row-dml/&quot;&gt;https://www.cockroachlabs.com/blog/multi-row-dml/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;讲解了数据库的多行DML如何帮助提升性能，尤其是CockroachDB这种分布式的数据库，随着节点数的增加，可以支持更高的DML批处理大小。&lt;/p&gt;

&lt;h1 id=&quot;managing-goroutine-lifecycles-with-rungroup&quot;&gt;Managing goroutine lifecycles with run.Group&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.gopheracademy.com/advent-2017/run-group/&quot;&gt;https://blog.gopheracademy.com/advent-2017/run-group/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了一种管理goroutine生命周期的方式， &lt;em&gt;&lt;a href=&quot;https://github.com/oklog/run&quot;&gt;https://github.com/oklog/run&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/01/08/write-what-i-have-014.html</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/01/08/write-what-i-have-014.html</guid>
        
        
      </item>
    
  </channel>
</rss>
