<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffee, Coke and Code</title>
    <description>Archive diabloneo's articles.
</description>
    <link>http://diabloneo.github.io//</link>
    <atom:link href="http://diabloneo.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 04 Aug 2018 15:22:32 +0800</pubDate>
    <lastBuildDate>Sat, 04 Aug 2018 15:22:32 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>想到什么写什么周报 第32期 - 2018-08-04</title>
        <description>&lt;h2 id=&quot;how-the-go-runtime-implements-maps-efficiently-without-generics&quot;&gt;How the Go runtime implements maps efficiently (without generics)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics&quot;&gt;https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;前半部分介绍了hashmap的基本概念，后半部分介绍了Go的runtime如何实现map key的hash计算。Go没有泛型，也不是用&lt;code class=&quot;highlighter-rouge&quot;&gt;interface{}&lt;/code&gt;来实现。map操作的实现会编译器重写为对runtime函数的调用，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.mapaccess1()&lt;/code&gt;。然后使用一个结构体maptype来保存key的信息，因为编译的时候就能知道key的类型，所以会为不同类型的key指定好hash函数，在运行的时候直接调用即可。&lt;/p&gt;

&lt;h2 id=&quot;verifying-postgresql-backups-made-easier-with-new-open-source-tool&quot;&gt;Verifying PostgreSQL backups made easier with new open-source tool&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://cloudplatform.googleblog.com/2018/07/verifying-postgresql-backups-made-easier-with-new-open-source-tool.html&quot;&gt;https://cloudplatform.googleblog.com/2018/07/verifying-postgresql-backups-made-easier-with-new-open-source-tool.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud开源了自己开发的Postgres backup校验工具，使用Postgres的checksum功能来校验一个backup数据是否正确。Checksum功能需要在初始化数据库的时候开启，&lt;code class=&quot;highlighter-rouge&quot;&gt;initdb --data-checksums&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;xars-an-efficient-system-for-self-contained-executables&quot;&gt;XARs: An efficient system for self-contained executables&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://code.fb.com/data-infrastructure/xars-a-more-efficient-open-source-system-for-self-contained-executables/&quot;&gt;https://code.fb.com/data-infrastructure/xars-a-more-efficient-open-source-system-for-self-contained-executables/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;基于一种基于FUSE的按需加载文件系统的思想来实现数据包的分发。基本思路是把要打包的应用、依赖以及数据，放到一个squashfs archive中，然后在要运行的时候使用FUSE挂载，然后执行。对于Python来说，这个squashfs中已经包含了virtualenv环境，所以对运行的操作系统没有依赖。基于同样的思路，也可以用来打包Node或者Lua应用。&lt;/p&gt;

&lt;h2 id=&quot;gracefully-scaling-to-10k-postgresql-connections-for-35mo&quot;&gt;Gracefully Scaling to 10k PostgreSQL Connections for $35/mo&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/futuretech-industries/ten-thousand-high-availability-postgresql-connections-for-35-mo-part-one-4b7a2d61c51e&quot;&gt;https://medium.com/futuretech-industries/ten-thousand-high-availability-postgresql-connections-for-35-mo-part-one-4b7a2d61c51e&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/futuretech-industries/postgres-raffle-10k-connections-35-mo-part-two-b4c2e0c86e37?ref=stackshare&quot;&gt;https://medium.com/futuretech-industries/postgres-raffle-10k-connections-35-mo-part-two-b4c2e0c86e37?ref=stackshare&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了PgBouncer的使用和配置。&lt;/p&gt;

&lt;h2 id=&quot;do-you-know-the-new-names-for-linux-network-interfaces&quot;&gt;Do You Know the New Names for Linux Network Interfaces?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.learningtree.com/new-names-linux-network-interfaces/&quot;&gt;https://blog.learningtree.com/new-names-linux-network-interfaces/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了Linux下的网络设备名称为什么从 eth0变成 enp2s0这种。&lt;/p&gt;

&lt;h2 id=&quot;portable-cloud-programming-with-go-cloud&quot;&gt;Portable Cloud Programming with Go Cloud&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.golang.org/go-cloud&quot;&gt;https://blog.golang.org/go-cloud&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google推出了Go Cloud。Go Cloud是一套开源框架，目的是帮助用户实现可以跨云的应用程序。基本思路就是用户只有在云服务的设置逻辑上调用不同云的SDK，而使用云资源的时候，则不需要区分是哪个云。这么做的好处是，主要的业务逻辑都是在资源的使用上的，云服务的设置逻辑其实很少。所以能减少用户的重复代码。&lt;/p&gt;

&lt;h2 id=&quot;the-right-way-to-handle-yaml-in-go&quot;&gt;The right way to handle YAML in Go&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://ghodss.com/2014/the-right-way-to-handle-yaml-in-golang/&quot;&gt;http://ghodss.com/2014/the-right-way-to-handle-yaml-in-golang/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;原来YAML可以简写成JSON的形式，然后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;json.Unmarshal()&lt;/code&gt;来解析到一个结构体。&lt;/p&gt;

&lt;h2 id=&quot;go-code-refactoring--the-23x-performance-hunt&quot;&gt;Go code refactoring : the 23x performance hunt&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/@val_deleplace/go-code-refactoring-the-23x-performance-hunt-156746b522f7&quot;&gt;https://medium.com/@val_deleplace/go-code-refactoring-the-23x-performance-hunt-156746b522f7&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍如何一步一步的优化一个简单的程序，以获得23倍的性能提升。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/08/04/write-what-i-have-032/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/08/04/write-what-i-have-032/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>storage</category>
        
        <category>database</category>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第31期 - 2018-07-15</title>
        <description>&lt;h2 id=&quot;memory-leaking&quot;&gt;Memory Leaking&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://go101.org/article/memory-leaking.html&quot;&gt;https://go101.org/article/memory-leaking.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;描述了几种容易碰到的内存泄露的情况。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;time.Ticker&lt;/code&gt;的时候需要小心这些陷阱。本文是出自书 &lt;strong&gt;Go 101&lt;/strong&gt;，值得一读。&lt;a href=&quot;https://go101.org/article/101.html&quot;&gt;https://go101.org/article/101.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-much-does-netflix-spend-on-amazon-aws&quot;&gt;How much does Netflix spend on Amazon AWS?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.quora.com/How-much-does-Netflix-spend-on-Amazon-AWS&quot;&gt;https://www.quora.com/How-much-does-Netflix-spend-on-Amazon-AWS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Quora上的一个问题。有人引用了一个Intricately的数据回答了。每月花4000w美元在云服务上，其中2360w是花在AWS上。AWS上前五名的花费如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;EC2            1900w&lt;/li&gt;
  &lt;li&gt;ELB            300w&lt;/li&gt;
  &lt;li&gt;CloudFront     100w&lt;/li&gt;
  &lt;li&gt;S3             51.5w&lt;/li&gt;
  &lt;li&gt;Route 53       11.7w&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;minimal-ubuntu-on-public-clouds-and-docker-hub&quot;&gt;Minimal Ubuntu, on public clouds and Docker Hub&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.ubuntu.com/2018/07/09/minimal-ubuntu-released&quot;&gt;https://blog.ubuntu.com/2018/07/09/minimal-ubuntu-released&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu推出新的minimal镜像，针对公有云和kvm进行优化，体积更小，启动更快，性能更好。&lt;/p&gt;

&lt;h2 id=&quot;fun-with-sql-functions-in-postgres&quot;&gt;Fun with SQL: Functions in Postgres&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2018/06/21/fun-with-sql-functions/&quot;&gt;https://www.citusdata.com/blog/2018/06/21/fun-with-sql-functions/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了下面这些方便的Postgres函数&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;array_agg()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;array_to_string()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date_trunc()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;migrating-messenger-storage-to-optimize-performance&quot;&gt;Migrating Messenger storage to optimize performance&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://code.fb.com/data-infrastructure/migrating-messenger-storage-to-optimize-performance/&quot;&gt;https://code.fb.com/data-infrastructure/migrating-messenger-storage-to-optimize-performance/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重新设计数据格式&lt;/li&gt;
  &lt;li&gt;从HBase迁移到MyRocks&lt;/li&gt;
  &lt;li&gt;从HDD迁移到SSD，用上了自家的Lightning Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;99.9%的账号走普通流程，在2周内迁移完，剩下的走buffered迁移流程，又用了两周。 迁移结束后，得到了如下的好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最后使用新的数据格式减少了数据量&lt;/li&gt;
  &lt;li&gt;使用自家的Zstandard压缩数据&lt;/li&gt;
  &lt;li&gt;因为用了MyRocks，数据从6副本减少到3副本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总的算下来，数据空间占用减少了90%。延迟减少了50倍。对最终用户来说，查看历史消息的速度更快了。&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/07/15/write-what-i-have-031/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/07/15/write-what-i-have-031/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>storage</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第30期 - 2018-07-01</title>
        <description>&lt;h2 id=&quot;the-next-wave-digitaloceans-new-ceo&quot;&gt;The Next Wave: DigitalOcean’s New CEO&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.digitalocean.com/the-next-wave-digitaloceans-new-ceo/&quot;&gt;https://blog.digitalocean.com/the-next-wave-digitaloceans-new-ceo/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;DigitalOcean’s 聘请了前Citrix CEO Mark Templeton担任新的CEO。&lt;/p&gt;

&lt;h2 id=&quot;benchmarks-serialization-in-go&quot;&gt;Benchmarks!!! Serialization in Go!!!&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.ugorji.net/blog/benchmarking-serialization-in-go&quot;&gt;http://www.ugorji.net/blog/benchmarking-serialization-in-go&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;比较了Go的几种序列化实现的性能。&lt;/p&gt;

&lt;h2 id=&quot;multiple-ec2-network-interfaces-on-red-hat--centos-7&quot;&gt;Multiple EC2 Network Interfaces on Red Hat / CentOS 7&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.internetstaff.com/multiple-ec2-network-interfaces-on-red-hat-centos-7/&quot;&gt;https://www.internetstaff.com/multiple-ec2-network-interfaces-on-red-hat-centos-7/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了如何AWS EC2在运行RedHat/CentOS 7时，如何配置多个网卡，也就时一个ec2加入多个subnet后，如何配置多个eni。默认情况下，会有路由问题，导致primary eni网络不通。&lt;/p&gt;

&lt;h2 id=&quot;new--amazon-linux-workspaces&quot;&gt;New – Amazon Linux WorkSpaces&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://aws.amazon.com/cn/blogs/aws/new-amazon-linux-workspaces/&quot;&gt;https://aws.amazon.com/cn/blogs/aws/new-amazon-linux-workspaces/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon Linux 2现在有桌面版了，你可以在WorkSpace运行一个Amazon Linux 2的机器，相当于有了一个公有云Linux桌面。&lt;/li&gt;
  &lt;li&gt;Amazon Linux 2正式提供LTS支持，到2023年6月30日。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;performance-patches-in-go-111&quot;&gt;Performance patches in Go 1.11&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1tpeJZFObkeick4CF-mx0L3CeCgvT15B96aJeRpxEPcE/edit#slide=id.p&quot;&gt;https://docs.google.com/presentation/d/1tpeJZFObkeick4CF-mx0L3CeCgvT15B96aJeRpxEPcE/edit#slide=id.p&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fasthttp的作者制作的一个幻灯片，说明了Go 1.11中和性能相关的Patch。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有些是对使用者写代码可感知的，比如现在可以写append(a, make([]a, itemNum))来扩展一个slice。&lt;/li&gt;
  &lt;li&gt;有一些是对runtime的改进。比如改进循环检查，改进内存分配等。&lt;/li&gt;
  &lt;li&gt;有一些是改进数学库和数学操作。&lt;/li&gt;
  &lt;li&gt;改进标准库。&lt;/li&gt;
  &lt;li&gt;改进arm平台的性能。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 01 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/07/01/write-what-i-have-030/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/07/01/write-what-i-have-030/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第29期 - 2018-06-18</title>
        <description>&lt;h2 id=&quot;why-we-chose-ceph-to-build-block-storage&quot;&gt;Why We Chose Ceph to Build Block Storage&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.digitalocean.com/why-we-chose-ceph-to-build-block-storage/&quot;&gt;https://blog.digitalocean.com/why-we-chose-ceph-to-build-block-storage/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;DigitalOcean说他们为什么选择Ceph来提供块存储服务。目前用的是L版，跑在SSD上，三副本。文中也提到了，他们只把Ceph用在块存储上，虚拟机的系统盘本身不存储在Ceph上。&lt;/p&gt;

&lt;h2 id=&quot;a-bright-future-for-github&quot;&gt;A bright future for GitHub&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.github.com/2018-06-04-github-microsoft/&quot;&gt;https://blog.github.com/2018-06-04-github-microsoft/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blogs.microsoft.com/blog/2018/06/04/microsoft-github-empowering-developers/&quot;&gt;https://blogs.microsoft.com/blog/2018/06/04/microsoft-github-empowering-developers/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GitHub被微软收购了。&lt;/p&gt;

&lt;h2 id=&quot;what-stratis-learned-from-zfs-btrfs-and-linux-volume-manager&quot;&gt;What Stratis learned from ZFS, Btrfs, and Linux Volume Manager&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://opensource.com/article/18/4/stratis-lessons-learned&quot;&gt;https://opensource.com/article/18/4/stratis-lessons-learned&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Stratis文件系统从ZFS，Btrfs和LVM上学习的东西。&lt;/p&gt;

&lt;h2 id=&quot;extending-magic-pocket-innovation-with-the-first-petabyte-scale-smr-drive-deployment&quot;&gt;Extending Magic Pocket Innovation with the first petabyte scale SMR drive deployment&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blogs.dropbox.com/tech/2018/06/extending-magic-pocket-innovation-with-the-first-petabyte-scale-smr-drive-deployment/&quot;&gt;https://blogs.dropbox.com/tech/2018/06/extending-magic-pocket-innovation-with-the-first-petabyte-scale-smr-drive-deployment/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dropbox在自己的基础架构中开始应用SMR盘，这样可以提升机柜的存储密度，降低成本。但是换成SMR盘也会有一些问题要解决：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;因为SMR盘的写性能不如PMR盘，他们选用了Host Managed SMR盘，自己控制读写。&lt;/li&gt;
  &lt;li&gt;机器需要加内存，提升CPU。他们把数据索引保存在内存中，因为整个机器的存储空间增加了，所以内存也要加。额外增加的CPU算力用来保证机器的吞吐。&lt;/li&gt;
  &lt;li&gt;从RAID换到HBA。原来应用RAID 0来提升写性能，并且使用了RAID cache。这样可以降低部署时间，不用再维护RAID的bug和固件版本。&lt;/li&gt;
  &lt;li&gt;因为去掉了RAID，写cache也没了，所以添加了一个SSD来做写cache。不过，他们发现SATA的性能已经快满了，将来需要换到NVMe盘。&lt;/li&gt;
  &lt;li&gt;每个机器有100个盘，存储密度从一开始的240TB上升到1.4PB（使用了14TB的SMR盘），为了满足性能需求，需要用50Gbps的网卡。&lt;/li&gt;
  &lt;li&gt;软件的重新设计，对于SMR，大块写（4 - 5MB）性能更好。元数据频繁修改，会被放在磁盘的conventional area中（板载缓存）。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 18 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/06/18/write-what-i-have-029/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/06/18/write-what-i-have-029/</guid>
        
        <category>storage</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第28期 - 2018-05-27</title>
        <description>&lt;h2 id=&quot;bazel-buildgo&quot;&gt;bazel build://go&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/dSl82PF6LRx7iwVl4BZzZQ&quot;&gt;https://mp.weixin.qq.com/s/dSl82PF6LRx7iwVl4BZzZQ&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;流利说介绍他们如何使用bazel来build项目。&lt;/p&gt;

&lt;h2 id=&quot;algorithms-behind-modern-storage-systems&quot;&gt;Algorithms Behind Modern Storage Systems&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3220266&quot;&gt;https://queue.acm.org/detail.cfm?id=3220266&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了B-trees和LSM trees的使用。&lt;/p&gt;

&lt;h2 id=&quot;porting-the-sgi-xfs-file-system-to-linux&quot;&gt;Porting the SGI XFS File System to Linux&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://pdfs.semanticscholar.org/0948/ff7fea8440185e5a8117138c0887c878d467.pdf&quot;&gt;https://pdfs.semanticscholar.org/0948/ff7fea8440185e5a8117138c0887c878d467.pdf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;将XFS文件系统移植到Linux时发表的论文。&lt;/p&gt;
</description>
        <pubDate>Sun, 27 May 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/05/27/write-what-i-have-028/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/05/27/write-what-i-have-028/</guid>
        
        <category>golang</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第27期 - 2018-05-20</title>
        <description>&lt;h2 id=&quot;colly-goes-10&quot;&gt;Colly goes 1.0&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://go-colly.org/articles/first_release/&quot;&gt;http://go-colly.org/articles/first_release/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go写的爬虫框架Colly发布了1.0版本。&lt;/p&gt;

&lt;h2 id=&quot;how-to-do-math-on-the-linux-command-line&quot;&gt;How to do math on the Linux command line&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.networkworld.com/article/3268964/linux/how-to-do-math-on-the-linux-command-line.html&quot;&gt;https://www.networkworld.com/article/3268964/linux/how-to-do-math-on-the-linux-command-line.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍shell中进行数学运算的几个方法。对于我来说，在shell中执行简单的数学运算经常遇到尴尬的情况：用的时候想不起来。所以还是要收藏一篇类似quick start的文章。&lt;/p&gt;

&lt;h2 id=&quot;how-to-start-a-go-project-in-2018&quot;&gt;How to start a Go project in 2018&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://boyter.org/posts/how-to-start-go-project-2018/&quot;&gt;https://boyter.org/posts/how-to-start-go-project-2018/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了在2018年，一个Go项目中的常用方法，包括GOPATH设置、unit test、依赖管理、命令行入口等。&lt;/p&gt;

&lt;h2 id=&quot;elixir-cross-reference---bootlin&quot;&gt;Elixir Cross Reference - bootlin&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://elixir.bootlin.com/linux/latest/source&quot;&gt;https://elixir.bootlin.com/linux/latest/source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一个搜索Linux kernel代码的工具，支持从2.6到最新的版本。&lt;/p&gt;
</description>
        <pubDate>Sun, 20 May 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/05/20/write-what-i-have-027/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/05/20/write-what-i-have-027/</guid>
        
        <category>golang</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
        
      </item>
    
      <item>
        <title>XFS mkfs解析(1) - 参数的生成和校验</title>
        <description>&lt;p&gt;&lt;strong&gt;XFS&lt;/strong&gt;的 &lt;em&gt;mkfs&lt;/em&gt; 命令属于仓库&lt;em&gt;&lt;a href=&quot;https://git.kernel.org/pub/scm/fs/xfs/xfsprogs-dev.git&quot;&gt;https://git.kernel.org/pub/scm/fs/xfs/xfsprogs-dev.git&lt;/a&gt;&lt;/em&gt;，入口代码在 &lt;em&gt;mkfs/xfs_mkfs.c&lt;/em&gt;文件的&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;函数。&lt;/p&gt;

&lt;p&gt;mkfs代码的第一部分主要用来生成和校验mkfs过程的参数，这些参数会保存在 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct mkfs_params cfg&lt;/code&gt;中。&lt;/p&gt;

&lt;h2 id=&quot;默认参数&quot;&gt;默认参数&lt;/h2&gt;

&lt;p&gt;变量&lt;code class=&quot;highlighter-rouge&quot;&gt;struct mkfs_default_params dft&lt;/code&gt;保存了mkfs的一些默认参数，其中有几个最常用的参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sectorsize: 512B&lt;/li&gt;
  &lt;li&gt;blocksize: 4096B&lt;/li&gt;
  &lt;li&gt;crcs_enabled: true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有一个变量&lt;code class=&quot;highlighter-rouge&quot;&gt;struct libxfs_xinit xi&lt;/code&gt;保存了libxfs初始化的配置。&lt;/p&gt;

&lt;h2 id=&quot;cli参数&quot;&gt;CLI参数&lt;/h2&gt;

&lt;p&gt;命令行传递进来的参数会存放在变量&lt;code class=&quot;highlighter-rouge&quot;&gt;struct cli_params cli&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;cli&lt;/code&gt;变量首先会设置两个成员：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;xi: 指向上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;xi&lt;/code&gt;变量的指针&lt;/li&gt;
  &lt;li&gt;loginternal: 表示是否使用独立的设备记录journal log，默认是在当前设备内部记录，所以这个默认值为1。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在最简单的情况下，mkfs命令只接收一个设备名称，这个设备名称会保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;xi.volname&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;setup-proto&quot;&gt;Setup Proto&lt;/h2&gt;

&lt;p&gt;默认情况下是不指定proto文件的，所以默认的proto值是：&lt;code class=&quot;highlighter-rouge&quot;&gt;d--755 0 0 $&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;validate_blocksize&quot;&gt;validate_blocksize&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;validate_blocksize()&lt;/code&gt;函数会校验blocksize，并且设置到&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg&lt;/code&gt;中。默认情况下&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.blocksize&lt;/code&gt;的值是4096B（上面的默认参数），&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.blocklog&lt;/code&gt;的值是12（4096的log指数，也就是2的12次方）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：xfsprogs中都使用log来表示一个变量保存的是另一个值的log指数，后面不再赘述。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;validate_sectorsize&quot;&gt;validate_sectorsize&lt;/h2&gt;

&lt;p&gt;默认情况下，这个函数会设置&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.sectorsize&lt;/code&gt;的值为512（上面的默认值），&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.sectorlog&lt;/code&gt;的值为9。&lt;/p&gt;

&lt;p&gt;另外，这个函数还会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;get_topology()&lt;/code&gt;函数来获取设备的一些信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lsectorsize：logical sector size&lt;/li&gt;
  &lt;li&gt;psectorsize：physical sector size&lt;/li&gt;
  &lt;li&gt;sunit: 最小io size，一般是512B，单位是BB（见下文）的情况下，值为0。&lt;/li&gt;
  &lt;li&gt;swidth：最优io size，可能为0，单位是BB。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_topolocy()&lt;/code&gt;通过调用 &lt;em&gt;libblkid&lt;/em&gt;的接口来获取的这些信息，并且保存在一个&lt;code class=&quot;highlighter-rouge&quot;&gt;struct fs_topology&lt;/code&gt;变量中，并且会赋值给&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.sectorsize&lt;/code&gt;（一般使用psectorsize）。&lt;/p&gt;

&lt;h2 id=&quot;validate_log_sectorsize&quot;&gt;validate_log_sectorsize&lt;/h2&gt;

&lt;p&gt;设置并验证log的sector size。默认情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;cli-&amp;gt;loginternal&lt;/code&gt;为true，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.lsectorsize&lt;/code&gt;的值等于&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.sectorsize&lt;/code&gt;，也就是512B，&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.lsectorlog&lt;/code&gt;为对应值9。&lt;/p&gt;

&lt;h2 id=&quot;validate_sb_features&quot;&gt;validate_sb_features&lt;/h2&gt;

&lt;p&gt;检查feature的设置是否相互矛盾，feature设置保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.sb_feat&lt;/code&gt;中。&lt;/p&gt;

&lt;h2 id=&quot;validate_dirblocksize&quot;&gt;validate_dirblocksize&lt;/h2&gt;

&lt;p&gt;默认情况下根据 &lt;em&gt;blocksize&lt;/em&gt;来设置 &lt;em&gt;dirblocksize&lt;/em&gt;，当 &lt;em&gt;blocksize&lt;/em&gt;小于4KB时， &lt;em&gt;dirblocksize&lt;/em&gt;设置为4KB，否则设置为 &lt;em&gt;blocksize&lt;/em&gt;的值。&lt;/p&gt;

&lt;h2 id=&quot;validate_inodesize&quot;&gt;validate_inodesize&lt;/h2&gt;

&lt;p&gt;默认情况下crc是开启的，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.inodesize&lt;/code&gt;的值是512B。&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.inopblock&lt;/code&gt;表示一个block里可以存放多少个inode，等于&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.blocksize / cfg-&amp;gt;inodesize&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;calc_dev_size&quot;&gt;calc_dev_size&lt;/h2&gt;

&lt;p&gt;计算data, log和realtime分区的block数量。默认情况下，这些都不从命令行指定，表示使用整个设备。所以&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.dblocks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.logblocks&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.rtblocks&lt;/code&gt;的值都为0。&lt;/p&gt;

&lt;h2 id=&quot;calc_stripe_factors&quot;&gt;calc_stripe_factors&lt;/h2&gt;

&lt;p&gt;计算条带参数。一般是使用前面&lt;code class=&quot;highlighter-rouge&quot;&gt;get_topolocy()&lt;/code&gt;得到的数据，最后会赋值给&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.dsunit&lt;/code&gt;等。一般情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.dsunit&lt;/code&gt;的值为0。&lt;/p&gt;

&lt;h2 id=&quot;open_devices&quot;&gt;open_devices&lt;/h2&gt;

&lt;p&gt;打开设备以便校验mkfs参数是否有效，默认情况下支持 &lt;strong&gt;discard&lt;/strong&gt;操作。&lt;/p&gt;

&lt;h3 id=&quot;libxfs_init&quot;&gt;libxfs_init&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open_devices()&lt;/code&gt;函数首先调用&lt;code class=&quot;highlighter-rouge&quot;&gt;libxfs_init(libxfs_init_t *a)&lt;/code&gt;函数来打开设备并做一些初始化工作。&lt;/p&gt;

&lt;h4 id=&quot;初始化radix-tree&quot;&gt;初始化Radix Tree&lt;/h4&gt;

&lt;p&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;radix_tree_init()&lt;/code&gt;初始化一个全局的radix tree。&lt;/p&gt;

&lt;h4 id=&quot;打开设备&quot;&gt;打开设备&lt;/h4&gt;

&lt;p&gt;正常情况下，在这里时，&lt;code class=&quot;highlighter-rouge&quot;&gt;a-&amp;gt;volname&lt;/code&gt;不为空，是一个指向设备的路径。确定设备路径可以打开后，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;open(rawfile, O_RDONLY)&lt;/code&gt;打开设备，得到&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt;。打开后，设置&lt;code class=&quot;highlighter-rouge&quot;&gt;a-&amp;gt;volname = NULL&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;接下来执行&lt;code class=&quot;highlighter-rouge&quot;&gt;a-&amp;gt;ddev = libxfs_device_open()&lt;/code&gt;来打开data分区的设备，这个函数返回设备号。一般情况下，data设备就是我们上面打开的&lt;code class=&quot;highlighter-rouge&quot;&gt;a-&amp;gt;volname&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;libxfs_device_open()&lt;/code&gt;打开设备后，会把&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt;记录下全局变量中。另外，&lt;code class=&quot;highlighter-rouge&quot;&gt;libxfs_device_open()&lt;/code&gt;还会尝试设置设备的blocksize，通过ioctl的BLKBSZSET实现。设备打开后的&lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt;会记录在&lt;code class=&quot;highlighter-rouge&quot;&gt;a-&amp;gt;dfd&lt;/code&gt;。最后，会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;platform_findsizes()&lt;/code&gt;函数来获得设备的block size（保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;a-&amp;gt;dbsize&lt;/code&gt;）和size（设备大小，保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;a-&amp;gt;dsize&lt;/code&gt;）。 &lt;strong&gt;注意&lt;/strong&gt;，这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;dbsize&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;dsize&lt;/code&gt;的大小是basic block，见下文介绍。&lt;/p&gt;

&lt;p&gt;默认情况下，只有data设备，没有log和realtime设备，不需要在打开和获取响应的值。&lt;/p&gt;

&lt;h4 id=&quot;初始化cache&quot;&gt;初始化cache&lt;/h4&gt;

&lt;p&gt;初始化hash桶的数量为1K，保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;libxfs_bhash_size&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;cache_init&lt;/code&gt;初始化全局cache &lt;code class=&quot;highlighter-rouge&quot;&gt;libxfs_bcache&lt;/code&gt;。这里需要注意一个重要的参数&lt;code class=&quot;highlighter-rouge&quot;&gt;libxfs_bcache_operations&lt;/code&gt;，这个参数表示cache操作会调用的方法，包括磁盘读写操作。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache_operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libxfs_bcache_operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libxfs_bhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libxfs_balloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libxfs_bflush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relse&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libxfs_brelse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libxfs_bcompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bulkrelse&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libxfs_bulkrelse&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;manage_zones&quot;&gt;manage_zones&lt;/h4&gt;

&lt;p&gt;初始化内存分配zone，每个zone对应一种用途，不过zone其实只是用来跟踪分配了多少该类型的内存而已。&lt;/p&gt;

&lt;h3 id=&quot;basic-block&quot;&gt;Basic Block&lt;/h3&gt;

&lt;p&gt;插入介绍一下 &lt;strong&gt;Basic Block&lt;/strong&gt;的概念。在XFS中，这个概念表示物理设备的一个块，代码中有下面这么一段：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*
 Block I/O parameterization.	A basic block (BB) is the lowest size of
 filesystem allocation, and must equal 512.  Length units given to bio
 routines are in BB's.
 */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define BBSHIFT		9
#define BBSIZE		(1&amp;lt;&amp;lt;BBSHIFT)
#define BBMASK		(BBSIZE-1)
#define BTOBB(bytes)	(((__u64)(bytes) + BBSIZE - 1) &amp;gt;&amp;gt; BBSHIFT)
#define BTOBBT(bytes)	((__u64)(bytes) &amp;gt;&amp;gt; BBSHIFT)
#define BBTOB(bbs)	((bbs) &amp;lt;&amp;lt; BBSHIFT)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basic Block简称为BB，在代码中看到变量、函数或者宏有 &lt;strong&gt;bb&lt;/strong&gt;或者 &lt;strong&gt;BB&lt;/strong&gt;缩写的，就是指这个。BB的大小固定为512B，XFS的很多地方在表示size或者length时，会有以BB为单位的，例如上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;platform_findsizes()&lt;/code&gt;获得的&lt;code class=&quot;highlighter-rouge&quot;&gt;dbsize&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;dsize&lt;/code&gt;，就是以BB为单位。&lt;/p&gt;

&lt;h3 id=&quot;discard-blocks&quot;&gt;Discard Blocks&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open_devices()&lt;/code&gt;执行完&lt;code class=&quot;highlighter-rouge&quot;&gt;libxfs_init()&lt;/code&gt;之后，如果允许执行discard操作（默认允许），就会执行discard操作。因为默认情况下只有data设备，所以只会对data设备执行discard操作。&lt;/p&gt;

&lt;h2 id=&quot;validate_datadev&quot;&gt;validate_datadev&lt;/h2&gt;

&lt;p&gt;默认情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;xi-&amp;gt;dsize == 1&lt;/code&gt;， 而&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg-&amp;gt;dblocks == 0&lt;/code&gt;，所以会执行&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg-&amp;gt;dblocks = DTOBT(xi-&amp;gt;dsize, cfg-&amp;gt;blocklog)&lt;/code&gt;，这个会将设备大小转换成文件系统block数量(每个block大小是4KB)存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg-&amp;gt;dblocks&lt;/code&gt;里。&lt;/p&gt;

&lt;p&gt;默认情况下不会有log和realtime device，如果有也执行同样的操作。&lt;/p&gt;

&lt;h2 id=&quot;calculate_initial_ag_geometry&quot;&gt;calculate_initial_ag_geometry&lt;/h2&gt;

&lt;p&gt;计算Allocation Group的分布。默认情况下，用户不会从CLI设置&lt;code class=&quot;highlighter-rouge&quot;&gt;agsize&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;agcount&lt;/code&gt;，所以会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;calc_default_ag_geometry()&lt;/code&gt;。这个计算是根据设备的大小来确定的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size &amp;gt;= 4TB&lt;/code&gt;：agsize为1TB。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size &amp;lt; 4TB&lt;/code&gt;： 整个设备划分为4个AG，每个AG大小相等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;计算后，&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.agsize&lt;/code&gt;保存一个AG的大小，单位是block，&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.agcount&lt;/code&gt;保存AG的数量。&lt;/p&gt;

&lt;h2 id=&quot;calculate_imaxpct&quot;&gt;calculate_imaxpct&lt;/h2&gt;

&lt;p&gt;计算用多少空间来保存inode信息，也是根据设备的大小来确定：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size &amp;lt; 1TB&lt;/code&gt;：25%的空间&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1TB &amp;lt;= size &amp;lt; 50TB&lt;/code&gt;：5%的空间&lt;/li&gt;
  &lt;li&gt;更大的设备，使用1%的空间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个值保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg.imaxpct&lt;/code&gt;中。&lt;/p&gt;
</description>
        <pubDate>Tue, 15 May 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/05/15/xfs-mkfs-note-1/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/05/15/xfs-mkfs-note-1/</guid>
        
        <category>storage</category>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>XFS解析(1) - 注册和mount</title>
        <description>&lt;p&gt;&lt;strong&gt;XFS&lt;/strong&gt;文件系统的实现位于kernel仓库的 &lt;em&gt;fs/xfs/&lt;/em&gt;目录下，本文基于kernel版本 &lt;strong&gt;3.10&lt;/strong&gt;的代码，也就是CentOS 7.2版本的kernel。&lt;/p&gt;

&lt;h2 id=&quot;module_init&quot;&gt;module_init&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;module_init()&lt;/code&gt;的调用在&lt;em&gt;fs/xfs/xfs_super.c&lt;/em&gt;文件中，模块初始化函数是&lt;code class=&quot;highlighter-rouge&quot;&gt;init_xfs_fs()&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;xfs_dir_startup&quot;&gt;xfs_dir_startup&lt;/h3&gt;

&lt;p&gt;计算两个固定的文件名的hash值：&lt;strong&gt;.&lt;/strong&gt;和&lt;strong&gt;..&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;xfs_init_zones&quot;&gt;xfs_init_zones&lt;/h3&gt;

&lt;p&gt;初始化一些cache，这些cache用于保存不同类型的数据，都是用于后续文件系统操作的内存数据结构。&lt;/p&gt;

&lt;h3 id=&quot;xfs_init_workqueues&quot;&gt;xfs_init_workqueues&lt;/h3&gt;

&lt;p&gt;初始化一个workqueue，名称是&lt;em&gt;xfsalloc&lt;/em&gt;，用于回收内存。&lt;/p&gt;

&lt;h3 id=&quot;xfs_mru_cache_init&quot;&gt;xfs_mru_cache_init&lt;/h3&gt;

&lt;p&gt;初始化一个MRU(Most Recently Used) cache，包括初始化一个kmem zone用于存储&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_mru_cache_elem_t&lt;/code&gt;，以及一个workqueue &lt;em&gt;xfs_mru_cache&lt;/em&gt;。&lt;/p&gt;

&lt;h3 id=&quot;xfs_filestream_init&quot;&gt;xfs_filestream_init&lt;/h3&gt;

&lt;p&gt;初始化一个kmem zone，用于保存filestream的元素。&lt;/p&gt;

&lt;h3 id=&quot;xfs_buf_init&quot;&gt;xfs_buf_init&lt;/h3&gt;

&lt;p&gt;初始化buf用的cache，包含一个kmem zone，以及一个workqueue &lt;em&gt;xfslogd&lt;/em&gt;。&lt;/p&gt;

&lt;h3 id=&quot;xfs_init_procfs&quot;&gt;xfs_init_procfs&lt;/h3&gt;

&lt;p&gt;初始化几个procfs的文件，都位于目录&lt;em&gt;/proc/fs/xfs&lt;/em&gt;目录下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;fs/xfs/stat&lt;/strong&gt;：对应函数&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_stat_proc_fops()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;fs/xfs/xqmstat&lt;/strong&gt;：对应函数&lt;code class=&quot;highlighter-rouge&quot;&gt;xqmstat_proc_fops()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;fs/xfs/xqm&lt;/strong&gt;：对应函数&lt;code class=&quot;highlighter-rouge&quot;&gt;xqm_proc_fops()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xfs_sysctl_register&quot;&gt;xfs_sysctl_register&lt;/h3&gt;

&lt;p&gt;注册sysctl，对应的table是&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_root_table&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;xfs_qm_init&quot;&gt;xfs_qm_init&lt;/h3&gt;

&lt;p&gt;初始化quota相关的kmem zone。&lt;/p&gt;

&lt;h3 id=&quot;register_filesystem&quot;&gt;register_filesystem&lt;/h3&gt;

&lt;p&gt;注册文件系统，参数是&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_fs_type&lt;/code&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_system_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xfs_fs_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THIS_MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xfs_fs_mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kill_sb&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kill_block_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs_flags&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FS_REQUIRES_DEV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;文件系统的注册主要提供一个mount函数和一个kill_sb函数，分别用于文件系统的mount和umount。&lt;/p&gt;

&lt;h2 id=&quot;xfs_fs_mount&quot;&gt;xfs_fs_mount&lt;/h2&gt;

&lt;p&gt;这个函数会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;mount_bdev()&lt;/code&gt;函数，并且传递函数&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_fs_fill_super()&lt;/code&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;fill_super&lt;/code&gt;参数。&lt;code class=&quot;highlighter-rouge&quot;&gt;mount_udev()&lt;/code&gt;是一个公共函数，挂载文件系统的统一入口，位于&lt;code class=&quot;highlighter-rouge&quot;&gt;fs/super.c&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;xfs_fs_fill_super&quot;&gt;xfs_fs_fill_super&lt;/h3&gt;

&lt;p&gt;这个函数完成一个XFS文件系统的mount工作。函数的原型如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;STATIC&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xfs_fs_fill_super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super_block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;函数的主要工作如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;分配一个&lt;code class=&quot;highlighter-rouge&quot;&gt;struct xfs_mount&lt;/code&gt;结构体，并且初始化字段。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_parseargs()&lt;/code&gt;解析参数并且设置mp中对应的字段。&lt;/li&gt;
  &lt;li&gt;设置&lt;code class=&quot;highlighter-rouge&quot;&gt;sb-&amp;gt;s_blocksize&lt;/code&gt;等字段。&lt;/li&gt;
  &lt;li&gt;在superblock中设置操作对应的函数
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sb-&amp;gt;s_xattr = xfs_xattr_handlers&lt;/code&gt;：实现文件扩展属性的函数。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sb-&amp;gt;s_export_op = &amp;amp;xfs_export_operations&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sb-&amp;gt;s_qcop = &amp;amp;xfs_quotactl_operations&lt;/code&gt;：实现配额的函数。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sb-&amp;gt;s_op = &amp;amp;xfs_super_operations&lt;/code&gt;：文件级别的操作。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_open_devices()&lt;/code&gt;，默认情况下我们只有data device。这个函数还会初始化buffer target，是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_buftarg_t&lt;/code&gt;指针，保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;mp-&amp;gt;m_ddev_targp&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_init_mount_workqueue&lt;/code&gt;。这个函数初始化文件系统mount之后所需要的几个workqueue：
    &lt;ol&gt;
      &lt;li&gt;&lt;em&gt;xfs-data&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;xfs-conv&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;xfs-cli&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;xfs-reclaim&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;xfs-log&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;xfs-eofblocks&lt;/em&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_icsb_init_counters()&lt;/code&gt;初始化计数器。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_readsb()&lt;/code&gt;从设备上读取superblock，并且保存到&lt;code class=&quot;highlighter-rouge&quot;&gt;mp-&amp;gt;m_sb&lt;/code&gt;中。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_finish_flags()&lt;/code&gt;，根据mount参数再初始化某些&lt;code class=&quot;highlighter-rouge&quot;&gt;mp&lt;/code&gt;的字段。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_setup_devices()&lt;/code&gt;，根据superblock中的block size和sector size来设置buffer target。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_filestream_mount()&lt;/code&gt;，创建和filestream相关的MRU cache。&lt;/li&gt;
  &lt;li&gt;在执行mount操作之前，再设置某些superblock的字段。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_mountfs()&lt;/code&gt;。这个函数做了许多操作：
    &lt;ol&gt;
      &lt;li&gt;根据superblock的内容继续初始化&lt;code class=&quot;highlighter-rouge&quot;&gt;mp&lt;/code&gt;。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_initialize_perag()&lt;/code&gt;，初始化ag的内存表示。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_log_mount()&lt;/code&gt;，初始化journaling log，这里还包含recovery的处理逻辑。&lt;/li&gt;
      &lt;li&gt;读取root inode，也就是文件系统的根目录，保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;mp-&amp;gt;m_rootip&lt;/code&gt;。&lt;/li&gt;
      &lt;li&gt;初始化quota相关的逻辑。&lt;/li&gt;
      &lt;li&gt;结束recovery操作。&lt;/li&gt;
      &lt;li&gt;保留一些空间用于特殊操作。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;使用root inode创建一个dentry，保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;sb-&amp;gt;s_root&lt;/code&gt;中。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 15 May 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/05/15/xfs-kernel-3.10-note-1/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/05/15/xfs-kernel-3.10-note-1/</guid>
        
        <category>storage</category>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>XFS BTree</title>
        <description>&lt;p&gt;代码版本： &lt;strong&gt;v4.15.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;术语：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;block&lt;/strong&gt;：表示4KB的block。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BB&lt;/strong&gt;：表示XFS的basic block概念，长度一般是512B。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;节点&lt;/strong&gt;：表示btree中的一个节点，存储在一个block中。节点分为叶子节点和非叶子节点。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;level&lt;/strong&gt;：表示一个节点在btree中的层级，第0级是叶子节点，第N级节点的父节点是N+1级。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;record&lt;/strong&gt;：表示叶子节点中存储的数据。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;key&lt;/strong&gt;：非叶子节点中用来进行查找的key。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ptr&lt;/strong&gt;：非叶子节点中存储的节点指针，用来表示一个节点的位置，因为一个节点就是一个block，所以节点指针的值是block number。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;btree的数据组织&quot;&gt;BTree的数据组织&lt;/h2&gt;

&lt;p&gt;XFS的btree的每个节点保存在一个block中，每个节点可以包含多个记录。节点分为叶子节点和非叶子节点。&lt;/p&gt;

&lt;h3 id=&quot;叶子节点&quot;&gt;叶子节点&lt;/h3&gt;

&lt;p&gt;BTree的叶子节点只需要保存数据。不同类型的btree的数据格式不一样，本文以BNO btree和CNT btree为例，所以叶子节点保存的数据的数据结构为&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_alloc_rec_t&lt;/code&gt;。一个叶子节点的数据存储方式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   header             data1                   dataN
+-----------------+-----------------+-----+-----------------+
| xfs_btree_block | xfs_alloc_rec_t | ... | xfs_alloc_rec_t |
+-----------------+-----------------+-----+-----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;叶子节点使用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_alloc_rec_t&lt;/code&gt;类型存储数据，因为是用来管理文件系统的block的，所以其内容就是代表一定数量的连续的block：&lt;/p&gt;

&lt;h3 id=&quot;非叶子节点&quot;&gt;非叶子节点&lt;/h3&gt;

&lt;p&gt;BTree的非叶子节点保存key和节点指针。在BNO btree和CNT btree中，key的类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_alloc_key_t&lt;/code&gt;，节点指针的类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_alloc_ptr_t&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   header             key1                   keyN              ptr1                    ptrN
+-----------------+-----------------+-----+-----------------+-----------------+-----+-----------------+
| xfs_btree_block | xfs_alloc_key_t | ... | xfs_alloc_key_t | xfs_alloc_ptr_t | ... | xfs_alloc_ptr_t |
+-----------------+-----------------+-----+-----------------+-----------------+-----+-----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在非叶子节点，header之后，先存储一定数量的key，这些key用于比较查找一个值在下一级节点的位置；key之后，存储和key数量一样多的ptr，每个ptr存储对应key所指向的下一级节点的block number。&lt;/p&gt;

&lt;h3 id=&quot;节点header&quot;&gt;节点header&lt;/h3&gt;

&lt;p&gt;不论是叶子节点还是非叶子节点，其header都是&lt;code class=&quot;highlighter-rouge&quot;&gt;struc xfs_btree_block&lt;/code&gt;类型：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xfs_btree_block&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__be32&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;bb_magic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* magic number for block type */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__be16&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;bb_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 0 is a leaf */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__be16&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;bb_numrecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* current # of data records */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xfs_btree_block_shdr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xfs_btree_block_lhdr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bb_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;				&lt;span class=&quot;cm&quot;&gt;/* rest */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;重要数据结构&quot;&gt;重要数据结构&lt;/h2&gt;

&lt;h3 id=&quot;xfs_btree_cur&quot;&gt;xfs_btree_cur&lt;/h3&gt;

&lt;p&gt;这个数据结构表示一个btree的游标，在btree进行搜索和修改操作时，需要用游标来跟踪当前节点在btree的路径。&lt;/p&gt;

&lt;h3 id=&quot;xfs_btree_rec&quot;&gt;xfs_btree_rec&lt;/h3&gt;

&lt;p&gt;这是一个 &lt;strong&gt;union&lt;/strong&gt;，表示一个record，根据不同类型的btree访问不同的成员。&lt;/p&gt;

&lt;h3 id=&quot;xfs_btree_key&quot;&gt;xfs_btree_key&lt;/h3&gt;

&lt;p&gt;这是一个 &lt;strong&gt;union&lt;/strong&gt;，表示一个key，根据不通类型的btree访问不同的成员。&lt;/p&gt;

&lt;h3 id=&quot;xfs_btree_ptr&quot;&gt;xfs_btree_ptr&lt;/h3&gt;

&lt;p&gt;这是一个 &lt;strong&gt;union&lt;/strong&gt;，表示一个节点指针，可能是32位或者64位整数。一般是32位的。&lt;/p&gt;

&lt;h2 id=&quot;xfs_btree_lookupcur-dir-stat&quot;&gt;xfs_btree_lookup(cur, dir, stat)&lt;/h2&gt;

&lt;p&gt;这个函数用于在btree中查找满足&lt;code class=&quot;highlighter-rouge&quot;&gt;dir&lt;/code&gt;条件的记录，查找的值存放在&lt;code class=&quot;highlighter-rouge&quot;&gt;cur-&amp;gt;bc_rec&lt;/code&gt;中。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dir&lt;/code&gt;表示查找的方向，有三个值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XFS_LOOKUP_LE&lt;/code&gt;：查找小于&lt;code class=&quot;highlighter-rouge&quot;&gt;bc_rec&lt;/code&gt;中的值的记录。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XFS_LOOKUP_EQ&lt;/code&gt;：查找等于&lt;code class=&quot;highlighter-rouge&quot;&gt;bc_rec&lt;/code&gt;中的值的记录。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XFS_LOOKUP_GE&lt;/code&gt;：查找大于&lt;code class=&quot;highlighter-rouge&quot;&gt;bc_rec&lt;/code&gt;中的值的记录。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查找是要进行到叶子节点的，最后的查找结果会存放在&lt;code class=&quot;highlighter-rouge&quot;&gt;cur-&amp;gt;bc_ptrs[0]&lt;/code&gt;中，表示叶子节点的哪个record满足查找的条件，是否查找成功则通过&lt;code class=&quot;highlighter-rouge&quot;&gt;stat&lt;/code&gt;参数返回。&lt;/p&gt;

&lt;h3 id=&quot;xfs_btree_lookup_get_blockcur-level-pp-blkp&quot;&gt;xfs_btree_lookup_get_block(cur, level, pp, blkp)&lt;/h3&gt;

&lt;p&gt;这个函数读取&lt;code class=&quot;highlighter-rouge&quot;&gt;pp&lt;/code&gt;指向的block，作为&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;的第&lt;code class=&quot;highlighter-rouge&quot;&gt;level&lt;/code&gt;级的节点，主要操作如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_read_buf_block(cur, ptr, ..)&lt;/code&gt;读取当前&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ptr&lt;/code&gt;所指向的block。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_setbuf(cur, lev, bp)&lt;/code&gt;函数将&lt;code class=&quot;highlighter-rouge&quot;&gt;bp&lt;/code&gt;设置到&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;lev&lt;/code&gt;层，表示&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;的第&lt;code class=&quot;highlighter-rouge&quot;&gt;lev&lt;/code&gt;层读取的是&lt;code class=&quot;highlighter-rouge&quot;&gt;bp&lt;/code&gt;指向的节点。如果&lt;code class=&quot;highlighter-rouge&quot;&gt;bp&lt;/code&gt;的左兄弟或者右兄弟不存在，那么设置&lt;code class=&quot;highlighter-rouge&quot;&gt;cur-&amp;gt;bc_ra[lev]&lt;/code&gt;的相应位。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;xfs_lookup_get_search_keycur-level-keyno-block-kp&quot;&gt;xfs_lookup_get_search_key(cur, level, keyno, block, kp)&lt;/h3&gt;

&lt;p&gt;这个函数获取由&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;keyno&lt;/code&gt;确定的key。如果是叶子节点，即&lt;code class=&quot;highlighter-rouge&quot;&gt;level == 0&lt;/code&gt;，那么这个函数返回的其实是record的内容，因为叶子节点没有key。&lt;/p&gt;

&lt;h3 id=&quot;lookup的算法&quot;&gt;Lookup的算法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;从btree的根节点这一层开始&lt;/li&gt;
  &lt;li&gt;在每一层内执行二分查找：
    &lt;ol&gt;
      &lt;li&gt;如果该层内有key是匹配的，记录keyno，跳出二分查找。&lt;/li&gt;
      &lt;li&gt;如果该层内没有key是匹配的，则在搜索完该层的所有key后，记录最后的keyno，跳出二分查找。&lt;/li&gt;
      &lt;li&gt;如果当前层不是叶子节点，那么进入下一层继续搜索；如果当前层是叶子节点，那么结束对树的搜索。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;根据最后一次比较的&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;结果，以及参数&lt;code class=&quot;highlighter-rouge&quot;&gt;dir&lt;/code&gt;，调整结果，并且返回查找是否成功。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;xfs_btree_incrementcur-level-stat&quot;&gt;xfs_btree_increment(cur, level, stat)&lt;/h2&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;(cur, level)&lt;/code&gt;指向的节点增加一个record，即在这个btree中查找指定record在同一级的右边的record，查找的过程可能需要调整每一级的节点。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先处理最简单的情况，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;++cur-&amp;gt;bc_ptrs[level] &amp;lt;= xfs_btree_get_numrecs(block)&lt;/code&gt;，即增加的record还在block的有效范围内，此时可以直接返回。&lt;/li&gt;
  &lt;li&gt;接下来获取当前节点的右兄弟。如果右兄弟不存在，那么说明我们已经处于这一层的最右侧节点，无法再继续increment操作。&lt;/li&gt;
  &lt;li&gt;然后开始向上层节点遍历，直到找到一个节点，右移一个record后还在节点内。找不到说明increment失败。&lt;/li&gt;
  &lt;li&gt;从上面找到的节点开始，向下遍历，调整每一层的节点，把ptr的位置指向新节点的第一个key。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;理论上，这个函数也可以用于非叶子节点。&lt;/p&gt;

&lt;h2 id=&quot;xfs_btree_decrementcur-level-stat&quot;&gt;xfs_btree_decrement(cur, level, stat)&lt;/h2&gt;

&lt;p&gt;这个函数和increment操作差不多，只是方向相反，查找的是同一级左边的record。&lt;/p&gt;

&lt;h2 id=&quot;xfs_btree_insertcur-stat&quot;&gt;xfs_btree_insert(cur, stat)&lt;/h2&gt;

&lt;p&gt;将一个record插入到&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;指定的位置。&lt;/p&gt;

&lt;p&gt;这个函数循环调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_insrec()&lt;/code&gt;函数插入一个record，然后判断是否发生了分裂，如果发生了分裂（此时key和父节点的ptr都已经被修改），那么就将游标向上移动一层，然后继续循环，直到不再发生分裂为止。&lt;/p&gt;

&lt;h3 id=&quot;xfs_btree_insreccur-level-ptrp-rec-key-curp-stat&quot;&gt;xfs_btree_insrec(cur, level, ptrp, rec, key, curp, stat)&lt;/h3&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;rec&lt;/code&gt;插入到&lt;code class=&quot;highlighter-rouge&quot;&gt;(cur, level)&lt;/code&gt;指向的节点。因为插入一个记录可能导致节点的数据被移动，或者节点被分裂，所以这个函数会返回插入的物理位置。&lt;/p&gt;

&lt;p&gt;当当前的节点空间不够时，会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_make_block_unfull()&lt;/code&gt;函数来获得新的空间用于插入新的record。如果调用这个函数导致节点分裂，那么会产生新的游标，会通过&lt;code class=&quot;highlighter-rouge&quot;&gt;curp&lt;/code&gt;返回。在分裂的情况下，这个函数并不会更新父节点的内容，但是会更新游标，以及指向新节点的key，由调用者负责更新父节点。&lt;/p&gt;

&lt;h4 id=&quot;xfs_btree_make_block_unfullcur-level-numrecs-oindex-index-nptr-ncur-key-stat&quot;&gt;xfs_btree_make_block_unfull(cur, level, numrecs, oindex, index, nptr, ncur, key, stat)&lt;/h4&gt;

&lt;p&gt;通过移动数据或者分裂节点的方式，使得&lt;code class=&quot;highlighter-rouge&quot;&gt;(cur, level)&lt;/code&gt;指向的节点有空间存放一个新的记录，这个操作会顺序尝试三个操作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;尝试将当前节点的最后一个记录右移一个节点：&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_rshift()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果右移不成功，则尝试将当前节点的第一个记录左移一个节点：&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_lshift()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果左右移动都不成功，则分裂当前节点为两个节点，即创建当前节点的右兄弟，然后把记录平分存储在两个节点中。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;xfs_btree_rshiftcur-level-stat&quot;&gt;xfs_btree_rshift(cur, level, stat)&lt;/h5&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;指向的节点的最右侧record移动到右侧的节点，这样可以给当&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;指向的节点空出一个位置。&lt;/p&gt;

&lt;h5 id=&quot;xfs_btree_update_keyscur-level&quot;&gt;xfs_btree_update_keys(cur, level)&lt;/h5&gt;

&lt;p&gt;更新从&lt;code class=&quot;highlighter-rouge&quot;&gt;level + 1&lt;/code&gt;层往上的每个节点的key。只有当当前level的第一个位置（record或者key）发生变化时才需要更新，原因是btree节点的第一个位置的值是其父节点中的key，所以当第一个位置的值变化之后，需要更新父节点中对应的key，这样才能保证搜索可以正确执行。更新key的操作如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00020_xfs_btree_update_keys.jpg&quot; alt=&quot;update-keys&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;xfs_btree_splitcur-level-ptrp-key-curp-stat&quot;&gt;xfs_btree_split(cur, level, ptrp, key, curp, stat)&lt;/h5&gt;

&lt;p&gt;实际调用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;__xfs_btree_split()&lt;/code&gt;，将&lt;code class=&quot;highlighter-rouge&quot;&gt;(cur, level)&lt;/code&gt;指向的节点分裂为两个节点。分裂之后，&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;可能指向新节点，也可能指向旧节点，取决于原来的ptr落在哪个节点。&lt;/p&gt;

&lt;p&gt;如果发生了分裂，那么有两个事情需要注意：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果分裂前&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;指向的位置现在位于新的block中，那么就需要更新&lt;code class=&quot;highlighter-rouge&quot;&gt;cur-&amp;gt;bc_bufs&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;cur-&amp;gt;bc_ptrs&lt;/code&gt;对应内容。&lt;/li&gt;
  &lt;li&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;当前指向的节点还有父节点，那么会复制一个游标到&lt;code class=&quot;highlighter-rouge&quot;&gt;curp&lt;/code&gt;，并且把父节点的ptr右移一个记录，这个位置需要插入一个指针指向这次创建的节点。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;该函数会通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ptrp&lt;/code&gt;返回新增的block的number，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;返回新增的block的第一个record。&lt;/p&gt;

&lt;h2 id=&quot;xfs_btree_deletecur-stat&quot;&gt;xfs_btree_delete(cur, stat)&lt;/h2&gt;

&lt;h3 id=&quot;xfs_btree_delreccur-level-stat&quot;&gt;xfs_btree_delrec(cur, level, stat)&lt;/h3&gt;

&lt;p&gt;先从当前节点删除ptr位置的数据，然后重平衡整棵树。这个函数会被&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_delete()&lt;/code&gt;调用多次，从level 0开始往上，直到不再需要重平衡为止。&lt;/p&gt;

&lt;h2 id=&quot;xfs_btree_updatecur-rec&quot;&gt;xfs_btree_update(cur, rec)&lt;/h2&gt;

&lt;p&gt;更新当前&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;指向的记录的值为&lt;code class=&quot;highlighter-rouge&quot;&gt;rec&lt;/code&gt;的值。更新指定的记录之后，会调用函数&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_needs_key_update()&lt;/code&gt;判断是否需要更新父节点的key，对于标准的btree，只有当更新的是节点的第一个位置的记录的时候，才需要更新父节点的key。如果需要更新，则调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xfs_btree_update_keys()&lt;/code&gt;执行更新。&lt;/p&gt;

&lt;p&gt;需要注意的是，这个函数并不检查更新后的数据是否满足btree的搜索正确性，这点由调用者保证。&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/05/14/xfs-progs-btree/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/05/14/xfs-progs-btree/</guid>
        
        <category>storage</category>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第26期 - 2018-04-23</title>
        <description>&lt;h2 id=&quot;whats-new-in-mysql-80-generally-available&quot;&gt;What’s New in MySQL 8.0? (Generally Available)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://mysqlserverteam.com/whats-new-in-mysql-8-0-generally-available/&quot;&gt;https://mysqlserverteam.com/whats-new-in-mysql-8-0-generally-available/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;MySQL 8.0 已经 GA 了。&lt;/p&gt;

&lt;h2 id=&quot;apple开源了foundationdb&quot;&gt;Apple开源了FoundationDB&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.foundationdb.org/blog/&quot;&gt;https://www.foundationdb.org/blog/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;FoundationDB 是一个分布式的 ACID 数据库，github 地址：&lt;em&gt;&lt;a href=&quot;https://github.com/apple/foundationdb&quot;&gt;https://github.com/apple/foundationdb&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;100tb-capacity-and-6x-performance-improvement-with-alibaba-cloud-polardb&quot;&gt;100TB Capacity and 6x Performance Improvement with Alibaba Cloud PolarDB&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/@Alibaba_Cloud/100tb-capacity-and-6x-performance-improvement-with-alibaba-cloud-polardb-79b270c1a481&quot;&gt;https://medium.com/@Alibaba_Cloud/100tb-capacity-and-6x-performance-improvement-with-alibaba-cloud-polardb-79b270c1a481&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alibaba官方blog介绍自己的PolarDB的架构，说明如何做到MySQL 5.6的6倍性能。&lt;/p&gt;

&lt;h2 id=&quot;cloud-sql-for-postgresql-now-generally-available-and-ready-for-your-production-workloads&quot;&gt;Cloud SQL for PostgreSQL now generally available and ready for your production workloads&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://cloudplatform.googleblog.com/2018/04/Cloud-SQL-for-PostgreSQL-now-generally-available-and-ready-for-your-production-workloads.html&quot;&gt;https://cloudplatform.googleblog.com/2018/04/Cloud-SQL-for-PostgreSQL-now-generally-available-and-ready-for-your-production-workloads.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud SQL 的 PostgreSQL 支持现在 GA 了。版本是 9.6，最大支持 416G 内存、64CPU 和 10TB 空间。&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/04/23/write-what-i-have-026/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/04/23/write-what-i-have-026/</guid>
        
        <category>database</category>
        
        <category>cloud</category>
        
        
      </item>
    
  </channel>
</rss>
