<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffee, Coke and Code</title>
    <description>Archive diabloneo's articles.
</description>
    <link>http://diabloneo.github.io//</link>
    <atom:link href="http://diabloneo.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 21 Sep 2018 13:31:09 +0800</pubDate>
    <lastBuildDate>Fri, 21 Sep 2018 13:31:09 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Postgres的使用 - 2</title>
        <description>&lt;p&gt;在 Postgres 中，我们可以使用如下的查询来获取长时间执行的查询或者操作，这个语句依赖于 &lt;em&gt;pg_stat_activity&lt;/em&gt; 视图。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;datname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;usename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;client_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;backend_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;xact_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;xact_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;query_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;query_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datname&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usename&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_addr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backend_start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backend_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xact_start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xact_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EPOCH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xact_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xact_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EPOCH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;REGEXP_REPLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^SELECT.*FROM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'FROM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_stat_activity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'idle'&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'idle in transaction'&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgsa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'idle in transaction (aborted)'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idleconnections&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_duration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个查询用到的字段在 9.2 版本就都支持了，9.6 版本还增加了其他字段，有需要可以自己对比一下文档：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;9.2: &lt;a href=&quot;https://www.postgresql.org/docs/9.2/static/monitoring-stats.html&quot;&gt;https://www.postgresql.org/docs/9.2/static/monitoring-stats.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;9.6: &lt;a href=&quot;https://www.postgresql.org/docs/9.6/static/monitoring-stats.html&quot;&gt;https://www.postgresql.org/docs/9.6/static/monitoring-stats.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用到的几个字段的含义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;datname&lt;/code&gt;: 数据库名称。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;: 用户名。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client_addr&lt;/code&gt;: 客户端地址。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;: 连接的当前状态，一共有6种，这里需要显示的是其中3种&lt;strong&gt;非空闲&lt;/strong&gt;的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backend_start&lt;/code&gt;: 连接开始时间。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xact_start&lt;/code&gt;: 当前事务开始时间。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXTRACT(EPOCH FROM (now() - pgsa.xact_start)) AS xact_duration&lt;/code&gt;: 计算当前事务进行了多久，单位是秒。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query_start&lt;/code&gt;: 当前查询开始的时间，一个事务内可能有多个查询。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXTRACT(EPOCH FROM (now() - pgsa.query_start)) AS query_duration&lt;/code&gt;: 计算当前查询进行了多久，单位是秒。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REGEXP_REPLACE(REPLACE(pgsa.query, CHR(10), ' '), '^SELECT.*FROM', 'FROM', 'i') AS query&lt;/code&gt;: 查询语句的内容，这里把换行符替换成空格，而且会尝试把 &lt;em&gt;SELECT … FROM&lt;/em&gt; 替换为 &lt;em&gt;FROM&lt;/em&gt;（方便查看查询的是哪个表，不过如果语句过长，原始查询语句只会保留前 1024 个字符，这个是由 &lt;strong&gt;track_activity_query_size&lt;/strong&gt; 参数决定的）。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 21 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/09/21/postgres-note-2/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/09/21/postgres-note-2/</guid>
        
        <category>database</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第33期 - 2018-09-14</title>
        <description>&lt;h2 id=&quot;how-a-single-postgresql-config-change-improved-slow-query-performance-by-50x&quot;&gt;How a single PostgreSQL config change improved slow query performance by 50x&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://amplitude.engineering/how-a-single-postgresql-config-change-improved-slow-query-performance-by-50x-85593b8991b0&quot;&gt;https://amplitude.engineering/how-a-single-postgresql-config-change-improved-slow-query-performance-by-50x-85593b8991b0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;因为默认的配置中，random_page_cost = 4, seq_page_cost = 1，是针对HDD调优的，当你使用SSD时，实际情况并不是这样的。如果不修改配置，就会导致Postgres选择一个更差的计划。&lt;/p&gt;

&lt;h2 id=&quot;a-one-size-fits-all-database-doesnt-fit-anyone&quot;&gt;A one size fits all database doesn’t fit anyone&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.allthingsdistributed.com/2018/06/purpose-built-databases-in-aws.html&quot;&gt;https://www.allthingsdistributed.com/2018/06/purpose-built-databases-in-aws.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AWS CTO Werner描述了为什么AWS要提供这么多不同的数据库服务，包括：关系数据库，kv数据库，文档数据库，图数据库，内存数据库和搜索数据库。因为不同的数据库类型用来解决不同的问题，没有一种数据库可以解决所有的问题。AWS的许多客户都已经不再开发一个巨应用了，都改微服务了，每个服务可以选择自己需要的数据库。&lt;/p&gt;

&lt;h2 id=&quot;google-titan-security-key-is-now-on-sale-for-50&quot;&gt;Google ‘Titan Security Key’ Is Now On Sale For $50&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://thehackernews.com/2018/08/google-titan-security-key.html&quot;&gt;https://thehackernews.com/2018/08/google-titan-security-key.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google 推出了自己的硬件秘钥Titan，售价50美元，支持蓝牙，支持所有usb接口，电脑只要有Chrome就能用。目前尽在没有有售。&lt;/p&gt;

&lt;h2 id=&quot;influxdb-eventual-consistency&quot;&gt;InfluxDB: Eventual Consistency&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.influxdata.com/blog/eventual-consistency-hhq/&quot;&gt;https://www.influxdata.com/blog/eventual-consistency-hhq/&lt;/a&gt;&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;使用 Hinted Handoff Queue 来保存失败节点的消息，也就是一个暂存区。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.influxdata.com/blog/eventual-consistency-anti-entropy/&quot;&gt;https://www.influxdata.com/blog/eventual-consistency-anti-entropy/&lt;/a&gt;&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;实现 Anti Entropy，也就是避免数据的不一致性。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两篇其实只是科普文章，用来介绍 InfluxDB Enterprise 如何实现最终一致性的。&lt;/p&gt;

&lt;h2 id=&quot;metrics-to-monitor-in-your-postgresql-database&quot;&gt;Metrics to Monitor in Your PostgreSQL Database&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.influxdata.com/blog/metrics-to-monitor-in-your-postgresql-database/&quot;&gt;https://www.influxdata.com/blog/metrics-to-monitor-in-your-postgresql-database/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了postgres的几个用于监控的数据以及使用场景。&lt;/p&gt;

&lt;h2 id=&quot;on-premises-hipchat-replacements-in-2018&quot;&gt;On-Premises HipChat Replacements in 2018&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackshare.io/posts/on-premises-hipchat-replacements-in-2018&quot;&gt;https://stackshare.io/posts/on-premises-hipchat-replacements-in-2018&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了在2018年，你要搭一个自己的类Slack服务，有哪些选择？忘了HipChat吧，那个过时了，本文推荐了3个：Rocket.Chat, Zulip 和 Mattermost。&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/09/14/write-what-i-have-033/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/09/14/write-what-i-have-033/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>storage</category>
        
        <category>database</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>Systemd unit 的所有状态</title>
        <description>&lt;p&gt;Systemd 管理的资源的单位是 unit，最常见的 unit 就是一个服务。我们经常使用 systemctl status 查看某些服务的状态，来确认这个服务的运行是否正常。像下面这样：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜ ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl status docker
● docker.service - Docker Application Container Engine
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/lib/systemd/system/docker.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Thu 2018-09-13 11:53:33 CST&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 1 day 2h ago
     Docs: https://docs.docker.com
Main PID: 1917 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dockerd&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里的 &lt;strong&gt;Loaded&lt;/strong&gt; 和 &lt;strong&gt;Active&lt;/strong&gt; 两行就表示这个 unit 的状态，其中 &lt;strong&gt;Loaded&lt;/strong&gt; 表示这个 unit 是否已经正确读到内存之中，&lt;strong&gt;Active&lt;/strong&gt; 则表示这个 unit 的运行状态。另外，&lt;strong&gt;Active&lt;/strong&gt; 这里包含了一个 state 和一个 substate，括号内的是 substate，state 的状态定义对所有 unit 都是一样的，但是不同类型的 unit 会定义不同的 substate （systemd 有 11 种类型的 unit，具体请查看 man page）。&lt;/p&gt;

&lt;p&gt;那么一个 unit 到底有哪些状态呢？我发现我在 man page 中找不到所有状态的说明，但是有个神奇的命令却能列出所有的状态：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemctl &lt;span class=&quot;nt&quot;&gt;--state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help

&lt;/span&gt;Available unit load states:
stub
loaded
not-found
error
merged
masked

Available unit active states:
active
reloading
inactive
failed
activating
deactivating

Available automount unit substates:
dead
waiting
running
failed

Available device unit substates:
dead
tentative
plugged

Available mount unit substates:
dead
mounting
mounting-done
mounted
remounting
unmounting
remounting-sigterm
remounting-sigkill
unmounting-sigterm
unmounting-sigkill
failed

Available path unit substates:
dead
waiting
running
failed

Available scope unit substates:
dead
running
abandoned
stop-sigterm
stop-sigkill
failed

Available service unit substates:
dead
start-pre
start
start-post
running
exited
reload
stop
stop-sigabrt
stop-sigterm
stop-sigkill
stop-post
final-sigterm
final-sigkill
failed
auto-restart

Available slice unit substates:
dead
active

Available socket unit substates:
dead
start-pre
start-chown
start-post
listening
running
stop-pre
stop-pre-sigterm
stop-pre-sigkill
stop-post
final-sigterm
final-sigkill
failed

Available swap unit substates:
dead
activating
activating-done
active
deactivating
deactivating-sigterm
deactivating-sigkill
failed

Available target unit substates:
dead
active

Available timer unit substates:
dead
waiting
running
elapsed
failed&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 14 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/09/14/systemd-unit-states/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/09/14/systemd-unit-states/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>Postgres的使用 - 1</title>
        <description>&lt;h2 id=&quot;case语句&quot;&gt;CASE语句&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CASE&lt;/strong&gt; 语句属于SQL标准的条件表达式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当结果中的&lt;code class=&quot;highlighter-rouge&quot;&gt;O.id IS NULL&lt;/code&gt;时，&lt;code class=&quot;highlighter-rouge&quot;&gt;used&lt;/code&gt;列的值为&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;，否则为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;with语句&quot;&gt;WITH语句&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;WITH&lt;/strong&gt; 语句用于将指定的子查询的结果保存在一张临时表中，可以在主查询中使用这张表。一个常用的场景是通过WITH语句指定主查询中要用到的条件值。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timerange&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2018-07-27 14:00:00+08:00'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2018-08-30 10:00:00+08:00'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_iops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_iops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_bandwidth_kbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_bandwidth_kbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;created_at&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume_stat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timerange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timerange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_iops&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_bandwidth_kbyte&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个例子中，前面的&lt;code class=&quot;highlighter-rouge&quot;&gt;WITH&lt;/code&gt;语句指定了匹配的数据的起止时间。&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/08/05/postgres-note-1/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/08/05/postgres-note-1/</guid>
        
        <category>database</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第32期 - 2018-08-04</title>
        <description>&lt;h2 id=&quot;how-the-go-runtime-implements-maps-efficiently-without-generics&quot;&gt;How the Go runtime implements maps efficiently (without generics)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics&quot;&gt;https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;前半部分介绍了hashmap的基本概念，后半部分介绍了Go的runtime如何实现map key的hash计算。Go没有泛型，也不是用&lt;code class=&quot;highlighter-rouge&quot;&gt;interface{}&lt;/code&gt;来实现。map操作的实现会编译器重写为对runtime函数的调用，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.mapaccess1()&lt;/code&gt;。然后使用一个结构体maptype来保存key的信息，因为编译的时候就能知道key的类型，所以会为不同类型的key指定好hash函数，在运行的时候直接调用即可。&lt;/p&gt;

&lt;h2 id=&quot;verifying-postgresql-backups-made-easier-with-new-open-source-tool&quot;&gt;Verifying PostgreSQL backups made easier with new open-source tool&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://cloudplatform.googleblog.com/2018/07/verifying-postgresql-backups-made-easier-with-new-open-source-tool.html&quot;&gt;https://cloudplatform.googleblog.com/2018/07/verifying-postgresql-backups-made-easier-with-new-open-source-tool.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud开源了自己开发的Postgres backup校验工具，使用Postgres的checksum功能来校验一个backup数据是否正确。Checksum功能需要在初始化数据库的时候开启，&lt;code class=&quot;highlighter-rouge&quot;&gt;initdb --data-checksums&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;xars-an-efficient-system-for-self-contained-executables&quot;&gt;XARs: An efficient system for self-contained executables&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://code.fb.com/data-infrastructure/xars-a-more-efficient-open-source-system-for-self-contained-executables/&quot;&gt;https://code.fb.com/data-infrastructure/xars-a-more-efficient-open-source-system-for-self-contained-executables/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;基于一种基于FUSE的按需加载文件系统的思想来实现数据包的分发。基本思路是把要打包的应用、依赖以及数据，放到一个squashfs archive中，然后在要运行的时候使用FUSE挂载，然后执行。对于Python来说，这个squashfs中已经包含了virtualenv环境，所以对运行的操作系统没有依赖。基于同样的思路，也可以用来打包Node或者Lua应用。&lt;/p&gt;

&lt;h2 id=&quot;gracefully-scaling-to-10k-postgresql-connections-for-35mo&quot;&gt;Gracefully Scaling to 10k PostgreSQL Connections for $35/mo&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/futuretech-industries/ten-thousand-high-availability-postgresql-connections-for-35-mo-part-one-4b7a2d61c51e&quot;&gt;https://medium.com/futuretech-industries/ten-thousand-high-availability-postgresql-connections-for-35-mo-part-one-4b7a2d61c51e&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/futuretech-industries/postgres-raffle-10k-connections-35-mo-part-two-b4c2e0c86e37?ref=stackshare&quot;&gt;https://medium.com/futuretech-industries/postgres-raffle-10k-connections-35-mo-part-two-b4c2e0c86e37?ref=stackshare&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了PgBouncer的使用和配置。&lt;/p&gt;

&lt;h2 id=&quot;do-you-know-the-new-names-for-linux-network-interfaces&quot;&gt;Do You Know the New Names for Linux Network Interfaces?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.learningtree.com/new-names-linux-network-interfaces/&quot;&gt;https://blog.learningtree.com/new-names-linux-network-interfaces/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了Linux下的网络设备名称为什么从 eth0变成 enp2s0这种。&lt;/p&gt;

&lt;h2 id=&quot;portable-cloud-programming-with-go-cloud&quot;&gt;Portable Cloud Programming with Go Cloud&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.golang.org/go-cloud&quot;&gt;https://blog.golang.org/go-cloud&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google推出了Go Cloud。Go Cloud是一套开源框架，目的是帮助用户实现可以跨云的应用程序。基本思路就是用户只有在云服务的设置逻辑上调用不同云的SDK，而使用云资源的时候，则不需要区分是哪个云。这么做的好处是，主要的业务逻辑都是在资源的使用上的，云服务的设置逻辑其实很少。所以能减少用户的重复代码。&lt;/p&gt;

&lt;h2 id=&quot;the-right-way-to-handle-yaml-in-go&quot;&gt;The right way to handle YAML in Go&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://ghodss.com/2014/the-right-way-to-handle-yaml-in-golang/&quot;&gt;http://ghodss.com/2014/the-right-way-to-handle-yaml-in-golang/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;原来YAML可以简写成JSON的形式，然后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;json.Unmarshal()&lt;/code&gt;来解析到一个结构体。&lt;/p&gt;

&lt;h2 id=&quot;go-code-refactoring--the-23x-performance-hunt&quot;&gt;Go code refactoring : the 23x performance hunt&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/@val_deleplace/go-code-refactoring-the-23x-performance-hunt-156746b522f7&quot;&gt;https://medium.com/@val_deleplace/go-code-refactoring-the-23x-performance-hunt-156746b522f7&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍如何一步一步的优化一个简单的程序，以获得23倍的性能提升。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/08/04/write-what-i-have-032/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/08/04/write-what-i-have-032/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>storage</category>
        
        <category>database</category>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第31期 - 2018-07-15</title>
        <description>&lt;h2 id=&quot;memory-leaking&quot;&gt;Memory Leaking&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://go101.org/article/memory-leaking.html&quot;&gt;https://go101.org/article/memory-leaking.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;描述了几种容易碰到的内存泄露的情况。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;time.Ticker&lt;/code&gt;的时候需要小心这些陷阱。本文是出自书 &lt;strong&gt;Go 101&lt;/strong&gt;，值得一读。&lt;a href=&quot;https://go101.org/article/101.html&quot;&gt;https://go101.org/article/101.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-much-does-netflix-spend-on-amazon-aws&quot;&gt;How much does Netflix spend on Amazon AWS?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.quora.com/How-much-does-Netflix-spend-on-Amazon-AWS&quot;&gt;https://www.quora.com/How-much-does-Netflix-spend-on-Amazon-AWS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Quora上的一个问题。有人引用了一个Intricately的数据回答了。每月花4000w美元在云服务上，其中2360w是花在AWS上。AWS上前五名的花费如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;EC2            1900w&lt;/li&gt;
  &lt;li&gt;ELB            300w&lt;/li&gt;
  &lt;li&gt;CloudFront     100w&lt;/li&gt;
  &lt;li&gt;S3             51.5w&lt;/li&gt;
  &lt;li&gt;Route 53       11.7w&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;minimal-ubuntu-on-public-clouds-and-docker-hub&quot;&gt;Minimal Ubuntu, on public clouds and Docker Hub&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.ubuntu.com/2018/07/09/minimal-ubuntu-released&quot;&gt;https://blog.ubuntu.com/2018/07/09/minimal-ubuntu-released&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu推出新的minimal镜像，针对公有云和kvm进行优化，体积更小，启动更快，性能更好。&lt;/p&gt;

&lt;h2 id=&quot;fun-with-sql-functions-in-postgres&quot;&gt;Fun with SQL: Functions in Postgres&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2018/06/21/fun-with-sql-functions/&quot;&gt;https://www.citusdata.com/blog/2018/06/21/fun-with-sql-functions/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了下面这些方便的Postgres函数&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;array_agg()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;array_to_string()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date_trunc()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;migrating-messenger-storage-to-optimize-performance&quot;&gt;Migrating Messenger storage to optimize performance&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://code.fb.com/data-infrastructure/migrating-messenger-storage-to-optimize-performance/&quot;&gt;https://code.fb.com/data-infrastructure/migrating-messenger-storage-to-optimize-performance/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重新设计数据格式&lt;/li&gt;
  &lt;li&gt;从HBase迁移到MyRocks&lt;/li&gt;
  &lt;li&gt;从HDD迁移到SSD，用上了自家的Lightning Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;99.9%的账号走普通流程，在2周内迁移完，剩下的走buffered迁移流程，又用了两周。 迁移结束后，得到了如下的好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最后使用新的数据格式减少了数据量&lt;/li&gt;
  &lt;li&gt;使用自家的Zstandard压缩数据&lt;/li&gt;
  &lt;li&gt;因为用了MyRocks，数据从6副本减少到3副本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总的算下来，数据空间占用减少了90%。延迟减少了50倍。对最终用户来说，查看历史消息的速度更快了。&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/07/15/write-what-i-have-031/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/07/15/write-what-i-have-031/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>storage</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第30期 - 2018-07-01</title>
        <description>&lt;h2 id=&quot;the-next-wave-digitaloceans-new-ceo&quot;&gt;The Next Wave: DigitalOcean’s New CEO&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.digitalocean.com/the-next-wave-digitaloceans-new-ceo/&quot;&gt;https://blog.digitalocean.com/the-next-wave-digitaloceans-new-ceo/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;DigitalOcean’s 聘请了前Citrix CEO Mark Templeton担任新的CEO。&lt;/p&gt;

&lt;h2 id=&quot;benchmarks-serialization-in-go&quot;&gt;Benchmarks!!! Serialization in Go!!!&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.ugorji.net/blog/benchmarking-serialization-in-go&quot;&gt;http://www.ugorji.net/blog/benchmarking-serialization-in-go&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;比较了Go的几种序列化实现的性能。&lt;/p&gt;

&lt;h2 id=&quot;multiple-ec2-network-interfaces-on-red-hat--centos-7&quot;&gt;Multiple EC2 Network Interfaces on Red Hat / CentOS 7&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.internetstaff.com/multiple-ec2-network-interfaces-on-red-hat-centos-7/&quot;&gt;https://www.internetstaff.com/multiple-ec2-network-interfaces-on-red-hat-centos-7/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了如何AWS EC2在运行RedHat/CentOS 7时，如何配置多个网卡，也就时一个ec2加入多个subnet后，如何配置多个eni。默认情况下，会有路由问题，导致primary eni网络不通。&lt;/p&gt;

&lt;h2 id=&quot;new--amazon-linux-workspaces&quot;&gt;New – Amazon Linux WorkSpaces&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://aws.amazon.com/cn/blogs/aws/new-amazon-linux-workspaces/&quot;&gt;https://aws.amazon.com/cn/blogs/aws/new-amazon-linux-workspaces/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon Linux 2现在有桌面版了，你可以在WorkSpace运行一个Amazon Linux 2的机器，相当于有了一个公有云Linux桌面。&lt;/li&gt;
  &lt;li&gt;Amazon Linux 2正式提供LTS支持，到2023年6月30日。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;performance-patches-in-go-111&quot;&gt;Performance patches in Go 1.11&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1tpeJZFObkeick4CF-mx0L3CeCgvT15B96aJeRpxEPcE/edit#slide=id.p&quot;&gt;https://docs.google.com/presentation/d/1tpeJZFObkeick4CF-mx0L3CeCgvT15B96aJeRpxEPcE/edit#slide=id.p&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fasthttp的作者制作的一个幻灯片，说明了Go 1.11中和性能相关的Patch。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有些是对使用者写代码可感知的，比如现在可以写append(a, make([]a, itemNum))来扩展一个slice。&lt;/li&gt;
  &lt;li&gt;有一些是对runtime的改进。比如改进循环检查，改进内存分配等。&lt;/li&gt;
  &lt;li&gt;有一些是改进数学库和数学操作。&lt;/li&gt;
  &lt;li&gt;改进标准库。&lt;/li&gt;
  &lt;li&gt;改进arm平台的性能。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 01 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/07/01/write-what-i-have-030/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/07/01/write-what-i-have-030/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第29期 - 2018-06-18</title>
        <description>&lt;h2 id=&quot;why-we-chose-ceph-to-build-block-storage&quot;&gt;Why We Chose Ceph to Build Block Storage&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.digitalocean.com/why-we-chose-ceph-to-build-block-storage/&quot;&gt;https://blog.digitalocean.com/why-we-chose-ceph-to-build-block-storage/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;DigitalOcean说他们为什么选择Ceph来提供块存储服务。目前用的是L版，跑在SSD上，三副本。文中也提到了，他们只把Ceph用在块存储上，虚拟机的系统盘本身不存储在Ceph上。&lt;/p&gt;

&lt;h2 id=&quot;a-bright-future-for-github&quot;&gt;A bright future for GitHub&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.github.com/2018-06-04-github-microsoft/&quot;&gt;https://blog.github.com/2018-06-04-github-microsoft/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blogs.microsoft.com/blog/2018/06/04/microsoft-github-empowering-developers/&quot;&gt;https://blogs.microsoft.com/blog/2018/06/04/microsoft-github-empowering-developers/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GitHub被微软收购了。&lt;/p&gt;

&lt;h2 id=&quot;what-stratis-learned-from-zfs-btrfs-and-linux-volume-manager&quot;&gt;What Stratis learned from ZFS, Btrfs, and Linux Volume Manager&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://opensource.com/article/18/4/stratis-lessons-learned&quot;&gt;https://opensource.com/article/18/4/stratis-lessons-learned&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Stratis文件系统从ZFS，Btrfs和LVM上学习的东西。&lt;/p&gt;

&lt;h2 id=&quot;extending-magic-pocket-innovation-with-the-first-petabyte-scale-smr-drive-deployment&quot;&gt;Extending Magic Pocket Innovation with the first petabyte scale SMR drive deployment&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blogs.dropbox.com/tech/2018/06/extending-magic-pocket-innovation-with-the-first-petabyte-scale-smr-drive-deployment/&quot;&gt;https://blogs.dropbox.com/tech/2018/06/extending-magic-pocket-innovation-with-the-first-petabyte-scale-smr-drive-deployment/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dropbox在自己的基础架构中开始应用SMR盘，这样可以提升机柜的存储密度，降低成本。但是换成SMR盘也会有一些问题要解决：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;因为SMR盘的写性能不如PMR盘，他们选用了Host Managed SMR盘，自己控制读写。&lt;/li&gt;
  &lt;li&gt;机器需要加内存，提升CPU。他们把数据索引保存在内存中，因为整个机器的存储空间增加了，所以内存也要加。额外增加的CPU算力用来保证机器的吞吐。&lt;/li&gt;
  &lt;li&gt;从RAID换到HBA。原来应用RAID 0来提升写性能，并且使用了RAID cache。这样可以降低部署时间，不用再维护RAID的bug和固件版本。&lt;/li&gt;
  &lt;li&gt;因为去掉了RAID，写cache也没了，所以添加了一个SSD来做写cache。不过，他们发现SATA的性能已经快满了，将来需要换到NVMe盘。&lt;/li&gt;
  &lt;li&gt;每个机器有100个盘，存储密度从一开始的240TB上升到1.4PB（使用了14TB的SMR盘），为了满足性能需求，需要用50Gbps的网卡。&lt;/li&gt;
  &lt;li&gt;软件的重新设计，对于SMR，大块写（4 - 5MB）性能更好。元数据频繁修改，会被放在磁盘的conventional area中（板载缓存）。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 18 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/06/18/write-what-i-have-029/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/06/18/write-what-i-have-029/</guid>
        
        <category>storage</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第28期 - 2018-05-27</title>
        <description>&lt;h2 id=&quot;bazel-buildgo&quot;&gt;bazel build://go&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/dSl82PF6LRx7iwVl4BZzZQ&quot;&gt;https://mp.weixin.qq.com/s/dSl82PF6LRx7iwVl4BZzZQ&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;流利说介绍他们如何使用bazel来build项目。&lt;/p&gt;

&lt;h2 id=&quot;algorithms-behind-modern-storage-systems&quot;&gt;Algorithms Behind Modern Storage Systems&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3220266&quot;&gt;https://queue.acm.org/detail.cfm?id=3220266&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了B-trees和LSM trees的使用。&lt;/p&gt;

&lt;h2 id=&quot;porting-the-sgi-xfs-file-system-to-linux&quot;&gt;Porting the SGI XFS File System to Linux&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://pdfs.semanticscholar.org/0948/ff7fea8440185e5a8117138c0887c878d467.pdf&quot;&gt;https://pdfs.semanticscholar.org/0948/ff7fea8440185e5a8117138c0887c878d467.pdf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;将XFS文件系统移植到Linux时发表的论文。&lt;/p&gt;
</description>
        <pubDate>Sun, 27 May 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/05/27/write-what-i-have-028/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/05/27/write-what-i-have-028/</guid>
        
        <category>golang</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第27期 - 2018-05-20</title>
        <description>&lt;h2 id=&quot;colly-goes-10&quot;&gt;Colly goes 1.0&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://go-colly.org/articles/first_release/&quot;&gt;http://go-colly.org/articles/first_release/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go写的爬虫框架Colly发布了1.0版本。&lt;/p&gt;

&lt;h2 id=&quot;how-to-do-math-on-the-linux-command-line&quot;&gt;How to do math on the Linux command line&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.networkworld.com/article/3268964/linux/how-to-do-math-on-the-linux-command-line.html&quot;&gt;https://www.networkworld.com/article/3268964/linux/how-to-do-math-on-the-linux-command-line.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍shell中进行数学运算的几个方法。对于我来说，在shell中执行简单的数学运算经常遇到尴尬的情况：用的时候想不起来。所以还是要收藏一篇类似quick start的文章。&lt;/p&gt;

&lt;h2 id=&quot;how-to-start-a-go-project-in-2018&quot;&gt;How to start a Go project in 2018&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://boyter.org/posts/how-to-start-go-project-2018/&quot;&gt;https://boyter.org/posts/how-to-start-go-project-2018/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了在2018年，一个Go项目中的常用方法，包括GOPATH设置、unit test、依赖管理、命令行入口等。&lt;/p&gt;

&lt;h2 id=&quot;elixir-cross-reference---bootlin&quot;&gt;Elixir Cross Reference - bootlin&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://elixir.bootlin.com/linux/latest/source&quot;&gt;https://elixir.bootlin.com/linux/latest/source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一个搜索Linux kernel代码的工具，支持从2.6到最新的版本。&lt;/p&gt;
</description>
        <pubDate>Sun, 20 May 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/05/20/write-what-i-have-027/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/05/20/write-what-i-have-027/</guid>
        
        <category>golang</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
        
      </item>
    
  </channel>
</rss>
