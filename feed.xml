<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffee, Coke and Code</title>
    <description>Archive diabloneo's articles.
</description>
    <link>http://diabloneo.github.io//</link>
    <atom:link href="http://diabloneo.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Jan 2021 15:14:02 +0800</pubDate>
    <lastBuildDate>Thu, 21 Jan 2021 15:14:02 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>如何学习 cmake</title>
        <description>&lt;ol&gt;
  &lt;li&gt;首先，&lt;a href=&quot;https://cmake.org/cmake/help/latest/guide/tutorial/index.html&quot;&gt;官方的入门文档&lt;/a&gt; 不建议去看，因为不够简单明了。推荐看这篇 &lt;em&gt;&lt;a href=&quot;https://mirkokiefer.com/cmake-by-example-f95eb47d45b1&quot;&gt;CMake by Example&lt;/a&gt;&lt;/em&gt;，简单明了，你可以直接了解到 cmake 的整体情况。&lt;/li&gt;
  &lt;li&gt;然后，学习一个大项目的 cmake 文件，在学习的过程中，查询 reference 文档来了解细节。我推荐大家学习 FoundationDB 的 cmake 文件 &lt;a href=&quot;https://github.com/apple/foundationdb&quot;&gt;https://github.com/apple/foundationdb&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 15 Jan 2021 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2021/01/15/how-to-learn-cmake/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2021/01/15/how-to-learn-cmake/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>beego ORM 和 Golang sql.DB</title>
        <description>&lt;h2 id=&quot;几个数据结构之间的关系&quot;&gt;几个数据结构之间的关系&lt;/h2&gt;

&lt;h3 id=&quot;注册数据库&quot;&gt;注册数据库&lt;/h3&gt;

&lt;p&gt;我们使用如下的方式来将一个数据库注册到 beego ORM 的 &lt;strong&gt;default&lt;/strong&gt; alias 中：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxIdleConns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxOpenConns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegisterDataBase()&lt;/code&gt; 方法的主要内容是将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orm.alias&lt;/code&gt; 对象和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.DB&lt;/code&gt;，以及对应数据库类型的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbBaser&lt;/code&gt; 对象关联起来。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// RegisterDataBase Setting the database connect params. Use the database driver self dataSource args.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegisterDataBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aliasName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driverName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driverName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addAliasWthDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aliasName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driverName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.Open&lt;/code&gt; 返回一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*sql.DB&lt;/code&gt; 对象。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addAliasWithDB()&lt;/code&gt; 方法返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*orm.alias&lt;/code&gt;，主要是设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DbBaser&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DB&lt;/code&gt; 这两个对象。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DB&lt;/code&gt; 指向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.DB&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DbBaser&lt;/code&gt; 则指向所支持的数据库类型的实现对象。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addAliasWthDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aliasName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driverName&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aliasName&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriverName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driverName&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drivers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driverName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DbBaser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbBasers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driver name `%s` have not registered&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driverName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;beego ORM 支持 5 种常用的数据库方言，可以在全局的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbBasers&lt;/code&gt; map 中查到。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;dbBasers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriverType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbBaser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DRMySQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;newdbBaseMysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DRSqlite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;newdbBaseSqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DROracle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;newdbBaseOracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DRPostgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newdbBasePostgres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DRTiDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;newdbBaseTidb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我常用的 Postgres 的实现在 &lt;em&gt;orm/db_postgres.go&lt;/em&gt; 里，所依赖的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbBase&lt;/code&gt; 在 &lt;em&gt;orm/db.go&lt;/em&gt; 里。&lt;/p&gt;

&lt;h3 id=&quot;orm-执行-sql-语句的过程&quot;&gt;ORM 执行 SQL 语句的过程&lt;/h3&gt;

&lt;p&gt;一般我们是先调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewOrm()&lt;/code&gt; 方法获得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orm.Ormer&lt;/code&gt; 对象。这个方法会创建一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orm.orm&lt;/code&gt; 对象，主要是设置了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o.alias = al&lt;/code&gt; ( &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;al&lt;/code&gt; 是上面创建的默认 alias ) 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o.db = al.DB&lt;/code&gt;。即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o.db&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*sql.DB&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后，当我们要执行一个查询时，我们一般这么写：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orm.QueryTable&lt;/code&gt; 方法，主要是调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newQuerySet()&lt;/code&gt; 返回一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QuerySetter&lt;/code&gt; interface，本质是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*querySet&lt;/code&gt;。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// return a QuerySeter for table operations.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// table name can be string or struct.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// e.g. QueryTable(&quot;user&quot;), QueryTable(&amp;amp;user{}) or QueryTable((*User)(nil)),&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueryTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptrStructOrTableName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuerySeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptrStructOrTableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snakeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newQuerySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indirectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptrStructOrTableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getByFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newQuerySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;Ormer.QueryTable&amp;gt; table name: `%s` not exists&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newQuerySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QuerySeter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;querySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// real query struct&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;querySet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelInfo&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Condition&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;related&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;relDepth&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后，我们执行的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All()&lt;/code&gt; 等查询方法，大概是下面这样的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;querySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DbBaser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;所以要执行一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All()&lt;/code&gt;，其实是要到 &lt;em&gt;db_postgres.go&lt;/em&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbBasePostgres&lt;/code&gt; 里执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadBatch&lt;/code&gt;，也就是在 &lt;em&gt;orm/db.go&lt;/em&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbBase&lt;/code&gt; 的方法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbQuerier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;querySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Indirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %s FROM %s%s%s T0 %s%s%s%s%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里关注第一个参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q dbQuerier&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbQuerier&lt;/code&gt; 其实就是确定了需要使用 interface，这些是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*sql.DB&lt;/code&gt; 支持的方法的一个子集，ORM 只需要用到这些方法。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// db querier&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbQuerier&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;QueryRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;到这里，可以简单总结一下通过 ORM 进行数据库查询的主要过程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ORM 根据你注册的 ORM 对象以及你指定的 DB alias 生成要执行的 SQL。这些主要由各种 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbBaser&lt;/code&gt; 来实现，参考 &lt;em&gt;orm/db_postgres.go&lt;/em&gt; 和 &lt;em&gt;orm/db.go&lt;/em&gt;。&lt;/li&gt;
  &lt;li&gt;ORM 生成了 SQL 之后，调用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*sql.DB.Query()&lt;/code&gt; 方法来执行 SQL。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.DB&lt;/code&gt; 在执行查询的时候，则需要依赖于注册的 db driver 来实现，例如 Postgres 的 &lt;em&gt;github.com/lib/pq&lt;/em&gt;。这一部分本文就不展开说了。&lt;/li&gt;
  &lt;li&gt;得到查询结果之后，再处理成 ORM 对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;关系图&quot;&gt;关系图&lt;/h3&gt;

&lt;p&gt;根据上面的代码分析，可以画一张简单的关系图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00030_beego_orm_db.png&quot; alt=&quot;beego_orm_db&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;maxopenconns-and-maxidleconns&quot;&gt;MaxOpenConns and MaxIdleConns&lt;/h2&gt;

&lt;p&gt;当我们注册一个 alias 的时候，除了 dsn，还会传递参数：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxOpenConns&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxIdleConns&lt;/code&gt;。这两个参数在 beego ORM 中并没有直接使用，而是为了传递给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.DB&lt;/code&gt; 对象。你可以看到 ORM 代码中调用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.DB&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetMaxIdleConns()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetMaxOpenConns()&lt;/code&gt; 两个方法。&lt;/p&gt;

&lt;p&gt;这两个参数最终会保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.DB&lt;/code&gt; 中：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connector&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;numOpen&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// number of opened and pending open connections&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;maxIdle&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;// zero means defaultMaxIdleConns; negative means 0&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;maxOpen&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;// &amp;lt;= 0 means unlimited&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这两个参数的作用是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxIdle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxIdleConns&lt;/code&gt;: 控制最大空闲连接数。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxOpen&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxOpenConns&lt;/code&gt;: 控制最大连接数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;数据库连接的创建和释放&quot;&gt;数据库连接的创建和释放&lt;/h3&gt;

&lt;p&gt;为了理解 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxIdleConns&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxOpenConns&lt;/code&gt;，我们先来看一下连接的创建和释放的过程。当我们调用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.DB.Query()&lt;/code&gt; 的时候，它会先调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DB.conn()&lt;/code&gt; 方法来获取一个连接：&lt;/p&gt;

&lt;h4 id=&quot;创建连接&quot;&gt;创建连接&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Query executes a query that returns rows, typically a SELECT.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// The args are for any placeholder parameters in the query.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connReuseStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryDC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;releaseConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DB.conn()&lt;/code&gt; 方法主要做了如下的事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果找不到 cache 的 conn，就会尝试建立一个新的 conn。&lt;/li&gt;
  &lt;li&gt;判断 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.numOpen&lt;/code&gt; 是否超过了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.maxOpen&lt;/code&gt;，如果超过了，就挂起等待有连接释放或者关闭。&lt;/li&gt;
  &lt;li&gt;否则，就创建一个新的 conn，然后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.numOpen++&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;创建连接的方式，主要是调用驱动的方法，不在本文的范围内讨论。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DB.conn()&lt;/code&gt; 方法如果成功，会返回一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*driverConn&lt;/code&gt; 对象，这个对象代表数据库连接。&lt;/p&gt;

&lt;h4 id=&quot;释放连接&quot;&gt;释放连接&lt;/h4&gt;

&lt;p&gt;当一个连接要被释放时，也就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*driverConn&lt;/code&gt; 对象要被释放时，这个对象的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releaseConn()&lt;/code&gt; 方法会被调用（上面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queryDC()&lt;/code&gt; 方法的第四个参数就是这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releaseConn()&lt;/code&gt; 方法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// driverConn wraps a driver.Conn with a mutex, to&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// be held during all calls into the Conn. (including any calls onto&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// interfaces returned via that Conn, such as calls on Tx, Stmt,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Result, Rows)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driverConn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// guards following&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conn&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;finalClosed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// ci.Close has been called&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;openStmt&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driverStmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;lastErr&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// lastError captures the result of the session resetter.&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// guarded by db.mu&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;inUse&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;onPut&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// code (with db.mu held) run when conn is next returned&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dbmuClosed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;// same as closed, but guarded by db.mu, for removeClosedStmtLocked&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driverConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releaseConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dc.db.putConn&lt;/code&gt; 方法如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// putConn adds a connection to the db's free pool.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// err is optionally the last error that occurred on this connection.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driverConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetSession&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inUse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debugGetPut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;putConn(%v) DUPLICATE was: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PREVIOUS was: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastPut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sql: connection returned that was never out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debugGetPut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastPut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onPut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onPut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrBadConn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// Don't reuse bad connections.&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// Since the conn is considered bad and is being discarded, treat it&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// as closed. Don't decrement the open count here, finalClose will&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// take care of that.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maybeOpenNewConnections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putConnHook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;putConnHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// Connections do not need to be reset if they will be closed.&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// Prevents writing to resetterCh after the DB has closed.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resetSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetSession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionResetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetSession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// Lock the driverConn here so it isn't released until&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// the connection is reset.&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// The lock must be taken before the connection is put into&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// the pool to prevent it from being taken out before it is reset.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;added&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putConnDBLocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;added&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetSession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetSession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// If the resetterCh is blocking then mark the connection&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// as bad and continue on.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastErr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrBadConn&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetterCh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里的重点是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;added := db.putConnDBLocked(dc, nil)&lt;/code&gt; 这行。如果这里返回的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;added == false&lt;/code&gt;，那么这个连接就会被关闭，否则就会保留。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Satisfy a connRequest or put the driverConn in the idle pool and return true&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// or return false.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// putConnDBLocked will satisfy a connRequest if there is one, or it will&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// return the *driverConn to the freeConn list if err == nil and the idle&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// connection limit will not be exceeded.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// If err != nil, the value of dc is ignored.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// If err == nil, then dc must not equal nil.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// If a connRequest was fulfilled or the *driverConn was placed in the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// freeConn list, then true is returned, otherwise false is returned.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putConnDBLocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driverConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxOpen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numOpen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxOpen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connRequest&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reqKey&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reqKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connRequests&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reqKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Remove from pending requests.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxIdleConnsLocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startCleanerLocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxIdleClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxIdleConnsLocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxIdle&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// TODO(bradfitz): ask driver, if supported, for its default preference&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultMaxIdleConns&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个方法要做几个事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.numOpen &amp;gt; db.maxOpen&lt;/code&gt;，那么说明打开的连接数已经超过上限，返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果有 goroutine 正在等待请求，那么就会将当前连接分配给那个 goroutine，返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果没有 goroutine 正在等待请求，就会判断空闲数量是否达到上限，如果还没有达到，那么就会将连接加入到空闲列表，返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;。否则，就会返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releaseConn()&lt;/code&gt; 什么时候会被调用？这个我们需要看两个地方的代码，首先是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.DB.queryDC()&lt;/code&gt; 方法的最后一部分：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryDC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driverConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releaseConn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// Note: ownership of ci passes to the *Rows, to be freed&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// with releaseConn.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;releaseConn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releaseConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rowsi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rowsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;closeStmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initContextClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个方法返回的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*sql.Rows&lt;/code&gt; 对象是查询的行对象，其中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releaseConn&lt;/code&gt; 对象就被赋值为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;driverConn.releaseConn()&lt;/code&gt;。接下来，再看下 ORM 里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadBatch()&lt;/code&gt; 方法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rows&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;refs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colsNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当我们从这个方法返回时，也就是我们调用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;querySet.All()&lt;/code&gt; 方法返回时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*sql.Rows.Close()&lt;/code&gt; 会被调用，其中会调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releaseConn()&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxIdle&lt;/code&gt; 表示允许的最大空闲连接，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt; 0&lt;/code&gt; 表示不允许空闲连接, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;== 0&lt;/code&gt; 表示允许两个空闲连接，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt; 0&lt;/code&gt; 表示允许指定的空闲连接。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxOpen&lt;/code&gt; 表示允许的最大连接数，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;= 0&lt;/code&gt; 表示不限制连接数。&lt;/li&gt;
  &lt;li&gt;在 beego ORM 的实现中，一次查询结束之后，就会释放掉连接。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，设置的接口中会保证 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxOpen &amp;gt;= maxIdle&lt;/code&gt;。&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2020/04/26/beego-ORM-and-Golang-sql-DB/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2020/04/26/beego-ORM-and-Golang-sql-DB/</guid>
        
        <category>database</category>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>推荐两篇写得很好的关于 Ansible 多行字符串处理的文章</title>
        <description>&lt;ol&gt;
  &lt;li&gt;Understanding multi line strings in YAML and Ansible (Part I - YAML): &lt;em&gt;&lt;a href=&quot;https://adminswerk.de/multi-line-string-yaml-ansible-I/&quot;&gt;https://adminswerk.de/multi-line-string-yaml-ansible-I/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Understanding multi line strings in YAML and Ansible (Part II - Ansible) &lt;em&gt;&lt;a href=&quot;https://adminswerk.de/multi-line-string-yaml-ansible-II/&quot;&gt;https://adminswerk.de/multi-line-string-yaml-ansible-II/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 22 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/11/22/Two-really-good-Ansible-articles-about-multiline-strings/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/11/22/Two-really-good-Ansible-articles-about-multiline-strings/</guid>
        
        <category>ansible</category>
        
        
      </item>
    
      <item>
        <title>如何使用 top 命令</title>
        <description>&lt;p&gt;&lt;strong&gt;top&lt;/strong&gt; 命令是 Linux 下最常用的系统监控命令。默认执行 top 命令之后，我们就能看到系统的许多监控指标，也可以看到进程按照 CPU 利用率从高到低排列。但是，这个只是 top 命令的最简单用法，其实 top 可以进行很多的定制。&lt;/p&gt;

&lt;h2 id=&quot;top-界面模式&quot;&gt;top 界面模式&lt;/h2&gt;

&lt;p&gt;top 的界面其实有两个模式：&lt;strong&gt;full-screen mode&lt;/strong&gt; 和 &lt;strong&gt;alternate-display mode&lt;/strong&gt;，根据实际的效果来看，这两个模式就是&lt;strong&gt;全屏模式&lt;/strong&gt;和&lt;strong&gt;多窗口模式&lt;/strong&gt;。不做任何定制的时候，我们看到的就是全屏模式。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00021_top_cmd_1.png&quot; alt=&quot;top_cmd_1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;full-screen-mode&quot;&gt;full-screen mode&lt;/h3&gt;

&lt;p&gt;全屏模式时，整个界面分为两个部分：&lt;strong&gt;summary area&lt;/strong&gt; 和 &lt;strong&gt;tasks area&lt;/strong&gt;，如上图所示。&lt;/p&gt;

&lt;h3 id=&quot;alternate-display-mode&quot;&gt;alternate-display mode&lt;/h3&gt;

&lt;p&gt;多窗口模式的界面如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00022_top_cmd_2.png&quot; alt=&quot;top_cmd_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;要进入多窗口模式，在全屏模式下，按 &lt;strong&gt;A&lt;/strong&gt; 即可（这个可以在两个模式间来回切换）。多窗口模式有一个 summary area 和 4 个 window，4 个窗口从上到下编号，对应 1 到 4。summary area 默认为 window 1 的 summary area，可以切换为不同 window 的 summary area，这个可以从 summary area 左上角的提示看出来。这个提示区会展示 summary area 当前对应的 window 的编号和名字，比如 &lt;strong&gt;1:Def&lt;/strong&gt;。要切换 summary area 对应不同的 window，可以按 &lt;strong&gt;a&lt;/strong&gt; （从上到下） 或者 &lt;strong&gt;w&lt;/strong&gt; （从下到上）。&lt;/p&gt;

&lt;p&gt;top 默认定义了 4 个 window，这里先给出名字和编号，其他的下文再详述：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Def&lt;/li&gt;
  &lt;li&gt;Job&lt;/li&gt;
  &lt;li&gt;Mem&lt;/li&gt;
  &lt;li&gt;Usr&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;field-group&quot;&gt;Field Group&lt;/h4&gt;

&lt;p&gt;top 其实有两个概念是混合使用的，就是 window 和 Field Group，你可以认为他们就是等价的，本文除了这一小节，后面都使用 window 这个术语。。上面提到了，top 默认定义了 4 个 window，每个 window 配置要显示的列，就称为这个 window 的 &lt;strong&gt;Field Group&lt;/strong&gt;。在全屏模式下，可以通过快捷键 &lt;strong&gt;g&lt;/strong&gt; 切换当前要显示的 Field Group 是哪个，使用序号 1 到 4 到进行选择。修改当前展示的 Field Group 不仅是修改了要显示的内容，&lt;strong&gt;样式也会使用 window 的配置，包括过滤器和颜色配置等&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在多窗口模式下，快捷键 &lt;strong&gt;g&lt;/strong&gt; 就对应到切换 window，效果和 &lt;strong&gt;a&lt;/strong&gt; &lt;strong&gt;w&lt;/strong&gt; 是一样的。在多窗口模式下，快捷键 &lt;strong&gt;G&lt;/strong&gt; 用来修改 window 的名字。&lt;/p&gt;

&lt;h3 id=&quot;界面的滚动和定位&quot;&gt;界面的滚动和定位&lt;/h3&gt;

&lt;p&gt;在任何一个 window 下，或者全屏模式下，top 都支持如下快捷键来进行界面的滚动：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Up&lt;/strong&gt; or &lt;strong&gt;alt+k&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Down&lt;/strong&gt; or &lt;strong&gt;alt+j&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Left&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Right&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PgUp&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PgDown&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Home&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;End&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面这些和大多数应用是一样的，就不展开说了。这里要说的是，top 支持显示一个定位信息，你可以看到自己现在处于第几行，第几个字段，通过快捷键 &lt;strong&gt;C&lt;/strong&gt; 切换：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00026_top_cmd_6.png&quot; alt=&quot;top_cmd_6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个定位信息，也很容易看，&lt;em&gt;y&lt;/em&gt; 表示当前的第一行是第几个 task 以及一共有几个 task；&lt;em&gt;x&lt;/em&gt; 表示当前的第一列是第几列，以及一共有多少列。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scroll coordinates: y = 1/145 (tasks), x = 1/12 (fields)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary-area&quot;&gt;Summary Area&lt;/h2&gt;

&lt;p&gt;Summary area 展示了系统的全局监控信息，如下所示。整个区域从上到下分为 3 个部分： &lt;strong&gt;load average&lt;/strong&gt;, &lt;strong&gt;tasks and cpu&lt;/strong&gt;, &lt;strong&gt;memory&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
top - 14:24:54 up 26 days, 22:13,  1 user,  load average: 0.08, 0.05, 0.05        # load average
Tasks: 145 total,   1 running, 144 sleeping,   0 stopped,   0 zombie              # tasks and cpu
%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st   # tasks and cpu
KiB Mem : 12138004 total,  2857072 free,   548312 used,  8732620 buff/cache       # memory
KiB Swap:        0 total,        0 free,        0 used.  7757480 avail Mem        # memory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;load-average&quot;&gt;Load average&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Load average&lt;/em&gt; 部分主要展示系统的负载。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#     Now      Uptime              User     Load average
#                                  count                  1m    5m    15m
top - 14:24:54 up 26 days, 22:13,  1 user,  load average: 0.08, 0.05, 0.05
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如下快捷键可以用来控制这个区域：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;(lower case L): 切换是否显示。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tasks-and-cpu&quot;&gt;Tasks and CPU&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Tasks&lt;/em&gt; 部分主要展示系统的进程数或者线程数（根据 threads-mode 来决定）。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#      Total        State      State           State        State
#      tasks or     running    sleeping        stopped      zombie
#      threads
Tasks: 145 total,   1 running, 144 sleeping,   0 stopped,   0 zombie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;CPU&lt;/em&gt; 的部分主要是展示不同状态的任务的 CPU 消耗占比：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体的缩写含义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;us&lt;/strong&gt;: user, time running un-niced user processes, 普通进程的 CPU 消耗占比。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sy&lt;/strong&gt;: system, time running kernel processes, 内核任务的 CPU 消耗占比。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ni&lt;/strong&gt;: nice, time running niced user processes, 高优先级进程的 CPU 消耗占比。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: idle, time spent in the kernel idle handler, 空闲时间占比。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;wa&lt;/strong&gt;: IO-wait, time waiting for I/O completion, 等待 IO 完成的 CPU 消耗占比（进程处于 D 状态）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;hi&lt;/strong&gt;: time spent servicing hardware interrupts, 用于处理硬中断的 CPU 消耗占比。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;si&lt;/strong&gt;: time spent servicing software interrupts, 用于处理软中断的 CPU 消耗占比。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;st&lt;/strong&gt;: time stolen from this vm by the hypervisor, 虚拟机管理进程从这个虚拟机偷走的 CPU 资源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下快捷键可以用来控制这个区域：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;t&lt;/strong&gt;: 切换 CPU 部分的展示方式，例如数值还是进度条，也可以切换到关闭这个区域。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1&lt;/strong&gt;(digit one): 切换单个 CPU 和总体 CPU 的显示。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2&lt;/strong&gt;: 按照 NUMA Node 展示。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;3&lt;/strong&gt;: 展示指定 NUMA Node 下的所有 CPU。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;H&lt;/strong&gt;: 显示线程显示，默认是进程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;memory&quot;&gt;Memory&lt;/h3&gt;

&lt;p&gt;*Memory** 的部分展示了系统的内存信息和交换分区的信息。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
KiB Mem : 12138004 total,  2857072 free,   548312 used,  8732620 buff/cache
KiB Swap:        0 total,        0 free,        0 used.  7757480 avail Mem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;total&lt;/strong&gt;: 总内存大小。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;free&lt;/strong&gt;: 空闲内存大小。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;used&lt;/strong&gt;: 已使用内存大小。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;buff/cache&lt;/strong&gt;: block buffer + page cache 所占用的内存大小。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;avail Mem&lt;/strong&gt;: 这个值是系统的估算值，表示可用于启动新程序的物理内存大小（不包括 swap 空间）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下快捷键可以用来控制这个区域：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;m&lt;/strong&gt;: 切换 memory 部分的展示方式，例如数值还是进度条，也可以切换到关闭这个区域。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;: 切换内存单位。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tasks-area&quot;&gt;Tasks Area&lt;/h2&gt;

&lt;p&gt;Tasks area 包含两个部分：字段名称和任务列表（根据指定的字段排序）。这里我们先介绍全屏模式下 tasks area，多窗口模式的 tasks area 后面介绍。。对于 tasks area，最主要考虑的是如下几个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;要显示哪些字段？要根据哪个字段排序？升序还是降序？&lt;/li&gt;
  &lt;li&gt;是否只展示符合某些条件的任务？&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;要展示哪些字段要根据哪个字段排序&quot;&gt;要展示哪些字段？要根据哪个字段排序？&lt;/h3&gt;

&lt;p&gt;top 其实可以展示很多内容，我们可以定义要展示哪些字段。在全屏模式下，按 &lt;strong&gt;F&lt;/strong&gt; 进入字段管理界面，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00023_top_cmd_3.png&quot; alt=&quot;top_cmd_3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先要注意的是第一行，这个界面可以为 4 个 window 分别设置要展示的字段，最上面一行提示当前正在为哪个 window 设置字段，以及当前使用的排序字段是哪个。同样的，可以通过可以按 &lt;strong&gt;a&lt;/strong&gt; 或者 &lt;strong&gt;w&lt;/strong&gt; 来切换 window。然后可以上下移动到想要处理的字段，按空格或者 &lt;strong&gt;d&lt;/strong&gt; 切换是否展示，按 &lt;strong&gt;s&lt;/strong&gt; 设置用该字段进行排序，按 &lt;strong&gt;q&lt;/strong&gt; 或者 ESC 退出这个界面。前面型号的表示选中。要调整字段的排列顺序，先选中一个字段，按右键表示开始移动，然后上下移动，然后按左键表示移动结束。&lt;/p&gt;

&lt;p&gt;下面来看下可用的字段。&lt;/p&gt;

&lt;h4 id=&quot;进程身份相关&quot;&gt;进程身份相关&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;COMMAND&lt;/strong&gt;:  Command Name/Line&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PID&lt;/strong&gt;:  Process Id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ENVIRON&lt;/strong&gt;:  Environment vars&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;USER&lt;/strong&gt;:  Effective User Name&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PPID&lt;/strong&gt;:  Parent Process pid&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UID&lt;/strong&gt;:  Effective User Id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RUID&lt;/strong&gt;:  Real User Id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RUSER&lt;/strong&gt;:  Real User Name&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SUID&lt;/strong&gt;:  Saved User Id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SUSER&lt;/strong&gt;:  Saved User Name&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GID&lt;/strong&gt;:  Group Id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GROUP&lt;/strong&gt;:  Group Name&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PGRP&lt;/strong&gt;:  Process Group Id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TTY&lt;/strong&gt;:  Controlling Tty&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TPGID&lt;/strong&gt;:  Tty Process Grp Id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SID&lt;/strong&gt;:  Session Id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SUPGIDS&lt;/strong&gt;:  Supp Groups IDs&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SUPGRPS&lt;/strong&gt;:  Supp Groups Names&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TGID&lt;/strong&gt;:  Thread Group Id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下快捷键可以用来控制这些字段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;c&lt;/strong&gt;: 用于切换 COMMAND 列的内容是 command line 还是 program name。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;进程状态相关&quot;&gt;进程状态相关&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;:  Process Status&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;%CPU&lt;/strong&gt;:  CPU Usage&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nTH&lt;/strong&gt;:  Number of Threads&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;:  Last Used Cpu (SMP)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TIME&lt;/strong&gt;:  CPU Time。任务从启动到现在使用的 CPU 时间。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TIME+&lt;/strong&gt;:  CPU Time, hundredths。任务从启动到现在使用的 CPU 时间，精确到百分之一秒。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WCHAN&lt;/strong&gt;:  Sleeping in Function。对于 sleeping 的进程，当前所处的内核函数。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flags&lt;/strong&gt;:  Task Flags &lt;sched.h&gt;&lt;/sched.h&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进程状态有如下几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; Uninterruptible sleep。不可中断休眠，就是等待 I/O 完成时的状态，会导致 CPU 统计的 wa 上升。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;R&lt;/strong&gt; Running&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; Sleeping&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt; Stopped by job control signal&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;t&lt;/strong&gt; Stopped by debugger during trace&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Z&lt;/strong&gt; zombie&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下快捷键可以用来控制这些字段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; (upper case i): 切换 %CPU 的模式，Irix/Solaris 两个模式。Irix mode 的计算方式是跑满一个 CPU 为 100%，%CPU 可能会超过 100%。Solaris mode 则是会把总体利用率除以 CPU 核数，保证不会超过 100%。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;: Cumulative time，off 展示两次刷新时间的即时值，而不是从进程启动到现在的累加值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;进程优先级相关&quot;&gt;进程优先级相关&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NI&lt;/strong&gt;:  Nice Value. 进程的优先级。这个是表示进程的用户态优先级，范围是 -20 到 +19，默认值是 0，值越低优先级越高。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PR&lt;/strong&gt;:  Priority. 进程的调度优先级，这个是内核实际使用的任务的优先级，范围是 0 到 39，映射到内核的值是 100 到 139；也可以是 rt ，表示实时任务。内核表示一个 task 的优先级的范围是 0 到 139。其中，0 到 99 是实时进程的优先级，100 到 139 是非实时进程的优先级。PR 的默认值是 20，对应到内核是 120，和 NI 的关系是: PR = 20 + NI。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;内存相关&quot;&gt;内存相关&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;%MEM&lt;/strong&gt;:  Memory Usage (RES)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VIRT&lt;/strong&gt;:  Virtual Image (KiB)。表示一个任务使用的虚拟内存总和，包括所有的代码段、数据段、链接的共享库、已经被 swap 的页和已经被映射但是没有使用的页。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RES&lt;/strong&gt;:  Resident Size (KiB)。表示一个任务使用的没有被 swap 的物理内存。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SHR&lt;/strong&gt;:  Shared Memory (KiB)。表示一个任务可能和其他任务共享的内存。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SWAP&lt;/strong&gt;:  Swapped Size (KiB)。表示一个任务的非驻留内存，也就是使用的交换空间。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CODE&lt;/strong&gt;:  Code Size (KiB)。表示任务的代码段的大小。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DATA&lt;/strong&gt;:  Data+Stack (KiB)。Data Resident Set size，包括了程序数据段和栈。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;USED&lt;/strong&gt;:  Res+Swap Size (KiB)。就是 RES + SWAP。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nDRT&lt;/strong&gt;:  Dirty Pages Count。该 task 内存空间中的脏页的数量。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nMaj&lt;/strong&gt;:  Major Page Faults。该 task 遇到的 Major Page Faults 的数量。Major Page Fault 是指需要访问通过访问 swap 分区或者硬盘（mmap 一个文件，但是还没把内容读取到内存时）来处理的缺页异常。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nMin&lt;/strong&gt;:  Minor Page Faults。该 task 遇到的 Minor Page Faults 的数量。Minor Page Fault 是指不需要通过访问 swap 分区或者硬盘来处理的缺页异常，简单的说，没用到磁盘 I/O。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;vMj&lt;/strong&gt;:  Major Faults delta。上次 top 刷新数据依赖的 Major Page Faults 增加数量。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;vMn&lt;/strong&gt;:  Minor Faults delta。上次 top 刷新数据依赖的 Minor Page Faults 增加数量。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下快捷键可以用来控制这些字段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;: 切换内存单位。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cgroup-相关&quot;&gt;CGroup 相关&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CGROUPS&lt;/strong&gt;:  Control Groups&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nsIPC&lt;/strong&gt;:  IPC namespace Inode&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nsMNT&lt;/strong&gt;:  MNT namespace Inode&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nsNET&lt;/strong&gt;:  NET namespace Inode&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nsPID&lt;/strong&gt;:  PID namespace Inode&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nsUSER&lt;/strong&gt;:  USER namespace Inode&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nsUTS&lt;/strong&gt;:  UTS namespace Inode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;是否只展示符合某些条件的任务&quot;&gt;是否只展示符合某些条件的任务？&lt;/h3&gt;

&lt;p&gt;这个问题，也就是如何过滤，只展示某些任务。也许你用过 &lt;strong&gt;htop&lt;/strong&gt;，知道 htop 可以和方便的根据名称来过滤。top 其实也可以，而且可以根据很多字段来过滤。&lt;/p&gt;

&lt;h4 id=&quot;只展示非空闲的任务&quot;&gt;只展示非空闲的任务&lt;/h4&gt;

&lt;p&gt;快捷键 &lt;strong&gt;i&lt;/strong&gt; 用来切换是否只展示非空闲任务。&lt;/p&gt;

&lt;h4 id=&quot;限制展示任务的数量&quot;&gt;限制展示任务的数量&lt;/h4&gt;

&lt;p&gt;快捷键 &lt;strong&gt;n&lt;/strong&gt; 用于限制要展示的任务的数量，0 表示无限制。默认是全部展示（超过一页需要翻页）。&lt;/p&gt;

&lt;h4 id=&quot;只展示指定用户的任务&quot;&gt;只展示指定用户的任务&lt;/h4&gt;

&lt;p&gt;快捷键 &lt;strong&gt;u&lt;/strong&gt; 表示要过滤的用户，可以加 &lt;strong&gt;!&lt;/strong&gt; 前缀表示反向条件。可以输入 UID 或者 username，直接回车表示取消这个过滤条件。&lt;/p&gt;

&lt;h4 id=&quot;根据其他条件过滤&quot;&gt;根据其他条件过滤&lt;/h4&gt;

&lt;p&gt;top 提供了 &lt;strong&gt;Other Filter&lt;/strong&gt; 的功能，通过快捷键 &lt;strong&gt;o&lt;/strong&gt; (大小写不敏感) 或者 &lt;strong&gt;O&lt;/strong&gt; (大小写敏感) 来启用。过滤条件的格式如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{!}Field-Name?include-if-value
              exclude-if-value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;!&lt;/strong&gt; 表示非，不是必选字段，其他都是必填字段。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Field-Name&lt;/strong&gt; 表示字段名字，前文已经列出。注意，这里是大小写敏感的，要完全一致。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;?&lt;/strong&gt; 代表一个要求的分隔符和操作符(=, &amp;lt;, &amp;gt;):
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; 或者 &lt;strong&gt;&amp;gt;&lt;/strong&gt; 表示字符串比较，或者数值比较。注意比较时的数字的单位问题，100.0m 会比 1.0g 大，所以需要先进行单位切换（例如内存的单位切换，e）&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;=&lt;/strong&gt; 表示部分匹配&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以使用多个条件进行过滤，每个按一次 o 或者 O 输入一个条件，所有条件会进行与操作。可以按 &lt;strong&gt;Ctrl-o&lt;/strong&gt; 显示所有条件。&lt;/p&gt;

&lt;p&gt;还有两个清理操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;=&lt;/strong&gt;  reset filtering in current window&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt;  reset filtering in all windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举些例子：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;过滤 nice 值小于 0 的任务，即以减号开头的 nice 值：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NI=-&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;过滤所有 postgres 进程：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMMAND=postgres&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;搜索&quot;&gt;搜索&lt;/h4&gt;

&lt;p&gt;搜索和过滤不一样，搜索不考虑字段，会在 tasks area 显示的所有内容中找到指定的行。快捷键 &lt;strong&gt;L&lt;/strong&gt; 用于输入要搜索的关键字，&lt;strong&gt;&amp;amp;&lt;/strong&gt; 表示跳转到下一个匹配项。搜索关键字会被高亮，除了使用 &lt;strong&gt;&amp;amp;&lt;/strong&gt; 以外，你也需要使用 PgUp 和 PgDown 等来调整展示的内容。&lt;/p&gt;

&lt;h3 id=&quot;其他定制&quot;&gt;其他定制&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;R&lt;/strong&gt; 切换排序的方向，默认是从高到底，可以切换为从低到高。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;x&lt;/strong&gt; 切换是否高亮显示排序列。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;y&lt;/strong&gt; 切换是否高亮显示 running 的 task。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;b&lt;/strong&gt; bold/reverse，这个快捷键用于切换关键位置是粗体展示还是反色展示，会影响到 x, y 的展示效果，也会影响到 summary area 的 CPU 进度条 和 memory 进度条的展示效果。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;d&lt;/strong&gt; 定时刷新间隔，默认是 3s。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;V&lt;/strong&gt; 切换成森林视图，也就是展示进程父子关系。这个模式下无法按照字段排序。效果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00024_top_cmd_4.png&quot; alt=&quot;top_cmd_4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有时候不想看层级太深的任务，可以使用 other filter。除了第二级是一个空格，往下的每一级都是每级三个空格，最后再加上一个反引号开头。所以要过滤掉第三级以下的，可以使用如下条件（COMMAND=后面跟7个空格）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!COMMAND=       `
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;界面颜色&quot;&gt;界面颜色&lt;/h2&gt;

&lt;p&gt;为了更清晰的进行监控，定制颜色也是很有用的。可以按快捷键 &lt;strong&gt;Z&lt;/strong&gt; 进入颜色定制界面，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00025_top_cmd_5.png&quot; alt=&quot;top_cmd_5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先可以看到上半部表示了当前正在设置哪个窗口，然后下半部有 1 2 3 三个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;选择要定制的区域：
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;: Summary Data&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;: Messages/Prompts&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;H&lt;/strong&gt;: Column Heads&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;: Task Information&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;给选定的区域选择一个颜色，用数字 0 到 7 对应 8 个颜色。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;q&lt;/strong&gt; 取消颜色设置，&lt;strong&gt;a&lt;/strong&gt; 或者 &lt;strong&gt;g&lt;/strong&gt; 提交颜色设置并且切换到下个窗口进行设置，回车提交颜色设置并且退出这个界面。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在 top 界面上，可以通过快捷键 &lt;strong&gt;z&lt;/strong&gt; 来切换是否使用颜色。&lt;/p&gt;

&lt;h2 id=&quot;配置文件&quot;&gt;配置文件&lt;/h2&gt;

&lt;p&gt;上面讲的这些定制，都可以保存到一个配置文件，然后 top 每次启动都会载入它所找到的配置文件。配置文件中会保存一些全局模式，比如 Irix mode 的配置，刷新时间等，也会保存每个窗口的字段配置和颜色配置等，还会保存 inspect entries （见下文）。&lt;/p&gt;

&lt;p&gt;生成配置文件的方式很简单，在你完成想要的定制后，按快捷键 &lt;strong&gt;W&lt;/strong&gt; 即可。CentOS 7 上，配置文件的保存路径是 &lt;em&gt;/root/.toprc&lt;/em&gt;；Ubuntu 上则是 &lt;em&gt;~/.config/procps/toprc&lt;/em&gt;，每次你保存的时候，top 会显示这个路径。&lt;/p&gt;

&lt;h2 id=&quot;inspect-mode&quot;&gt;Inspect Mode&lt;/h2&gt;

&lt;p&gt;top 有一个模式，可以允许你执行指定的命令来查看一个任务的更多信息，这个模式可以称为 &lt;strong&gt;Inspect Mode&lt;/strong&gt;，通过快捷键 &lt;strong&gt;Y&lt;/strong&gt; 可以进入这个模式，top 会提示你输入一个要 inspect 的 PID。不过，要使用这个模式，你需要先定义可以使用的 inspect entries，否则 top 不会进入这个模式。下面是一个最简单的配置，可以先体会下这个配置是如何写的：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
[root@user ~]# cat .toprc
top's Config File (Linux processes with windows)
Id:i, Mode_altscr=0, Mode_irixps=1, Delay_time=3.0, Curwin=0
Def     fieldscur=ķ&amp;amp;')*+,-./012568&amp;lt;&amp;gt;?ABCFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghij
        winflags=195892, sortindx=18, maxtasks=0, graph_cpus=0, graph_mems=0
        summclr=5, msgsclr=1, headclr=3, taskclr=4
Job     fieldscur=(Ļ@&amp;lt;)*+,-./012568&amp;gt;?ABCFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghij
        winflags=193844, sortindx=0, maxtasks=0, graph_cpus=0, graph_mems=0
        summclr=6, msgsclr=6, headclr=7, taskclr=6
Mem     fieldscur=&amp;lt;MBND34&amp;amp;'()*+,-./0125689FGHIJKLOPQRSTUVWXYZ[\]^_`abcdefghij
        winflags=193844, sortindx=21, maxtasks=0, graph_cpus=0, graph_mems=0
        summclr=5, msgsclr=5, headclr=4, taskclr=5
Usr     fieldscur=)+,-./1234568;&amp;lt;=&amp;gt;?@ABCFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghij
        winflags=193844, sortindx=3, maxtasks=0, graph_cpus=0, graph_mems=0
        summclr=3, msgsclr=3, headclr=2, taskclr=3
Fixed_widest=0, Summ_mscale=0, Task_mscale=0, Zero_suppress=0

pipe    Open Files      lsof -P -p %d 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的最后一行就是就是一个 inspect entry，表示获取进程打开的文件列表。使用这个配置文件后，打开 top，按 &lt;strong&gt;Y&lt;/strong&gt; 进入 inspect 模式，效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00027_top_cmd_7.png&quot; alt=&quot;top_cmd_7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这个界面，可以左右选择你自定义的 entry，然后回车就可以执行。比如上面这个 &lt;em&gt;Open Files&lt;/em&gt; 执行后的效果如下，和直接使用 &lt;em&gt;lsof&lt;/em&gt; 命令的效果一样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00028_top_cmd_8.png&quot; alt=&quot;top_cmd_8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在上面这个界面，可以使用 PgUp, PgDown, Home, End 等进行滚动，也可以使用 &lt;em&gt;less&lt;/em&gt; 命令的语法（ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 表示搜索）。&lt;/p&gt;

&lt;p&gt;下面来看 entry 的定制语法。&lt;/p&gt;

&lt;p&gt;首先，&lt;strong&gt;#&lt;/strong&gt; 开头的行是被注释掉的。&lt;/p&gt;

&lt;p&gt;一行 inspect entry 包含三个部分： &lt;strong&gt;type&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;fmts&lt;/strong&gt;，每个部分之间使用制表符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\t&lt;/code&gt; 分隔。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: 可以是 &lt;em&gt;file&lt;/em&gt; 或者 &lt;em&gt;pipe&lt;/em&gt;。&lt;em&gt;file&lt;/em&gt; 就是打开一个文件，读它的内容。&lt;em&gt;pipe&lt;/em&gt; 就是用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;popen&lt;/code&gt; 接口执行命令，然后获取输出。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: 名字，比如你上面看到的 &lt;em&gt;Open Files&lt;/em&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;fmts&lt;/strong&gt;：一个文件路径，或者一行命令。这个部分可以使用变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%d&lt;/code&gt; 表示 PID，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/%d/numa_maps&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsof -P -p %d 2&amp;gt;&amp;amp;1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;我的定制&quot;&gt;我的定制&lt;/h2&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://diabloneo.github.io//assets/imgs/00029_top_cmd_9.png&quot; alt=&quot;top_cmd_9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我在 CentOS 7 下的定制文件如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;top's Config File (Linux processes with windows)
Id:i, Mode_altscr=0, Mode_irixps=1, Delay_time=3.0, Curwin=0
Cpu     fieldscur=ķ9')*+,-./0126&amp;lt;&amp;gt;?ABCFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghij
        winflags=195380, sortindx=18, maxtasks=0, graph_cpus=0, graph_mems=0
        summclr=4, msgsclr=1, headclr=3, taskclr=4
Mem     fieldscur=&amp;amp;97(34D')*+,-./012568&amp;gt;?FGHIJKLOPQRSTUVWXYZ[\]^_`abcdefghij
        winflags=195380, sortindx=21, maxtasks=0, graph_cpus=0, graph_mems=0
        summclr=6, msgsclr=6, headclr=3, taskclr=6
Sch     fieldscur=:;&amp;lt;=&amp;gt;?@AMBNC&amp;amp;'()*+,-./0128HIJKLOPQRSTUVWXYZ[\]^_`abcdefghij
        winflags=194868, sortindx=0, maxtasks=0, graph_cpus=0, graph_mems=0
        summclr=5, msgsclr=5, headclr=3, taskclr=5
Cgp     fieldscur=*097:D)+,-./1234568;&amp;lt;=&amp;gt;?@ABCFGIJKLMNOVWXYZ[\]^_`abcdefghij
        winflags=194868, sortindx=0, maxtasks=0, graph_cpus=0, graph_mems=0
        summclr=2, msgsclr=3, headclr=3, taskclr=2
Fixed_widest=0, Summ_mscale=0, Task_mscale=0, Zero_suppress=0

pipe    NetFiles        lsof -a -l -n -P -i4 -p %d 2&amp;gt;&amp;amp;1
pipe    OpenFiles       lsof -a -l -n -P -p %d 2&amp;gt;&amp;amp;1
file    NUMAInfo        /proc/%d/numa_maps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要是定制了 4 个 window 的字段和颜色，还有 3 个 inspect entries：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CPU (sort by %CPU): PID, PPID, USER, PR, NI, VIRT, RES, SHR, S, %CPU, %MEM, TIME+, COMMAND&lt;/li&gt;
  &lt;li&gt;Mem (sort by %MEM): PID, VIRT, RES, SHR, SWAP, nDRT, nMaj, nMin, vMj, vMn, %MEM, COMMAND&lt;/li&gt;
  &lt;li&gt;Sche (sort by PID): PID, nTH, PR, NI, Flags,  S, P, %CPU, TIME+, COMMAND, WCHAN&lt;/li&gt;
  &lt;li&gt;CGROUP (sort by PID): PID, PPID,UID, USER, CGROUPS, nsIPC, nsMNT, nsNET, nsPID, nsUSER, nsUTS, COMMAND&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果要直接使用的话，用 base64 解码下面的内容，直接从网页上拷贝会有字符问题：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dG9wJ3MgQ29uZmlnIEZpbGUgKExpbnV4IHByb2Nlc3NlcyB3aXRoIHdpbmRvd3MpCklkOmksIE1v
ZGVfYWx0c2NyPTAsIE1vZGVfaXJpeHBzPTEsIERlbGF5X3RpbWU9My4wLCBDdXJ3aW49MApDcHUJ
ZmllbGRzY3VyPaWmqLWztLu9wMS3urg5xScpKissLS4vMDEyNjw+P0FCQ0ZHSElKS0xNTk9QUVJT
VFVWV1hZWltcXV5fYGFiY2RlZmdoaWoKCXdpbmZsYWdzPTE5NTM4MCwgc29ydGluZHg9MTgsIG1h
eHRhc2tzPTAsIGdyYXBoX2NwdXM9MCwgZ3JhcGhfbWVtcz0wCglzdW1tY2xyPTQsIG1zZ3NjbHI9
MSwgaGVhZGNscj0zLCB0YXNrY2xyPTQKTWVtCWZpZWxkc2N1cj2lu73AvMPBws3OJjk3uigzNEQn
xSkqKywtLi8wMTI1Njg+P0ZHSElKS0xPUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqCgl3aW5m
bGFncz0xOTUzODAsIHNvcnRpbmR4PTIxLCBtYXh0YXNrcz0wLCBncmFwaF9jcHVzPTAsIGdyYXBo
X21lbXM9MAoJc3VtbWNscj02LCBtc2dzY2xyPTYsIGhlYWRjbHI9MywgdGFza2Nscj02ClNjaAlm
aWVsZHNjdXI9pTo7PD0+P0BBTUJOQ7WztMfEtre5xcYmJygpKissLS4vMDEyOEhJSktMT1BRUlNU
VVZXWFlaW1xdXl9gYWJjZGVmZ2hpagoJd2luZmxhZ3M9MTk0ODY4LCBzb3J0aW5keD0wLCBtYXh0
YXNrcz0wLCBncmFwaF9jcHVzPTAsIGdyYXBoX21lbXM9MAoJc3VtbWNscj01LCBtc2dzY2xyPTUs
IGhlYWRjbHI9MywgdGFza2Nscj01CkNncAlmaWVsZHNjdXI9paanqCowOTc6RCkrLC0uLzEyMzQ1
Njg7PD0+P0BBQkNGR8hJSktMTU5P0NHS09TVxVZXWFlaW1xdXl9gYWJjZGVmZ2hpagoJd2luZmxh
Z3M9MTk0ODY4LCBzb3J0aW5keD0wLCBtYXh0YXNrcz0wLCBncmFwaF9jcHVzPTAsIGdyYXBoX21l
bXM9MAoJc3VtbWNscj0yLCBtc2dzY2xyPTMsIGhlYWRjbHI9MywgdGFza2Nscj0yCkZpeGVkX3dp
ZGVzdD0wLCBTdW1tX21zY2FsZT0wLCBUYXNrX21zY2FsZT0wLCBaZXJvX3N1cHByZXNzPTAKCnBp
cGUJTmV0RmlsZXMJbHNvZiAtYSAtbCAtbiAtUCAtaTQgLXAgJWQgMj4mMQpwaXBlCU9wZW5GaWxl
cwlsc29mIC1hIC1sIC1uIC1QIC1wICVkIDI+JjEKZmlsZQlOVU1BSW5mbwkvcHJvYy8lZC9udW1h
X21hcHMK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 29 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/08/29/How-to-use-top-command/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/08/29/How-to-use-top-command/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>在 VIM 中配置 fzf 使用 find</title>
        <description>&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;https://github.com/junegunn/fzf&lt;/a&gt;&lt;/em&gt; 是 VIM 常用的文件查找工具。fzf 可以使用 find 或者 &lt;em&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;https://github.com/sharkdp/fd&lt;/a&gt;&lt;/em&gt; 作为查找工具，官方的文档里给了很多 fd 的配置，但是 find 的较少。这里提供了一个使用 find 的配置，可以根据自己需要修改：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; $FZF_DEFAULT_COMMAND&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&quot;&lt;span class=&quot;k&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;regextype egrep
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt;    \\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;/vendor &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;prune \\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             ;; ignore some dirs
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt; \\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;/_site &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;prune \\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt; \\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;/_output &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;prune \\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt; \\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;prune \\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt; \\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;svn &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;prune \\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt; \\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;tox &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;prune \\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt; \\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;f&lt;/span&gt; 
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; \\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;not &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;regex &lt;span class=&quot;s1&quot;&gt;'.*\.(pyc|pyo)$'&lt;/span&gt; \\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   ;; ignore some &lt;span class=&quot;k&quot;&gt;files&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt;    \\&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;			\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Mon, 26 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/08/26/Using-fzf-with-find/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/08/26/Using-fzf-with-find/</guid>
        
        <category>vim</category>
        
        
      </item>
    
      <item>
        <title>使用 Python mock call 表示一个类示例</title>
        <description>&lt;p&gt;&lt;em&gt;以下内容对于 Python 2 或者 Python 3 均适用。术语 &lt;strong&gt;mock 对象&lt;/strong&gt; 表示用于替换代码中实际对象的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.Mock&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.MagicMock&lt;/code&gt; 对象&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mock&lt;/strong&gt; 库是 Python 中用来进行单元测试模拟的一个库。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.call&lt;/code&gt; 是 mock 库中用来表示 mock 对象调用的一个辅助对象，通常我们使用一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.call&lt;/code&gt; 对象或者一个含有多个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.call&lt;/code&gt; 对象的列表来表示我们期望发生在 mock 对象上的调用，这样不仅可以判断一个 mock 对象是否执行了期望的调用，还确认这些调用是按照期望的顺序执行的。在测试代码中，我们会将所期望的调用和 mock 对象的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call_args&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call_args_list&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock_calls&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method_calls&lt;/code&gt; 这些记录内容做比较。&lt;/p&gt;

&lt;p&gt;有一点需要注意，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.call&lt;/code&gt; 本身就是一个 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock._Call&lt;/code&gt; 类的实例&lt;/strong&gt;，所以它本身，即不加调用符号 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.call()&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.call(*args, **kwargs)&lt;/code&gt;) 时，表示的是 &lt;strong&gt;mock 对象本身&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;下面来看个个例子。假设 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.util.SSH&lt;/code&gt; 是我们封装的一个用于管理 SSH 连接，并且提供某些命令封装的类。现在 SSH 提供了两个实例方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hostname()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;restart_service(service)&lt;/code&gt;。我们一般会这么 mock 它：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app.util.SSH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mocked_conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mocked_conn&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# test logics
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# do assert with mocked_conn object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样，我们就可以让代码中对一个 SSH 实例的调用，转换成对我们的 mock 对象 mocked_conn 的调用。这样，代码中对 mock 对象的使用和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.call&lt;/code&gt; 的对应关系如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# conn == mock.call
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# mock.call.hostname()
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restart_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# mock.call.restart_service(service1)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restart_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# mock.call.restart_service(service2)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mocked_conn.mock_calls&lt;/code&gt; 的内容就是&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restart_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restart_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;要进行 assert 时，你需要提供上面这个 call list。&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/08/20/use-python-mock-call-to-represent-a-class-instance/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/08/20/use-python-mock-call-to-represent-a-class-instance/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>smartctl 设置硬盘的 write-caching</title>
        <description>&lt;p&gt;在 &lt;a href=&quot;http://diabloneo.github.io//2019/06/16/hdparm-and-sdparm&quot;&gt;hdparm and sdparm&lt;/a&gt; 中，提到了 SATA 盘和 SAS 盘可以分别通过 &lt;em&gt;hdparm&lt;/em&gt; 和 &lt;em&gt;sdparm&lt;/em&gt; 来设置它的 &lt;strong&gt;write-caching&lt;/strong&gt; 属性。&lt;/p&gt;

&lt;p&gt;但是在有的情况下，系统上没有安装这两个工具，还可以考虑使用 &lt;strong&gt;smartctl&lt;/strong&gt; 工具来设置。smartctl 的 &lt;strong&gt;–get&lt;/strong&gt; 和 &lt;strong&gt;–set&lt;/strong&gt; 参数可以用来查询和设置非 SMART 的属性，其中就包括了写缓存属性 &lt;strong&gt;wcache&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;查看当前硬盘当前的 wcache 值：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@chenhong204 ~]# smartctl --get=wcache /dev/sdc
smartctl 6.2 2013-07-26 r3841 [x86_64-linux-3.10.0-693.el7.x86_64] (local build)
Copyright (C) 2002-13, Bruce Allen, Christian Franke, www.smartmontools.org

Writeback Cache is:   Enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关闭写缓存：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@chenhong204 ~]# smartctl --set=wcache,off /dev/sdc
smartctl 6.2 2013-07-26 r3841 [x86_64-linux-3.10.0-693.el7.x86_64] (local build)
Copyright (C) 2002-13, Bruce Allen, Christian Franke, www.smartmontools.org

Write cache disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开启写缓存：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@chenhong204 ~]# smartctl --set=wcache,on /dev/sdc
smartctl 6.2 2013-07-26 r3841 [x86_64-linux-3.10.0-693.el7.x86_64] (local build)
Copyright (C) 2002-13, Bruce Allen, Christian Franke, www.smartmontools.org

Write cache enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;特别需要注意的是，用 smartctl 设置的值不能持久化，即重启后会恢复默认值。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/08/20/smartctl-wcache/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/08/20/smartctl-wcache/</guid>
        
        <category>storage</category>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>在 PEX 程序中访问项目代码 --not-zip-safe</title>
        <description>&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;

&lt;p&gt;当使用 PEX (&lt;em&gt;&lt;a href=&quot;https://github.com/pantsbuild/pex&quot;&gt;https://github.com/pantsbuild/pex&lt;/a&gt;&lt;/em&gt;) 来打包一个 Python 项目时，会发现有些动态的源码访问方式无法使用。例如下面这段代码，通过动态遍历 Python 源文件来载入一个 package 下的所有模块：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- coding: utf-8 -*-
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;glob&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os.path&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isfile&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__all__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__init__.py&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# noqa
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当使用 PEX 进行打包的时候，程序默认会使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--zip-safe&lt;/code&gt; 参数，即在 PEX 程序执行的过程中，源码不会存在到磁盘上，因此 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;glob.glob()&lt;/code&gt; 会返回一个空列表，所以就无法载入任何模块。如果遇到这个情况，当你需要访问某些子模块时，就会触发如下的错误：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AttributeError: 'module' object has no attribute 'submodule_name'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;如果要支持这样的代码逻辑，需要使用 PEX 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--not-zip-safe&lt;/code&gt; 模式。当启用该模式时，PEX 在运行程序前，会先把程序的代码解压到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${PEX_ROOT}/code&lt;/code&gt; 目录下 （ PEX_ROOT 可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pex-root&lt;/code&gt; 参数指定，默认值是 &lt;em&gt;~/.pex/&lt;/em&gt;），然后再运行程序。这样代码中就可以使用上面这样的逻辑来动态的访问源码文件了。&lt;/p&gt;

&lt;p&gt;但是，使用这个方法有个问题，就是每运行一次，代码就会被保留一份到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${PEX_ROOT}/code&lt;/code&gt; 目录下一次，不仅会占用空间，而且会让别人可以方便的访问到源代码（虽然，直接解压 PEX 文件也能获得源代码）。所以，可以使用类似如下的代码，在程序退出前删除 PEX 解压出来的源代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean_pex_code_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We use default PEX_ROOT setting.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;pex_root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expanduser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~/.pex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;code_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pex_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# It's necessary to raise catched exception for dumping traceback.
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;shutil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rmtree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deco&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clean_pex_code_dir&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 11 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/08/11/pex-vist-source-files/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/08/11/pex-vist-source-files/</guid>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第46期 - 2019-06-16</title>
        <description>&lt;h2 id=&quot;lessons-learned-porting-50k-loc-from-java-to-go&quot;&gt;Lessons learned porting 50k loc from Java to Go&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.kowalczyk.info/article/19f2fe97f06a47c3b1f118fd06851fad/lessons-learned-porting-50k-loc-from-java-to-go.html&quot;&gt;https://blog.kowalczyk.info/article/19f2fe97f06a47c3b1f118fd06851fad/lessons-learned-porting-50k-loc-from-java-to-go.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;作者使用将 RavenDB 的 Java Client 移植了一个 Go 版本，文章列举了一些移植策略，以及如何使用 Go 实现一些 Java 的特性，比如异常和泛型。&lt;/p&gt;

&lt;h2 id=&quot;stack-history-a-timeline-of-ubers-tech-stack-evolution&quot;&gt;Stack History: A Timeline of Uber’s Tech Stack Evolution&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackshare.io/stack-history-timeline-uber-tech-stack-evolution&quot;&gt;https://stackshare.io/stack-history-timeline-uber-tech-stack-evolution&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Uber 的架构进化史。&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-sorted-and-sort-in-python&quot;&gt;How to Use sorted() and sort() in Python&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://realpython.com/python-sort/&quot;&gt;https://realpython.com/python-sort/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一篇很详细的介绍 Python 的 sorted() 和 sort() 的用法的文章。&lt;/p&gt;

&lt;h2 id=&quot;goodbye-microservices-from-100s-of-problem-children-to-1-superstar&quot;&gt;Goodbye Microservices: From 100s of problem children to 1 superstar&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://segment.com/blog/goodbye-microservices/&quot;&gt;https://segment.com/blog/goodbye-microservices/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;先从一个单体服务变成 100 多个微服务，好处是做到了服务隔离。但是随着服务数量不断的上升，维护成本开始增加，运营效率下降。最后又改回了单体的服务，采用了一些技术来保证单体服务的可靠性，虽然损失了一些微服务的优点，但是获得了巨大的运营效益。&lt;/p&gt;

&lt;p&gt;这个算是一个架构设计的失败案例么？&lt;/p&gt;

&lt;h2 id=&quot;introducing-pg_auto_failover-open-source-extension-for-automated-failover-and-high-availability-in-postgresql&quot;&gt;Introducing pg_auto_failover: Open source extension for automated failover and high-availability in PostgreSQL&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://cloudblogs.microsoft.com/opensource/2019/05/06/introducing-pg_auto_failover-postgresql-open-source-extension-automated-failover-high-availability/&quot;&gt;https://cloudblogs.microsoft.com/opensource/2019/05/06/introducing-pg_auto_failover-postgresql-open-source-extension-automated-failover-high-availability/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Citus （已经被微软收购）出的一个 Postgres 自动 failover 方案，通过一个 monitor 来监控主备数据库，在主挂掉的时候，将备切换为主。同时，从 Postgres 10 开始，一个客户端可以连接多个服务端，会自动选择可以写入的服务端。所以，这个是一套完整的 failover 方案。&lt;/p&gt;

&lt;h2 id=&quot;is-high-quality-software-worth-the-cost&quot;&gt;Is HIgh Quality Software Worth the Cost?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://martinfowler.com/articles/is-quality-worth-cost.html&quot;&gt;https://martinfowler.com/articles/is-quality-worth-cost.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;作者把软件质量分为外部质量（UI 或者 缺陷，用户可以看到的）和内部质量（架构等用户看不到的）。用户很容易就能看出一个软件是否有很高的外部质量，但是无法看出其内部质量的水平。&lt;/p&gt;

&lt;p&gt;内部质量不好，会导致技术债务快速累积，技术债务会这导致增加新功能的速度变慢，并且容易导致缺陷。所以提升内部质量有助于增加新功能。增加新功能的速度越快，质量越好，软件就越便宜。&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/06/16/write-what-i-have-046/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/06/16/write-what-i-have-046/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>python</category>
        
        <category>database</category>
        
        <category>distributed-computing</category>
        
        
      </item>
    
      <item>
        <title>hdparm and sdparm</title>
        <description>&lt;p&gt;&lt;strong&gt;hdparm&lt;/strong&gt; 和 &lt;strong&gt;sdparm&lt;/strong&gt; 是 Linux 下常用的两个查询和设置硬盘参数的工具，这两个工具分别适用于不同的硬盘类型。&lt;/p&gt;

&lt;h2 id=&quot;硬盘类型&quot;&gt;硬盘类型&lt;/h2&gt;

&lt;p&gt;不考虑早起的 IDE 硬盘，以及最新的 NVME 等硬盘，目前主流的硬盘分为两个类型：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;SATA&lt;/strong&gt;: Serial Advanced Technoogy Attachment&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SAS&lt;/strong&gt;: Serial Attached SCSI&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在 Linux 系统中，可以用 &lt;strong&gt;smartctl&lt;/strong&gt; 命令查看硬盘的类型。 这里，我们不看这两种接口的标准和实现的差异，重点关注的是使用上的差异。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;转速差距&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SATA 一般是 7200 rpm&lt;/li&gt;
  &lt;li&gt;SAS 一般是 10k 或者 15k rpm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;IOPS (小 IO)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;7.2k rpm 的 SATA 盘一般是 IOPS 80&lt;/li&gt;
  &lt;li&gt;10k rpm 的 SAS 盘一般是 IOPS 120&lt;/li&gt;
  &lt;li&gt;10k rpm 的 SAS 盘一般是 IOPS 180&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;可靠性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可靠性上，SAS 更可靠。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SAS drives are more reliable than SATA drives. The industry accepted Mean Time Between Failure (MTBF) for SAS drives is 1.2 million hours vs 700,000 hours MTBF for SATA drives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;容量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SATA 盘的容量可以做得更大。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In terms of capacity though, SATA drives win hands down. 3TB SATA hard drives are not uncommon and there are 8TB disk offerings in a 3.5 inch format. Generally though they are most cost effective in the 1TB to 3TB range. SAS drives on the other hand tend to max at around 900GB although the most popular configuration is around 450GB to 500GB.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SATA 的线缆长度很短，最多 1 米；SAS 可达 10 米。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From a physical perspective the data cables are also significantly different. SATA cables are limited to 1 metre in length and the data and power are separate whereas SAS cables can be up to 10 metres in length with power and data provided through the same cable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;hdparm&quot;&gt;hdparm&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;hdparm&lt;/strong&gt; 工具是通过 kernel 的 &lt;strong&gt;libata&lt;/strong&gt; 子系统和 IDE 子系统来和硬盘交互，达到读取或者设置硬盘参数的目的。这个工具并不能百分百兼容 SAS 硬盘，只有部分选项对 SAS 硬盘是有效的，比如 &lt;em&gt;write-caching&lt;/em&gt; 参数就不兼容 SAS 盘。&lt;/p&gt;

&lt;p&gt;hdparm 直接通过指定参数即可和硬盘交互，更详细的文档请参考： &lt;em&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/hdparm&quot;&gt;https://wiki.archlinux.org/index.php/hdparm&lt;/a&gt;&lt;/em&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man hdparm&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如可以用 &lt;strong&gt;-W&lt;/strong&gt; 来设置 SATA 盘的 &lt;em&gt;write-caching&lt;/em&gt; 属性：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root ~]# hdparm -W 1 /dev/sda
[root ~]# hdparm -W /dev/sda

/dev/sda:
 write-caching =  1 (on)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sdparm&quot;&gt;sdparm&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;sdparm&lt;/strong&gt; 是一个 SCSI 协议交互工具，用于访问 SCSI mode pages，读取 VPD pages，以及发送简单的 SCSI 命令。因此这个工具一般被用来控制 SAS 盘。这里只是简单说明下几个主要的概念和工具用法，更详细的内容，推荐阅读 &lt;em&gt;&lt;a href=&quot;http://sg.danny.cz/sg/sdparm.html#mozTocId871473&quot;&gt;http://sg.danny.cz/sg/sdparm.html#mozTocId871473&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt;

&lt;h3 id=&quot;scsi-mode-pages&quot;&gt;SCSI mode pages&lt;/h3&gt;

&lt;p&gt;SCSI mode pages 包含了一些 SCSI 设备的元数据，用户可以通过设置这些元数据来改变设备的行为。SCSI 协议在 SPC 中定义了 mode page 相关的内容。&lt;/p&gt;

&lt;p&gt;sdparm 可以使用 &lt;strong&gt;-all&lt;/strong&gt; 参数来查看设备所支持的 page:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root ~]# sdparm --all --long /dev/sdb | grep page
Read write error recovery [rw] mode page:
Disconnect-reconnect (SPC + transports) [dr] mode page:
Format (SBC) [fo] mode page:
Rigid disk (SBC) [rd] mode page:
Verify error recovery (SBC) [ve] mode page:
Caching (SBC) [ca] mode page:
Control [co] mode page:
  ATMPE       0  [cha: n, def:  0, sav:  0]  Application tag mode page enabled
Protocol specific logical unit [pl] mode page:
Protocol specific port [pp] mode page:
Power condition [po] mode page:
Informational exceptions control [ie] mode page:
Background control (SBC) [bc] mode page:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每一行是一个 mode page，其中中括号内的是 page 的缩写。要查询一个 page 的指定内容，每行一个域：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root ~]# sdparm --all --page=ca /dev/sdb
    /dev/sdb: TOSHIBA   MG03SCA200        5702
Caching (SBC) mode page:
  IC          0  [cha: y, def:  0, sav:  0]
  ABPF        0  [cha: n, def:  0, sav:  0]
  CAP         0  [cha: n, def:  0, sav:  0]
  DISC        1  [cha: n, def:  1, sav:  1]
  SIZE        0  [cha: n, def:  0, sav:  0]
  WCE         0  [cha: y, def:  0, sav:  0]
  MF          0  [cha: n, def:  0, sav:  0]
  RCD         0  [cha: y, def:  0, sav:  0]
  DRRP        0  [cha: n, def:  0, sav:  0]
  WRP         0  [cha: n, def:  0, sav:  0]
  DPTL       -1  [cha: n, def: -1, sav: -1]
  MIPF        0  [cha: n, def:  0, sav:  0]
  MAPF        0  [cha: n, def:  0, sav:  0]
  MAPFC      -1  [cha: n, def: -1, sav: -1]
  FSW         1  [cha: y, def:  1, sav:  1]
  LBCSS       0  [cha: n, def:  0, sav:  0]
  DRA         0  [cha: n, def:  0, sav:  0]
  SYNC_PROG   0  [cha: n, def:  0, sav:  0]
  NV_DIS      0  [cha: n, def:  0, sav:  0]
  NCS         8  [cha: y, def:  8, sav:  8]
  CSS         0  [cha: n, def:  0, sav:  0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--get&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--set&lt;/code&gt; 来设置一个指定域的值。域的缩写就是上面第一列的大写字母，这个缩写是全局唯一的，在不同的 page 内也不重复。比如查看和设置一个硬盘的 write-caching 的方法如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root ~]# sdparm --set WCE=0 --save /dev/sdb
    /dev/sdb: TOSHIBA   MG03SCA200        5702
[root ~]#
[root ~]# sdparm --get=WCE /dev/sdb
    /dev/sdb: TOSHIBA   MG03SCA200        5702
WCE         0  [cha: y, def:  0, sav:  0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vpd-pages&quot;&gt;VPD pages&lt;/h3&gt;

&lt;p&gt;VPD (Vital Product Data) 是指软件或者硬件提供的一组配置和信息，一般在硬件中都用来存储硬件的关键信息。SCSI 协议是在 SBC 中定义了 VPD 相关的内容，最重要的就是 &lt;strong&gt;Device Identification VPD page (page number: 0x83)&lt;/strong&gt;，这个 page 包含了磁盘序列号等信息。&lt;/p&gt;

&lt;p&gt;在 sdparm 参数中，可以通过指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--inquiry&lt;/code&gt; 参数来指定要查询的是 VPD pages：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root ~]# sdparm --inquiry --all /dev/sdb
    /dev/sdb: TOSHIBA   MG03SCA200        5702
Supported VPD pages VPD page:
  Supported VPD pages [sv]
  Unit serial number [sn]
  Device identification [di]
  Extended inquiry data [ei]
  Power condition [pc]
  Protocol-specific logical unit information [pslu]
  Block device characteristics (SBC) [bdc]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般我们是通过 &lt;strong&gt;sn&lt;/strong&gt; page 来查询硬盘的序列号：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root ~]# sdparm --inquiry --page=sn /dev/sdb
    /dev/sdb: TOSHIBA   MG03SCA200        5702
Unit serial number VPD page:
  Z3M0AXXXXXU6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.pickaweb.co.uk/kb/difference-between-sata-sas-hard-drives/&quot;&gt;https://www.pickaweb.co.uk/kb/difference-between-sata-sas-hard-drives/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.intel.com/content/www/us/en/support/articles/000005782/server-products.html&quot;&gt;https://www.intel.com/content/www/us/en/support/articles/000005782/server-products.html&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/v4.13/driver-api/libata.html&quot;&gt;https://www.kernel.org/doc/html/v4.13/driver-api/libata.html&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SCSI_mode_page&quot;&gt;https://en.wikipedia.org/wiki/SCSI_mode_page&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Vital_Product_Data&quot;&gt;https://en.wikipedia.org/wiki/Vital_Product_Data&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Working Draft SCSI Block Commands - 3 (SBC-3) &lt;em&gt;&lt;a href=&quot;http://t10.org/ftp/t10/document.05/05-344r0.pdf&quot;&gt;http://t10.org/ftp/t10/document.05/05-344r0.pdf&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Working Draft SCSI Primary Commands - 4 (SPC-4) &lt;em&gt;&lt;a href=&quot;http://caxapa.ru/thumbs/563550/spc4r31.pdf&quot;&gt;http://caxapa.ru/thumbs/563550/spc4r31.pdf&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.systutorials.com/docs/linux/man/8-sg_vpd/&quot;&gt;https://www.systutorials.com/docs/linux/man/8-sg_vpd/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 16 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/06/16/hdparm-and-sdparm/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/06/16/hdparm-and-sdparm/</guid>
        
        <category>storage</category>
        
        <category>linux</category>
        
        
      </item>
    
  </channel>
</rss>
