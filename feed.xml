<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffee, Coke and Code</title>
    <description>Archive diabloneo's articles.
</description>
    <link>http://diabloneo.github.io//</link>
    <atom:link href="http://diabloneo.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 23 Apr 2018 22:21:30 +0800</pubDate>
    <lastBuildDate>Mon, 23 Apr 2018 22:21:30 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>想到什么写什么周报 第26期 - 2018-04-23</title>
        <description>&lt;h2 id=&quot;whats-new-in-mysql-80-generally-available&quot;&gt;What’s New in MySQL 8.0? (Generally Available)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://mysqlserverteam.com/whats-new-in-mysql-8-0-generally-available/&quot;&gt;https://mysqlserverteam.com/whats-new-in-mysql-8-0-generally-available/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;MySQL 8.0已经GA了。&lt;/p&gt;

&lt;h2 id=&quot;apple开源了foundationdb&quot;&gt;Apple开源了FoundationDB&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.foundationdb.org/blog/&quot;&gt;https://www.foundationdb.org/blog/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;FoundationDB是一个分布式的ACID数据库，github地址：https://github.com/apple/foundationdb&lt;/p&gt;

&lt;h2 id=&quot;100tb-capacity-and-6x-performance-improvement-with-alibaba-cloud-polardb&quot;&gt;100TB Capacity and 6x Performance Improvement with Alibaba Cloud PolarDB&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/@Alibaba_Cloud/100tb-capacity-and-6x-performance-improvement-with-alibaba-cloud-polardb-79b270c1a481&quot;&gt;https://medium.com/@Alibaba_Cloud/100tb-capacity-and-6x-performance-improvement-with-alibaba-cloud-polardb-79b270c1a481&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alibaba官方blog介绍自己的PolarDB的架构，说明如何做到MySQL 5.6的6倍性能。&lt;/p&gt;

&lt;h2 id=&quot;cloud-sql-for-postgresql-now-generally-available-and-ready-for-your-production-workloads&quot;&gt;Cloud SQL for PostgreSQL now generally available and ready for your production workloads&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://cloudplatform.googleblog.com/2018/04/Cloud-SQL-for-PostgreSQL-now-generally-available-and-ready-for-your-production-workloads.html&quot;&gt;https://cloudplatform.googleblog.com/2018/04/Cloud-SQL-for-PostgreSQL-now-generally-available-and-ready-for-your-production-workloads.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud SQL的PostgreSQL支持现在GA了。版本是9.6，最大支持416G内存、64CPU和10TB空间。&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/04/23/write-what-i-have-026/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/04/23/write-what-i-have-026/</guid>
        
        <category>database</category>
        
        <category>cloud</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第25期 - 2018-04-15</title>
        <description>&lt;h2 id=&quot;amazon-s3-update-new-storage-class-and-general-availability-of-s3-select&quot;&gt;Amazon S3 Update: New Storage Class and General Availability of S3 Select&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://aws.amazon.com/cn/blogs/aws/amazon-s3-update-new-storage-class-general-availability-of-s3-select/&quot;&gt;https://aws.amazon.com/cn/blogs/aws/amazon-s3-update-new-storage-class-general-availability-of-s3-select/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;S3增加了一个新的存储类型：One Zone - IA。数据只会保存在一个region的一个zone里，但是价格便宜20%，适合存放不重要的数据。&lt;/li&gt;
  &lt;li&gt;另外，S3 select已经GA了，国区也有。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;edgedb-a-new-beginning&quot;&gt;EdgeDB: A New Beginning&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://edgedb.com/blog/edgedb-a-new-beginning/&quot;&gt;https://edgedb.com/blog/edgedb-a-new-beginning/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一个新的数据库EdgeDB，这是一种对象关系数据库，和之前的数据库模型都不太一样，使用一种特殊的查询语言EdgeQL。官方说这个是开源的，但是github项目还没有建立，可能还没放上去。&lt;/p&gt;

&lt;h2 id=&quot;一个很有新意的磁盘监控图设计&quot;&gt;一个很有新意的磁盘监控图设计&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://bvckup2.com/wip/10042018&quot;&gt;https://bvckup2.com/wip/10042018&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我觉得还挺实用的。&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/04/15/write-what-i-have-025/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/04/15/write-what-i-have-025/</guid>
        
        <category>database</category>
        
        <category>golang</category>
        
        <category>storage</category>
        
        
      </item>
    
      <item>
        <title>Go的 range loop 循环变量</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html&quot;&gt;50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs&lt;/a&gt; 中有一个关于循环变量的&lt;a href=&quot;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html#closure_for_it_vars&quot;&gt;例子&lt;/a&gt;，这个例子提出了一个很有意思的问题。&lt;/p&gt;

&lt;p&gt;我们知道Go在 &lt;em&gt;for range&lt;/em&gt; 循环中使用同一个变量来存放循环的数据，所以在 range loop中使用goroutine时，需要注意是否引用了同一个变量。当loop range的元素是一个struct类型时，会变得更复杂。&lt;/p&gt;

&lt;p&gt;例如下面这个例子(&lt;a href=&quot;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html#closure_for_it_vars&quot;&gt;来源&lt;/a&gt;)：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//goroutines print: three, three, three&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面这个例子会输出三个 &lt;em&gt;three&lt;/em&gt;，原因是如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在第20行 &lt;code class=&quot;highlighter-rouge&quot;&gt;go v.print()&lt;/code&gt;，每次循环都复用变量&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;，而且&lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;方法的receiver是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;*field&lt;/code&gt;，所以执行&lt;code class=&quot;highlighter-rouge&quot;&gt;v.print()&lt;/code&gt;首先会获得&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;的地址，然后作为receiver的值来调用&lt;code class=&quot;highlighter-rouge&quot;&gt;func (p *field) print()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;每次循环使用的都是同一个变量&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;，所以虽然调用了三次&lt;code class=&quot;highlighter-rouge&quot;&gt;v.print()&lt;/code&gt;，实际上都是对同一个变量&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;进行的。&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;在range loop中是&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;中的元素的拷贝，最后的拷贝是&lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;three&quot;}&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;修复这个问题的办法在Go代码中有标准做法，就是创建一个新的变量：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vcopy&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vcopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//goroutines print: three, three, three&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面这个代码就会输出 &lt;em&gt;one, two, three&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;下面来看一个更复杂的&lt;a href=&quot;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html#closure_for_it_vars&quot;&gt;例子&lt;/a&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//goroutines print: one, two, three&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个例子的输出是 &lt;em&gt;one, two, three&lt;/em&gt;。和上个例子相比，只有第17行的&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;定义发生了变化，从直接存储&lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;类型，变成了存储指向&lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;类型的指针。为什么这个变化会使得得到的结果发生改变呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;首先，要先理解Go的方法的receiver的实际含义。在Go中，一个方法的receiver是实现为这个函数的第一个参数&lt;/strong&gt;，所以在上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;*field&lt;/code&gt;类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;方法实际上是如下类型的一个函数：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;另外，在传递receiver时，如果变量不是一个指针，而方法的receiver要求得到一个指针时，Go会先对变量取地址，然后再将这个地址作为receiver来调用方法。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在第一个例子中，代码实际上是这样工作的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 用这个函数替代原来的v.print()方法&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 这里Go自动对v取地址，因为参数是一个指针，参数传递给fieldPrint时是传值调用。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 所以三次调用实际上传递的是同一个指针。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//goroutines print: three, three, three&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在第二个例子中，代码上是这样工作的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 用这个函数替代原来的v.print()方法&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 这里不用对v取地址，因为v原来就是一个指针，参数传递给fieldPrint时是传值调用。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 所以三次调用传递了不同的指针。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//goroutines print: three, three, three&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 15 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/04/15/golang-iteration-variables-and-goroutines-in-range-loop/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/04/15/golang-iteration-variables-and-goroutines-in-range-loop/</guid>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第24期 - 2018-04-08</title>
        <description>&lt;h2 id=&quot;go-talk-recordings-from-meetups-and-conferences-during-q4-2017&quot;&gt;Go Talk recordings from meetups and conferences during Q4 2017&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.meetupfeed.com/go-talk-recordings-meetups-conferences-q4-2017/&quot;&gt;https://blog.meetupfeed.com/go-talk-recordings-meetups-conferences-q4-2017/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;@MeetupFeed 收集的2017年Q4的Go相关的演讲和文章。&lt;/p&gt;

&lt;h2 id=&quot;kernel-recipes-2017---understanding-the-linux-kernel-via-ftrace---steven-rostedt&quot;&gt;Kernel Recipes 2017 - Understanding the Linux Kernel via Ftrace - Steven Rostedt&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2ff-7UTg5rE&quot;&gt;https://www.youtube.com/watch?v=2ff-7UTg5rE&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Steven Rostedt关于ftrace的演讲，很全面。作者在2010年也放出过ftrace的幻灯片：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://events.static.linuxfound.org/slides/2010/linuxcon_japan/linuxcon_jp2010_rostedt.pdf&quot;&gt;https://events.static.linuxfound.org/slides/2010/linuxcon_japan/linuxcon_jp2010_rostedt.pdf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;fun-with-sql-generate_series-in-postgres&quot;&gt;Fun with SQL: generate_series in Postgres&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2018/03/14/fun-with-sql-generate-sql/&quot;&gt;https://www.citusdata.com/blog/2018/03/14/fun-with-sql-generate-sql/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了postgres的generate_series函数的有趣应用。&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/04/08/write-what-i-have-024/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/04/08/write-what-i-have-024/</guid>
        
        <category>database</category>
        
        <category>golang</category>
        
        <category>kernel</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第23期 - 2018-04-01</title>
        <description>&lt;h2 id=&quot;cloud-native-computing-foundation-welcomes-the-nats-messaging-protocol-into-the-fold&quot;&gt;Cloud Native Computing Foundation Welcomes the NATS Messaging Protocol into the Fold&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://thenewstack.io/cloud-native-computing-foundation-welcomes-nats-messaging-fold/&quot;&gt;https://thenewstack.io/cloud-native-computing-foundation-welcomes-nats-messaging-fold/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;NATS是一个消息系统，最近加入了CNCF，是CNCF的第17个项目。&lt;/p&gt;

&lt;h2 id=&quot;scraping-the-web-in-golang-with-colly-and-goquery&quot;&gt;Scraping the Web in Golang with Colly and Goquery&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://benjamincongdon.me/blog/2018/03/01/Scraping-the-Web-in-Golang-with-Colly-and-Goquery/&quot;&gt;http://benjamincongdon.me/blog/2018/03/01/Scraping-the-Web-in-Golang-with-Colly-and-Goquery/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了使用Go来做爬虫时会用到的两个库：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;github.com/PuerkitoBio/goquery&lt;/li&gt;
  &lt;li&gt;github.com/gocolly/colly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;warehouse-all-new-pypi-is-now-in-beta&quot;&gt;Warehouse: All New PyPI is now in beta&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://pyfound.blogspot.com/2018/03/warehouse-all-new-pypi-is-now-in-beta.html&quot;&gt;http://pyfound.blogspot.com/2018/03/warehouse-all-new-pypi-is-now-in-beta.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Python社区用于替代PyPI的warehouse已经beta了，提供了更好用的软件仓库功能，对于Linux用户来说，依旧使用pip命令。&lt;/p&gt;

&lt;h2 id=&quot;object-storage-aws-s3-vs-google-cloud-storage-vs-azure-storage-vs-digitalocean-spaces&quot;&gt;Object Storage: AWS s3 vs. Google Cloud Storage vs. Azure Storage vs. DigitalOcean Spaces&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.chooseacloud.com/objectstorage?ref=stackshare&quot;&gt;https://www.chooseacloud.com/objectstorage?ref=stackshare&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;公有云对象存储的价格对比：Google &amp;gt; AWS &amp;gt; Azure »&amp;gt; DigitalOcean&lt;/p&gt;

&lt;h2 id=&quot;distributed-transactions-and-why-you-should-care&quot;&gt;Distributed transactions and why you should care&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://towardsdatascience.com/distributed-transactions-and-why-you-should-care-116b6da8d72&quot;&gt;https://towardsdatascience.com/distributed-transactions-and-why-you-should-care-116b6da8d72&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一篇介绍数据一致性模型的文章。&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/04/01/write-what-i-have-023/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/04/01/write-what-i-have-023/</guid>
        
        <category>cloud</category>
        
        <category>database</category>
        
        <category>golang</category>
        
        <category>kernel</category>
        
        <category>python</category>
        
        <category>distributed-computing</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第22期 - 2018-03-18</title>
        <description>&lt;h2 id=&quot;running-a-free-twitter-bot-on-aws-lambda&quot;&gt;Running a free Twitter bot on AWS Lambda&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://dev.to/hivickylai/running-a-free-twitter-bot-on-aws-lambda--2pik?ref=stackshare&quot;&gt;https://dev.to/hivickylai/running-a-free-twitter-bot-on-aws-lambda--2pik?ref=stackshare&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;用AWS Lambda写一个解析RSS然后发tweet的bot，使用CloudWatch来做定时器，挺容易的。&lt;/p&gt;

&lt;h2 id=&quot;the-postgres-10-feature-you-didnt-know-about-create-statistics&quot;&gt;The Postgres 10 feature you didn’t know about: CREATE STATISTICS&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2018/03/06/postgres-planner-and-its-usage-of-statistics/?ref=stackshare&quot;&gt;https://www.citusdata.com/blog/2018/03/06/postgres-planner-and-its-usage-of-statistics/?ref=stackshare&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Postgres 10引入了一个新的特性: CREATE STATISTICS，可以让planner更准确的收集统计信息，以便做出更好的plan。&lt;/p&gt;

&lt;h2 id=&quot;postgresql-10-a-great-new-version-for-a-great-database&quot;&gt;PostgreSQL 10: a Great New Version for a Great Database&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.linuxjournal.com/content/postgresql-10-great-new-version-great-database&quot;&gt;http://www.linuxjournal.com/content/postgresql-10-great-new-version-great-database&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;举例子描述了Postgres 10新增的两个主要特性：logical replication, table partitioning.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-comparison-between-different-go-file-walk-implementations&quot;&gt;A quick comparison between different Go file walk implementations&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.boyter.org/2018/03/quick-comparison-go-file-walk-implementations/&quot;&gt;http://www.boyter.org/2018/03/quick-comparison-go-file-walk-implementations/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;比较了Go的几个遍历文件的库的性能，可以参考下。内置的path/filepath.Walk是比较慢的。&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/18/write-what-i-have-022/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/18/write-what-i-have-022/</guid>
        
        <category>cloud</category>
        
        <category>database</category>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第21期 - 2018-03-12</title>
        <description>&lt;h2 id=&quot;book-go-internals&quot;&gt;Book: go-internals&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/teh-cmc/go-internals&quot;&gt;https://github.com/teh-cmc/go-internals&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;go--package-versioning&quot;&gt;Go += Package Versioning&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://research.swtch.com/vgo-intro&quot;&gt;https://research.swtch.com/vgo-intro&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/12/write-what-i-have-021/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/12/write-what-i-have-021/</guid>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>Go终于要引入软件包版本管理了</title>
        <description>&lt;p&gt;最近Russ Cox发表了篇文章: &lt;a href=&quot;https://research.swtch.com/vgo-intro&amp;gt;*&quot;&gt;&lt;strong&gt;Go += Package Versioning&lt;/strong&gt;&lt;/a&gt;。从这篇文章开始，Go社区算是开始着手处理对待软件包管理问题了。这篇文章也算是为接下来的正式提案预热。&lt;/p&gt;

&lt;p&gt;提案包含4个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Import Compatiblity Rule: 导入兼容性规则。建议的规则很简单：如果一个新的package和老的package具有同样的import path，那么新的package就需要具备向后兼容性。Russ Cox指出，通过期待包的作者遵循这条规则，新的包管理系统不需要处理兼容性问题，这样会使得整个包管理系统更加简单和健壮。如果你熟悉OpenStack，那么你应该知道每个项目下的requirements有多麻烦，而且不同项目间还需要兼容同一个requirements。&lt;/li&gt;
  &lt;li&gt;Minimal Version Select: 现在的包管理器一般都采用如下的策略：选择最新的版本。Russ Cox认为这是个错误的默认行为，因为只要上游软件包有更新，那么你的编译结果就会改变，这个不是开发者在大部分情况下所期望的行为。所以他采取的默认策略是选贼最老的版本。这个方案不仅使得编译结果稳定，而且也是软件包管理更加简单。&lt;/li&gt;
  &lt;li&gt;Defining Go Modules: 一个Go module是一个package集合，这些package共享同样的import path prefix，称为module path。一个module定义在一个新的文件中，称为go.mod。一个module在网络上会存储成一个zip文件，可以通过HTTP协议下载，可以避免通过go get下载时需要安装各种cvs程序，而且也方便走代理。&lt;/li&gt;
  &lt;li&gt;The go Command: go命令需要修改以支持Go Module。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基于这个目标，Russ Cox开发了一个新的go命令：vgo。这个新的工具支持版本管理。另一篇文章 https://research.swtch.com/vgo-tour 说明了这个工具的使用。&lt;/p&gt;

&lt;p&gt;现在这个命令还处于开发阶段，但是已经实现了上述4个步骤中的前三个。&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/12/versioning-go-command/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/12/versioning-go-command/</guid>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第20期 - 2018-03-04</title>
        <description>&lt;h2 id=&quot;gerritbot&quot;&gt;GerritBot&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/golang/go/wiki/GerritBot&quot;&gt;https://github.com/golang/go/wiki/GerritBot&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go社区开始接收Github的pr，不过是通过GerritBot自动映射为一个Gerrit change，review和comment也是在gerrit里完成。&lt;/p&gt;

&lt;h2 id=&quot;github-shouldnt-allow-username-reuse&quot;&gt;GitHub Shouldn’t Allow Username Reuse&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://donatstudios.com/GithubsTotalSecurityFacepalm&quot;&gt;https://donatstudios.com/GithubsTotalSecurityFacepalm&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最近go-bindata的作者从网络上消失了，顺便把自己的github账号删除了。这个做法导致了很多依赖go-bindata的项目无法编译。于是有人重建了原作者的账号，同步了一份最新的代码，同时也声明他们使用这种无奈举措的原因。本文的作者提出的观点是，这种做法有安全问题，github账号不应该被重用，否则会导致信任问题。&lt;/p&gt;

&lt;h2 id=&quot;this-week-in-elasticsearch-and-apache-lucene---2018-02-05&quot;&gt;This Week in Elasticsearch and Apache Lucene - 2018-02-05&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.elastic.co/blog/this-week-in-elasticsearch-and-apache-lucene-2018-02-05&quot;&gt;https://www.elastic.co/blog/this-week-in-elasticsearch-and-apache-lucene-2018-02-05&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ES也要支持sql了。&lt;/p&gt;

&lt;h2 id=&quot;how-google-cloud-storage-offers-strongly-consistent-object-listing-thanks-to-spanner&quot;&gt;How Google Cloud Storage offers strongly consistent object listing thanks to Spanner&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://cloudplatform.googleblog.com/2018/02/how-Google-Cloud-Storage-offers-strongly-consistent-object-listing-thanks-to-Spanner.html&quot;&gt;https://cloudplatform.googleblog.com/2018/02/how-Google-Cloud-Storage-offers-strongly-consistent-object-listing-thanks-to-Spanner.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud Storage依靠Spanner服务提升了数据的一致性，在这方面已经超过AWS了。可以对比两个对象存储服务的一致性说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://cloud.google.com/storage/docs/consistency&quot;&gt;https://cloud.google.com/storage/docs/consistency&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html#ConsistencyModel。&quot;&gt;https://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html#ConsistencyModel。&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;go-2017-survey-results&quot;&gt;Go 2017 Survey Results&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.golang.org/survey2017-results&quot;&gt;https://blog.golang.org/survey2017-results&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go 2017年的用户调查报告。&lt;/p&gt;

&lt;h2 id=&quot;defer-internals&quot;&gt;Defer Internals&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.learngoprogramming.com/yeah-semantically-after-is-the-right-word-fad1d5181891&quot;&gt;https://blog.learngoprogramming.com/yeah-semantically-after-is-the-right-word-fad1d5181891&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;快速介绍了下defer的内部实现，是在return语句之前。&lt;/p&gt;

&lt;h2 id=&quot;postgresql-rocks-except-when-it-blocks-understanding-locks&quot;&gt;PostgreSQL rocks, except when it blocks: Understanding locks&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2018/02/15/when-postgresql-blocks/&quot;&gt;https://www.citusdata.com/blog/2018/02/15/when-postgresql-blocks/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;CitusData发布的一篇关于Postgres的lock介绍文章，里面有两张表格，可以方便的查询pg的lock级别。&lt;/p&gt;

&lt;h2 id=&quot;a-gophers-reading-list&quot;&gt;A Gopher’s Reading List&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/enocom/gopher-reading-list&quot;&gt;https://github.com/enocom/gopher-reading-list&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一个关于Go语言文章的列表，从初级到高级都有。&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/04/write-what-i-have-020/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/04/write-what-i-have-020/</guid>
        
        <category>cloud</category>
        
        <category>database</category>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>Go 1.10中Go的build cache和test cache</title>
        <description>&lt;p&gt;最近Go发布了1.10版本，引入了cache等重要特性。Russ Cox去年11月份的时候在邮件列表golang-dev里发了一篇帖子说明了这几个变化。帖子的地址是： &lt;em&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/golang-dev/qfa3mHN4ZPA&quot;&gt;https://groups.google.com/forum/#!topic/golang-dev/qfa3mHN4ZPA&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;build-cache&quot;&gt;Build Cache&lt;/h2&gt;

&lt;p&gt;意思就是会把编译过程的中间结果cache下来，从而实现增量编译。原来需要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;go build -i&lt;/code&gt;命令来实现，现在go build命令默认启用了cache。启用cache后的效果是很明显的，我司的一个大程序的编译时间如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全新编译，耗时107秒。&lt;/li&gt;
  &lt;li&gt;修改一个文件后，再次编译，耗时22秒。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-cache&quot;&gt;Test Cache&lt;/h2&gt;

&lt;p&gt;测试现在也默认启用了cache，在内容没有变化的情况下，对于同样的参数的测试，会直接使用cache的测试结果，也就是同样的测试不会重复跑。当使用cache的结果时，go test命令最后会显示 &lt;code class=&quot;highlighter-rouge&quot;&gt;(cached)&lt;/code&gt; 的字样:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ ~/go/src/project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;feature&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;project/dp/master
ok      project/dp/master    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cached&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cache-path-and-clean-cache&quot;&gt;Cache Path and Clean Cache&lt;/h2&gt;

&lt;p&gt;cache默认的存储路径是操作系统所确定的用户缓存目录，但是可以通过GOCACHE环境变量修改。在Ubuntu下的默认cache路径是 &lt;em&gt;~/.cache/go-build&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;如果要清除cache，可以使用如下两个命令:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go clean -cache&lt;/code&gt; 清除build cache。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go clean -testcache&lt;/code&gt; 清除test cache。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 04 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/03/04/go-1.10-cache/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/03/04/go-1.10-cache/</guid>
        
        <category>golang</category>
        
        
      </item>
    
  </channel>
</rss>
