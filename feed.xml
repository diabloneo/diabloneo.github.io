<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffee, Coke and Code</title>
    <description>Archive diabloneo's articles.
</description>
    <link>http://diabloneo.github.io//</link>
    <atom:link href="http://diabloneo.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 27 Jan 2019 23:14:33 +0800</pubDate>
    <lastBuildDate>Sun, 27 Jan 2019 23:14:33 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>想到什么写什么周报 第41期 - 2019-01-27</title>
        <description>&lt;h2 id=&quot;optimising-startup-time-of-prometheus-260-with-pprof&quot;&gt;Optimising startup time of Prometheus 2.6.0 with pprof&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.robustperception.io/optimising-startup-time-of-prometheus-2-6-0-with-pprof&quot;&gt;https://www.robustperception.io/optimising-startup-time-of-prometheus-2-6-0-with-pprof&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一个使用 pprof 来改进性能的实际例子。&lt;/p&gt;

&lt;h2 id=&quot;scheduling-in-go&quot;&gt;Scheduling In Go&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html&quot;&gt;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html&quot;&gt;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html&quot;&gt;https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个系列的入门文章，介绍了 Gorouting 调度的基本概念，并且给出了一些例子说明什么情况下基于 Gorouting 的并发会更快。&lt;/p&gt;

&lt;h2 id=&quot;golangs-real-time-gc-in-theory-and-practice&quot;&gt;Golang’s Real-time GC in Theory and Practice&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/&quot;&gt;https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一篇 2016 年的文章，有一个好看的动画介绍了 Go 的 GC 的工作原理： &lt;strong&gt;tricolor mark-and-sweep algorithm&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这篇文章也对比了 Go 和 Haskell 的 GC 的不同应用场景：Go 注重低延迟，Haskell 注重高并发。所以选择语言的时候需要考虑 GC 的使用场景。文中也提到了一个仓库包含了对多种语言的 GC 导致处理延迟的 benchmark，并且给出了测试结果，Go 的延迟是比较好的。&lt;/p&gt;

&lt;p&gt;最后，提到了两个 GC 的 bug，不过在 1.8 版本都已经解决了。&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/01/27/write-what-i-have-041/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/01/27/write-what-i-have-041/</guid>
        
        <category>golang</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第40期 - 2019-01-20</title>
        <description>&lt;h2 id=&quot;how-algolia-reduces-latency-for-21b-searches-per-month&quot;&gt;How Algolia Reduces Latency For 21B Searches Per Month&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackshare.io/algolia/how-algolia-reduces-latency-for-21b-searches-per-month&quot;&gt;https://stackshare.io/algolia/how-algolia-reduces-latency-for-21b-searches-per-month&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了 Algolia 如何实现低延迟的搜索服务。提到了几个关键工具如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.wavefront.com/&quot;&gt;https://www.wavefront.com/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.pagerduty.com/&quot;&gt;https://www.pagerduty.com/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/etsy/statsd/&quot;&gt;https://github.com/etsy/statsd/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://collectd.org/&quot;&gt;https://collectd.org/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;获取当前进程及子进程的资源使用率 &lt;em&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getrusage.2.html&quot;&gt;http://man7.org/linux/man-pages/man2/getrusage.2.html&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;内存带宽测试工具 &lt;em&gt;&lt;a href=&quot;https://github.com/raas/mbw&quot;&gt;https://github.com/raas/mbw&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/gperftools/gperftools&quot;&gt;https://github.com/gperftools/gperftools&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他们家的服务状态页做得不错： &lt;em&gt;&lt;a href=&quot;https://status.algolia.com/&quot;&gt;https://status.algolia.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;postgresql-configuration-cheat-sheet&quot;&gt;PostgreSQL Configuration Cheat Sheet&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://pgdash.io/blog/postgres-configuration-cheatsheet.html&quot;&gt;https://pgdash.io/blog/postgres-configuration-cheatsheet.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;linux-technology-for-the-new-year-ebpf&quot;&gt;Linux Technology for the New Year: eBPF&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://thenewstack.io/linux-technology-for-the-new-year-ebpf/&quot;&gt;https://thenewstack.io/linux-technology-for-the-new-year-ebpf/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;eBPF 越来越火了，虽然 RHEL 7 还不支持，但是 RHEL 8 已经使用了 4.18 版本的内核，是时候学起来了。&lt;/p&gt;

&lt;h2 id=&quot;how-we-solved-a-storage-problem-in-postgresql-without-adding-a-single-byte-of-storage&quot;&gt;How We Solved a Storage Problem in PostgreSQL Without Adding a Single Byte of Storage&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://hakibenita.com/how-we-solved-a-storage-problem-in-postgre-sql-without-adding-a-single-bytes-of-storage&quot;&gt;https://hakibenita.com/how-we-solved-a-storage-problem-in-postgre-sql-without-adding-a-single-bytes-of-storage&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;pg 的默认 work_mem 是 4MB，作者使用的 sql 查询需要处理一个二进制的列，这需要使用大约 300MB 的空间，超过了 work_mem 的大小，所以一运行查询就消耗很多的硬盘空间。&lt;/p&gt;

&lt;p&gt;解决方案是不直接使用二进制列的内容，而是先做一个 md5 hash，并且使用 uuid 类型将要处理的数据减少到 16 字节，最终需要消耗的硬盘空间从 309MB 减少到了 7MB。因为计算 hash，查询的执行时间从 160ms 上升到 374ms，不过对于夜间跑的任务来说，这个不是问题。&lt;/p&gt;

&lt;h2 id=&quot;time-series-data-why-and-how-to-use-a-relational-database-instead-of-nosql&quot;&gt;Time-series data: Why (and how) to use a relational database instead of NoSQL&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.timescale.com/time-series-data-why-and-how-to-use-a-relational-database-instead-of-nosql-d0cd6975e87c&quot;&gt;https://blog.timescale.com/time-series-data-why-and-how-to-use-a-relational-database-instead-of-nosql-d0cd6975e87c&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了 TimescaleDB 如何利用 Postgres 来构建一个时序数据库。几个点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OLTP 的内存和硬盘数据交换成本很高。&lt;/li&gt;
  &lt;li&gt;时序数据的写是 append only 的。&lt;/li&gt;
  &lt;li&gt;time/space chunking&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;want-a-super-fast-messaging-system&quot;&gt;Want a super-fast messaging system?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://hackernoon.com/want-a-super-fast-messaging-system-c19c9f8cf560&quot;&gt;https://hackernoon.com/want-a-super-fast-messaging-system-c19c9f8cf560&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;NATS 的作者介绍他们团队在设计一个高性能的消息队列服务上的经验，主要关心四个方面：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Message Per IO call&lt;/li&gt;
  &lt;li&gt;Message Routing&lt;/li&gt;
  &lt;li&gt;Protocol Parser&lt;/li&gt;
  &lt;li&gt;Scalability&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 20 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/01/20/write-what-i-have-040/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/01/20/write-what-i-have-040/</guid>
        
        <category>linux</category>
        
        <category>golang</category>
        
        <category>database</category>
        
        <category>distributed-computing</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第39期 - 2019-01-06</title>
        <description>&lt;h2 id=&quot;diagnositics&quot;&gt;Diagnositics&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://golang.org/doc/diagnostics.html&quot;&gt;https://golang.org/doc/diagnostics.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go 语言官方文档，关于 profile, trace, debug 的介绍。&lt;/p&gt;

&lt;h2 id=&quot;october-21-post-incident-analysis&quot;&gt;October 21 post-incident analysis&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.github.com/2018-10-30-oct21-post-incident-analysis&quot;&gt;https://blog.github.com/2018-10-30-oct21-post-incident-analysis&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GitHub 官方复盘了 2018 年 10 月 30 号的站点不可用事故。里面提到了几个点可以学习下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对数据恢复时间估计不准确。一个是因为从备份恢复整个 MySQL 集群没有完整演练过，不知道要花多长时间；另外一个是，在事故恢复的后期，有些集群的数据复制进度赶不上新数据写入的进度。&lt;/li&gt;
  &lt;li&gt;只有绿色、黄色和红色的三个状态无法代表整个服务的可用性。后来，GitHub 推出了新的站点状态服务： &lt;em&gt;&lt;a href=&quot;https://blog.github.com/2018-12-11-introducing-the-new-github-status-site/&quot;&gt;https://blog.github.com/2018-12-11-introducing-the-new-github-status-site/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-future-of-kubernetes-is-virtual-machines&quot;&gt;The future of Kubernetes is Virtual Machines&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://tech.paulcz.net/blog/future-of-kubernetes-is-virtual-machines&quot;&gt;https://tech.paulcz.net/blog/future-of-kubernetes-is-virtual-machines&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;K8s 自身的多租户模型比较脆弱，因为容器本身无法实现资源的完全隔离。作者提出了，K8s 的未来会依赖基于 VM Container 的资源管理方案，例如 Kata Container。&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2019/01/06/write-what-i-have-039/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2019/01/06/write-what-i-have-039/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>distributed-computing</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第38期 - 2018-12-31</title>
        <description>&lt;h2 id=&quot;microsoft-procdump-for-linux&quot;&gt;Microsoft ProcDump for Linux&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Microsoft/ProcDump-for-Linux&quot;&gt;https://github.com/Microsoft/ProcDump-for-Linux&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;微软的 ProdDump 出了 Linux 版，用来监控进程的 CPU 突发和挂起等信息。&lt;/p&gt;

&lt;h2 id=&quot;how-can-i-use-gnu-parallel-to-run-a-lot-of-commands-in-parallel&quot;&gt;How can I use GNU Parallel to run a lot of commands in parallel&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.msi.umn.edu/support/faq/how-can-i-use-gnu-parallel-run-lot-commands-parallel&quot;&gt;https://www.msi.umn.edu/support/faq/how-can-i-use-gnu-parallel-run-lot-commands-parallel&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GNU Parallel 的 quick start。&lt;/p&gt;

&lt;h2 id=&quot;cape-technical-deep-dive&quot;&gt;Cape Technical Deep Dive&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://blogs.dropbox.com/tech/2017/05/introducing-cape/&quot;&gt;https://blogs.dropbox.com/tech/2017/05/introducing-cape/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://blogs.dropbox.com/tech/2018/12/cape-technical-deep-dive/&quot;&gt;https://blogs.dropbox.com/tech/2018/12/cape-technical-deep-dive/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dropbox 介绍了自己的事件调度系统 Cape。Cape 要求低延迟、事件隔离、至少成功一次等特性。文中分析了为什么 Kafka, SQS, Redis 等消息队列系统不能满足需求。然后介绍了 Cape 的架构。&lt;/p&gt;

&lt;h2 id=&quot;access-patterns-and-tiered-storage-in-apache-pulsar&quot;&gt;Access Patterns and Tiered Storage in Apache Pulsar&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://streaml.io/blog/access-patterns-and-tiered-storage-in-apache-pulsar&quot;&gt;https://streaml.io/blog/access-patterns-and-tiered-storage-in-apache-pulsar&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了 BookKeeper 的消息系统中，如何对消息进行分层存储。整个存储分为三层，L1 是内存，L2 是节点硬盘，L3 是更便宜的持久存储。其中 L2 是的硬盘和 Journal 用的硬盘虽然在同一个机器上，但是使用不同的硬盘，因为 Journal 是顺序写，而消息存储则主要是顺序读。&lt;/p&gt;

&lt;h2 id=&quot;the-billion-data-point-challenge-building-a-query-engine-for-high-cardinality-time-series-data&quot;&gt;The Billion Data Point Challenge: Building a Query Engine for High Cardinality Time Series Data&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://eng.uber.com/billion-data-point-challenge/&quot;&gt;https://eng.uber.com/billion-data-point-challenge/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Uber 开源的 M3 监控系统，重点解决了查询性能。文中描述了 M3 如何解决内存问题、存储问题、跨数据中心的查询延迟问题、降级获取samples（downsampling）。其中 Downsampling 使用了 Largest Triangle Three Bucket (LTTB) 算法。这个系统使用自己的 M3QL 查询语言，但是支持 Prometheus 的 PromQL，也支持 Promtheus 的 exporter。&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/12/31/write-what-i-have-038/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/12/31/write-what-i-have-038/</guid>
        
        <category>linux</category>
        
        <category>shell</category>
        
        <category>storage</category>
        
        <category>distributed-computing</category>
        
        
      </item>
    
      <item>
        <title>获取 Golang gRPC 的错误类型</title>
        <description>&lt;p&gt;当我们在 Golang 中使用 gRPC 时，通常会使用 context 来控制超时时间，如果一个 rpc 调用超时了，我们如何通过错误类型来确定呢？ 可以使用 grpc 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;codes&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; 两个 package 来实现：&lt;/p&gt;

&lt;p&gt;如下示例代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpccodes&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;google.golang.org/grpc/codes&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpcstatus&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;google.golang.org/grpc/status&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpcErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpcstatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpcErr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpccodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Canceled&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpcErr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpccodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeadlineExceeded&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Warnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RPC call timeout: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Mon, 10 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/12/10/golang-grpc-error-code/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/12/10/golang-grpc-error-code/</guid>
        
        <category>golang</category>
        
        <category>grpc</category>
        
        
      </item>
    
      <item>
        <title>Postgres的使用 - 4</title>
        <description>&lt;h2 id=&quot;sequence-的相关操作&quot;&gt;sequence 的相关操作&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;sequence&lt;/strong&gt; 是 Postgres 的一种对象，用来实现自增序列的生成，一般会用来生成表的主键的值。例如下面这个 &lt;em&gt;task&lt;/em&gt; 表的主键就使用一个 sequence &lt;strong&gt;task_id_seq&lt;/strong&gt; 来生成：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;testdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;public.task&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Column&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;Modifiers&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;------------+--------------------------+---------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'task_id_seq'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Postgres 提供了一些操作 sequence 的函数：&lt;em&gt;&lt;a href=&quot;https://www.postgresql.org/docs/9.6/functions-sequence.html&quot;&gt;https://www.postgresql.org/docs/9.6/functions-sequence.html&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt;

&lt;h3 id=&quot;查询-sequence-会生成的下一个值&quot;&gt;查询 sequence 会生成的下一个值&lt;/h3&gt;

&lt;p&gt;如果当前的 session 调用过了 &lt;code class=&quot;highlighter-rouge&quot;&gt;nextval()&lt;/code&gt; 函数，就可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;currval(seqname)&lt;/code&gt; 函数来获取一个 sequence 对象最后一次被 &lt;code class=&quot;highlighter-rouge&quot;&gt;nextval()&lt;/code&gt; 函数返回的值，将其加一就可以得到下一个值。注意，如果在当前 session 中没有对这个 sequence 调用过 &lt;code class=&quot;highlighter-rouge&quot;&gt;nextval()&lt;/code&gt; 函数，那么调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;currval(seqname)&lt;/code&gt; 将返回错误。&lt;/p&gt;

&lt;p&gt;不过，即使当前的 session 没有调用对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;nextval(seqname)&lt;/code&gt;，也可以通过直接查看 relation 的方式起来确定一个 sequence 会生成的下一个值。例如，上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;task_id_seq&lt;/code&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;testdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_id_seq&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;public.task_id_seq&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;Column&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;---------------+---------+---------------------&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;sequence_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_id_seq&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;last_value&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6296&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;start_value&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;increment_by&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9223372036854775807&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;min_value&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;cache_value&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;log_cnt&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;is_cycled&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;is_called&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Owned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;关注其中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;last_value&lt;/code&gt; 字段和 &lt;code class=&quot;highlighter-rouge&quot;&gt;is_called&lt;/code&gt; 字段。&lt;code class=&quot;highlighter-rouge&quot;&gt;last_value&lt;/code&gt; 表示上次被调用的值是多少，这个值会从 &lt;code class=&quot;highlighter-rouge&quot;&gt;start_value&lt;/code&gt; 指定的值开始，一般是 1。 如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;is_called&lt;/code&gt; 的值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;，表示 &lt;code class=&quot;highlighter-rouge&quot;&gt;last_value&lt;/code&gt; 这个值还没有被返回过，会在下次返回。一般来说，当我们刚创建了一个表时，还未向其中插入数据，即&lt;code class=&quot;highlighter-rouge&quot;&gt;last_value&lt;/code&gt; 的值等于 &lt;code class=&quot;highlighter-rouge&quot;&gt;start_value&lt;/code&gt; 的值时，&lt;code class=&quot;highlighter-rouge&quot;&gt;is_called&lt;/code&gt; 的值会设置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;上面这个输出表示 &lt;code class=&quot;highlighter-rouge&quot;&gt;task_id_seq&lt;/code&gt; 最后一次返回的是 &lt;strong&gt;6296&lt;/strong&gt;，下一次返回 6297。&lt;/p&gt;

&lt;h3 id=&quot;重置一个-sequence&quot;&gt;重置一个 sequence&lt;/h3&gt;

&lt;p&gt;常用的有两个方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER SEQUENCE seq RESTART WITH 1;&lt;/code&gt;，将值重置为 1。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT setval('sequence', 1);&lt;/code&gt; 设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;last_value&lt;/code&gt; 的值为 1。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT setval('sequence', 1, false);&lt;/code&gt; 设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;last_value&lt;/code&gt; 的值为 1，&lt;code class=&quot;highlighter-rouge&quot;&gt;is_called&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 08 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/12/08/postgres-note-4/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/12/08/postgres-note-4/</guid>
        
        <category>database</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第37期 - 2018-11-11</title>
        <description>&lt;h2 id=&quot;mysql-high-availability-at-github&quot;&gt;MySQL High Availability at GitHub&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://githubengineering.com/mysql-high-availability-at-github/&quot;&gt;https://githubengineering.com/mysql-high-availability-at-github/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GitHub 将 MySQL 的高可用方案从 VIP + DNS 的方案，迁移到了使用 anycast + GLB + Consul + orchestrator raft 的方案。改进了数据库 down 的切换时间，基本维持在 10 到 13 秒之间。&lt;/p&gt;

&lt;p&gt;没想看到这篇文章过了没几天，GitHub 就遇到了一次存储故障。&lt;/p&gt;

&lt;h2 id=&quot;ubuntu-1810-released&quot;&gt;Ubuntu 18.10 released&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.omgubuntu.co.uk/2018/10/ubuntu-18-10-released-review&quot;&gt;https://www.omgubuntu.co.uk/2018/10/ubuntu-18-10-released-review&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;cost-of-a-join&quot;&gt;Cost of a Join&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.brianlikespostgres.com/cost-of-a-join.html&quot;&gt;https://www.brianlikespostgres.com/cost-of-a-join.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;作者通过测试说明了，做 inner join 的成本其实很低，尤其是加上外键的索引之后。文章中使用的画图服务 plot.ly 不错。&lt;/p&gt;

&lt;h2 id=&quot;why-we-decided-to-rewrite-ubers-driver-app&quot;&gt;Why We Decided to Rewrite Uber’s Driver App&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://eng.uber.com/rewrite-uber-carbon-app/关于迁移的部分很值得一读。&quot;&gt;https://eng.uber.com/rewrite-uber-carbon-app/关于迁移的部分很值得一读。&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Uber 发现一边迁移到新架构，一边做新功能的办法是不行的，最后总会留下遗留的代码，导致迁移失败。而这种迁移失败是 Uber 技术债务的主要原因。&lt;/li&gt;
  &lt;li&gt;迁移会导致不稳定性情况大量出现。&lt;/li&gt;
  &lt;li&gt;在迁移过程中进行新功能开发，总是导致新功能无法被完全实现。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;glb-githubs-open-source-load-balancer&quot;&gt;GLB: GitHub’s open source load balancer&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://githubengineering.com/glb-director-open-source-load-balancer/&quot;&gt;https://githubengineering.com/glb-director-open-source-load-balancer/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GitHub 在使用过程中发现现有的负载均衡方案有几个典型问题，于是决定自己开发了一套，还上了 DPDK。&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/11/11/write-what-i-have-037/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/11/11/write-what-i-have-037/</guid>
        
        <category>cloud</category>
        
        <category>database</category>
        
        <category>linux</category>
        
        <category>distributed-computing</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第36期 - 2018-10-21</title>
        <description>&lt;h2 id=&quot;amazon-rds-for-postgresql-now-supports-iam-authentication&quot;&gt;Amazon RDS for PostgreSQL now supports IAM Authentication&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2018/09/amazon-rds-postgresql-now-supports-iam-authentication/&quot;&gt;https://aws.amazon.com/about-aws/whats-new/2018/09/amazon-rds-postgresql-now-supports-iam-authentication/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;RDS Postgres 9.5 以上的版本可以使用 IAM 来管理用户登陆信息了。&lt;/p&gt;

&lt;h2 id=&quot;postgresql的sql高级特性&quot;&gt;PostgreSQL的SQL高级特性&lt;/h2&gt;

&lt;p&gt;https://mp.weixin.qq.com/s/sFRZ2NjpKTofSZWVgXUG6g&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;介绍了一些 Postgres 的 SQL 高级特性，包括： WITH，批量插入，RETURNING，UPSERT，数据抽样，聚合函数，窗口函数。&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;parallelism-in-postgresql-11&quot;&gt;Parallelism in Postgresql 11&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://speakerdeck.com/macdice/parallelism-in-postgresql-11&quot;&gt;https://speakerdeck.com/macdice/parallelism-in-postgresql-11&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了 postgres 11 引入的并行查询的实现方式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;worker负责执行查询，gather负责合并查询结果。&lt;/li&gt;
  &lt;li&gt;多进程模型，每个worker一个进程。&lt;/li&gt;
  &lt;li&gt;以前pg的每个进程都能访问一个共享的内存区域。现在执行并行查询的进程之间还会使用一个动态的共享内存区，这个内存区在查询结束之后销毁。&lt;/li&gt;
  &lt;li&gt;引入了新的IPC机制。&lt;/li&gt;
  &lt;li&gt;对于seq scan，设计了一种机制来充分利用操作系统的pagecache预读机制。&lt;/li&gt;
  &lt;li&gt;对于index scan，目前只支持btree index，有可能会触发操作系统的pagecache预读机制。&lt;/li&gt;
  &lt;li&gt;加入了多个cost值到planner中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-impact-of-virtualization-on-your-database&quot;&gt;The Impact of Virtualization on Your Database&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.scylladb.com/2018/06/21/impact-virtualization-database/&quot;&gt;https://www.scylladb.com/2018/06/21/impact-virtualization-database/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ScyllaDB 测试了 AWS 新推出的 baremetal 实例 i3.metal，价格和 i3.16xlarge 一样。i3.metal 比 i3.16xlarge 能提供更多的 CPU 和内存。虽然只增加了 12% 的CPU，但是因为移除了虚拟化层，最后得到的写吞吐性能提升达到了 31%，读时延则最多达到了 8 倍，并且读时延更加稳定。&lt;/p&gt;

&lt;h2 id=&quot;new--managed-databases-for-amazon-lightsail&quot;&gt;New – Managed Databases for Amazon Lightsail&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-managed-databases-for-amazon-lightsail/&quot;&gt;https://aws.amazon.com/blogs/aws/new-managed-databases-for-amazon-lightsail/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AWS Lightsail 现在支持支持数据库实例了，最便宜的版本只要 15 美元一个月。&lt;/p&gt;

&lt;h2 id=&quot;postgresql-11-released&quot;&gt;PostgreSQL 11 Released!&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.postgresql.org/about/news/1894/&quot;&gt;https://www.postgresql.org/about/news/1894/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;带来好多新特性，以及性能提升。&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/10/21/write-what-i-have-036/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/10/21/write-what-i-have-036/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>database</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第35期 - 2018-09-30</title>
        <description>&lt;h2 id=&quot;postgresql-10-identity-columns-explained&quot;&gt;PostgreSQL 10 identity columns explained&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.2ndquadrant.com/postgresql-10-identity-columns/&quot;&gt;https://blog.2ndquadrant.com/postgresql-10-identity-columns/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Postgres 10 引入了一个新特性：identity columns。用于生成符合SQL标准的数字递增式 id 列。在这之前postgres的id列一般是使用sequence来实现 id 列，但是这种实现方式引入了两个对象，一个是表本身，另外一个是表所使用的sequence。使用新的 identity column 特性之后，就不存在单独的sequence序列了，对于数据库的管理来说更为简单且不容易出错。文中就举了几个方面的例子说明了改动前后的区别。&lt;/p&gt;

&lt;h2 id=&quot;a-missing-link-in-postgres-11-fast-column-creation-with-defaults&quot;&gt;A Missing Link in Postgres 11: Fast Column Creation with Defaults&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://brandur.org/postgres-default&quot;&gt;https://brandur.org/postgres-default&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Postgres 11 引入了一种新的实现来支持 ALTER TABLE ADD COLUMN NOT NULL DEFAULT 这样的修改。原来这种修改需要使用 EXCLUSIVE LOCK锁住整个表，然后对表执行rewrite。新的实现是在 pg_attribute 中加入两列：atthasmissing 和 attmissingvalue，当数据库要返回一行数据时，如果一个列的值不存在，那么就会检查这两列，返回用户设置的默认值。新插入的行则直接设置指定的默认值。&lt;/p&gt;

&lt;h2 id=&quot;when-should-i-use-amazon-aurora-and-when-should-i-use-rds-mysql&quot;&gt;When Should I Use Amazon Aurora and When Should I use RDS MySQL?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.percona.com/blog/2018/07/17/when-should-i-use-amazon-aurora-and-when-should-i-use-rds-mysql/&quot;&gt;https://www.percona.com/blog/2018/07/17/when-should-i-use-amazon-aurora-and-when-should-i-use-rds-mysql/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Percona公司写的文章，告诉你什么时候应该选RDS，什么时候应该选Aurora。文章最后有 TL;DR，可以直接看结果。简单的总结一下就是，Aurora属于NewSQL，虽然兼容MySQL协议，但是由于架构不同，所以性能、费用、兼容性，都和RDS MySQL有不一样的地方。你可以认为Aurora 是 TiDB，而RDS就是MySQL。&lt;/p&gt;

&lt;h2 id=&quot;pg_cron-run-periodic-jobs-in-postgresql&quot;&gt;pg_cron: Run periodic jobs in PostgreSQL&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2016/09/09/pgcron-run-periodic-jobs-in-postgres/&quot;&gt;https://www.citusdata.com/blog/2016/09/09/pgcron-run-periodic-jobs-in-postgres/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Citus 出的一个支持在pg中执行cron任务的扩展：https://github.com/citusdata/pg_cron 。用起来很方便啊。而且支持备机变成主之后，自动开始运行cron job。&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/09/30/write-what-i-have-035/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/09/30/write-what-i-have-035/</guid>
        
        <category>cloud</category>
        
        <category>database</category>
        
        
      </item>
    
      <item>
        <title>想到什么写什么周报 第34期 - 2018-09-24</title>
        <description>&lt;h2 id=&quot;introducing-the-tink-cryptographic-software-library&quot;&gt;Introducing the Tink cryptographic software library&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://opensource.googleblog.com/2018/08/introducing-tink-cryptographic-library.html&quot;&gt;https://opensource.googleblog.com/2018/08/introducing-tink-cryptographic-library.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google开源的Tink密码学库，支持多种语言，设计思想是提供受限的API功能，防止由于误用接口导致的安全问题。&lt;/p&gt;

&lt;h2 id=&quot;helping-go-developers-build-better-cloud-apps-faster&quot;&gt;Helping Go developers build better cloud apps faster&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/helping-go-developers-build-better-cloud-apps-faster/&quot;&gt;https://azure.microsoft.com/en-us/blog/helping-go-developers-build-better-cloud-apps-faster/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;微软介绍了自己为了让用户使用Go在Azure上开发云原生应用所作的工作。主要包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2月份开源的Go SDK &lt;a href=&quot;https://github.com/Azure/azure-sdk-for-go&quot;&gt;https://github.com/Azure/azure-sdk-for-go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;以及针对几个专门服务开发的SDK
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/Azure/azure-service-bus-go&quot;&gt;https://github.com/Azure/azure-service-bus-go&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/Azure/azure-event-hubs-go&quot;&gt;https://github.com/Azure/azure-event-hubs-go&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/Azure/azure-storage-blob-go&quot;&gt;https://github.com/Azure/azure-storage-blob-go&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Buffalo项目：&lt;a href=&quot;https://gobuffalo.io/en&quot;&gt;https://gobuffalo.io/en&lt;/a&gt;。用于帮助开发者快速开发web应用，帮你生成不同功能的脚手架代码，帮你部署到Azure上面。
    &lt;ul&gt;
      &lt;li&gt;可以查看这个介绍视频：&lt;a href=&quot;https://channel9.msdn.com/shows/azure-friday/Go-on-Azure-Part-7-Build-a-Go-app-with-Buffalo-and-deploy-to-Azure&quot;&gt;https://channel9.msdn.com/shows/azure-friday/Go-on-Azure-Part-7-Build-a-Go-app-with-Buffalo-and-deploy-to-Azure&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;另外，我发现 gobuffalo下，有挺多Go的库。&lt;a href=&quot;https://github.com/gobuffalo&quot;&gt;https://github.com/gobuffalo&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;announcing-project-athens-and-gophersource-for-the-go-community&quot;&gt;Announcing Project Athens and GopherSource for the Go community&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://open.microsoft.com/2018/08/28/announcing-project-athens-gophersource-go-community/&quot;&gt;https://open.microsoft.com/2018/08/28/announcing-project-athens-gophersource-go-community/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;微软发布的Go Module Proxy Server，目前还处在早期阶段。&lt;/p&gt;

&lt;h2 id=&quot;googles-approach-to-observability&quot;&gt;Google’s Approach to Observability&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/observability/googles-approach-to-observability-frameworks-c89fc1f0e058&quot;&gt;https://medium.com/observability/googles-approach-to-observability-frameworks-c89fc1f0e058&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了Google内部对于tracing的使用理念，也就是现在开始流行的opentracing等方案。&lt;/p&gt;

&lt;h2 id=&quot;managing-resources-for-large-scale-testing&quot;&gt;Managing resources for large-scale testing&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://code.fb.com/android/managing-resources-for-large-scale-testing/&quot;&gt;https://code.fb.com/android/managing-resources-for-large-scale-testing/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了Facebook的One World，一个大规模的测试服务，连接了物理设备和模拟器，为开发人员提供方便的测试环境，设置可以让开发人员把自己的设备接入进来进行测试。&lt;/p&gt;

&lt;h2 id=&quot;postgres-11---a-first-look&quot;&gt;Postgres 11 - a First Look&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.craigkerstiens.com/2018/09/20/postgresql-11-a-first-look/&quot;&gt;http://www.craigkerstiens.com/2018/09/20/postgresql-11-a-first-look/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;介绍了即将发布的Postgres 11的一些新特性，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以使用 exit 或者 quit 退出psql。&lt;/li&gt;
  &lt;li&gt;add column with default 提升了性能，不用害怕migration的时候导致全表卡住。&lt;/li&gt;
  &lt;li&gt;性能的提升，包括并发和初步的JIT支持。&lt;/li&gt;
  &lt;li&gt;继续改进统计功能。&lt;/li&gt;
  &lt;li&gt;引入了 keeping standbys warm 的功能。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 24 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://diabloneo.github.io//2018/09/24/write-what-i-have-034/</link>
        <guid isPermaLink="true">http://diabloneo.github.io//2018/09/24/write-what-i-have-034/</guid>
        
        <category>cloud</category>
        
        <category>golang</category>
        
        <category>storage</category>
        
        <category>database</category>
        
        <category>security</category>
        
        
      </item>
    
  </channel>
</rss>
