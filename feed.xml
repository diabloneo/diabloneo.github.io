<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffee, Coke and Code</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 23 Aug 2017 10:53:44 +0800</pubDate>
    <lastBuildDate>Wed, 23 Aug 2017 10:53:44 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>2017 OpenStack Days China Day 1</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/imgs/00010_2017_openstack_days_china_gate.jpg&quot; alt=&quot;Gate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2017 OpenStack Days China于7月24日和7月25日在北京国家会议中心举行。会议的目标依旧是推广OpenStack在中国的普及。人数大约2000，但是根据去年有来的人说，人数没有去年多。&lt;/p&gt;

&lt;p&gt;第一天的Keynote分为两个类型，基金会的演讲和5月份Boston summit上的差不多，只是略做修改（比如人工智能提到了百度等）。而赞助商的演讲基本就是广告了。第一天的keynote听下来，你会发现本土厂商的keynote，不论在幻灯片的制作还是演讲上，都和国外厂商有差距，感觉不是很重视。唯一的例外是腾讯，腾讯利用keynote发布了TStack，幻灯片水平和演讲水平确实不错。&lt;/p&gt;

&lt;p&gt;宣传方面，来进行宣传的基本都是本土厂商，包括我所在的XSKY，看到的外国厂商貌似只有Intel, RedHat, NetApp。本土厂商中最让我感到意外的是腾讯。腾讯在本次会议上推出了TStack产品，也就是腾讯定制的OpenStack产品以及相关的服务。搜索了一下，发现腾讯在发布TStack的同时，还向基金会提交了superuser的采访稿（http://superuser.openstack.org/articles/tencent-openstack/），准备参加11月份悉尼summit的superuser评选，说明腾讯对这次TStack发布做了充分的准备。TStack一开始是作为腾讯的内部私有云服务来建设的，目前的版本是基于K版，其内部集群运行了4年多，可用性达到99.99%，运行了5000个物理机和10000+个虚拟机，是国内最大的私有云平台之一（这应该也是他们参加superuser评选的资本）。除了自己用以外，腾讯还发展了一些TStack的用户，比如著名的0元中标的厦门政务云。根据产品介绍页，腾讯这次是产品和服务一起推出，虽然版本看起来有点旧，但是毕竟是个超级大厂，想必会极大的冲击国内的OpenStack市场。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00011_tstack_page1.jpg&quot; alt=&quot;TStack1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00012_tstack_page2.jpg&quot; alt=&quot;TStack2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我也听了几场技术分享，其中最热门的是EasyStack的一个分享：OpenStack对vCenter存量虚拟机的纳管和迁移实践。来这场分享的听众很多，说明大家对VMWare和OpenStack共存是有很大需求的。从分享中也可以发现EasyStack做了很多这方面的工作。&lt;/p&gt;

&lt;p&gt;我第二天没去，所以没有第二天相关的内容。&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Jul 2017 00:00:00 +0800</pubDate>
        <link>/2017/07/26/2017-openstack-days-china-day1.html</link>
        <guid isPermaLink="true">/2017/07/26/2017-openstack-days-china-day1.html</guid>
        
        
      </item>
    
      <item>
        <title>OpenStack Summit 2017 Boston观后感</title>
        <description>&lt;p&gt;这次summit已经不强调OpenStack本身的技术了，所有的核心项目都已经很成熟，各大厂商也把高可用和在线升级做得很成熟了。而且，OpenStack已经是私有云事实上的标准，除非你选VMWare产品，否则只能选择OpenStack。&lt;/p&gt;

&lt;p&gt;在我看来，OpenStack summit这次强调的重点有两个，一个是open，另一个是和容器的结合。&lt;/p&gt;

&lt;h1 id=&quot;open&quot;&gt;Open&lt;/h1&gt;

&lt;p&gt;Open，在OpenStack的解释里有两个，一个是open source，另一个是open community。&lt;/p&gt;

&lt;p&gt;Open source代表着透明、用户可控，也代表着运维困难等，是一些被大家广泛接受的观点。OpenStack基金会这次还在现场连线采访了斯诺登，就是为了向用户传递open source方面的价值。不过，我觉得这些观点并不能很好的吸引用户。&lt;/p&gt;

&lt;p&gt;Open community是我觉得更有意思的一个方面。基金会COO Mark Collier在第二天的keynote Home of Open {Composable} Infrastructure 花了很大的篇幅来讲这个问题。OpenStack是一个很活跃的社区，Kubernetes是另一个很活跃的社区，两个社区之间是否能有合作呢？合作又会涉及到哪些方面呢？比如在运营方面，Mark觉得很多开源社区的运营都和OpenStack社区类似，其他社区可以学习OpenStack这七年来积累的社区运营经验。在技术方面，是否可以直接利用其他社区的产品，避免重复造轮子？&lt;/p&gt;

&lt;p&gt;在技术方面，Mark举了个很好的例子，像Kubernetes这样的应用是需要解决存储问题的，而OpenStack已经花了7年的时间来解决存储问题，Cinder项目可以对接80种不同的后端，Kubernetes可以通过对接Cinder来解决存储问题，这样就不用重复对接不同存储后端这个工作了。目前Kubernetes也确实这么做了。&lt;/p&gt;

&lt;p&gt;我觉得上面这个例子说明了OpenStack现在的地位，以及基金会对它的期望。现在的OpenStack就像是当年的Linux，已经开始成为一种标准，一种数据中心管理的标准：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当年，你要管理一个服务器上的资源，你就给它装上Linux。Linux负责管理一个服务器上的计算、网络和存储资源。&lt;/li&gt;
  &lt;li&gt;现在，你要管理一个数据中心的资源，你就给它装上OpenStack。OpenStack负责管理一个数据中心里的计算、网络和存储资源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;预计，OpenStack会强化自己作为数据中心OS的路线。&lt;/p&gt;

&lt;h1 id=&quot;容器&quot;&gt;容器&lt;/h1&gt;

&lt;p&gt;这两年来，容器技术的发展绝对是对OpenStack发展的一大威胁。不论是用户，还是OpenStack社区，都对容器技术如何与OpenStack结合感到困惑。但是，今年，这个问题似乎得到了解决，不过并不是通过技术方案来解决，而是通过策略。&lt;/p&gt;

&lt;p&gt;这次的summit上，社区和主要厂商都把kubernetes、mesos、swarm等看成是应用管理平台，这个平台通过容器技术可以实现应用在混合云上的编排需求。OpenStack则作为私有云的管理平台，向K8s提供资源，但是不参与应用的管理。类似下图这样的架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00009_hybrid_cloud_architecture.jpg&quot; alt=&quot;Hybrid Cloud Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说，OpenStack打算脱离应用管理平台，各大厂商目前也在这么做，比如Red Hat和Ubuntu。&lt;/p&gt;

&lt;p&gt;另外，既然把容器管理平台作为连接私有云和公有云的重要工具，那么这个平台就得解决计算、网络和存储这三种资源在私有云和公有云之间迁移的问题。计算很简单，计算是无状态的，私有云的CPU和公有云的CPU可以做同样的事情，只需要一定的启停时间。网络，可以通过修改DNS或者IP地址达到目的，流量还是可以到达你服务所在的位置。存储，只有存储是最难的。
混合云的存储问题，主要还是在于数据的存储位置是很难改变的，成本太高。存储决定了应用的状态，所以存储有一致性等各种要求。要想在混合云的场景里解决这个问题，要么是把数据复制一份，这就存在数据一致性和存储成本的问题；要么是忍受跨WAN的数据访问带来的延迟和吞吐的降低。这个问题应该来说，还没有好的解决方案。但是，从另一方面来说，这个问题应该不是一个太大的问题，公有云一直是推行多region数据不相通的运作方式，大家也都用得好好的。所以，使用容器管理平台来连接私有云和公有云时，还是需要考虑数据的存储位置。&lt;/p&gt;

&lt;p&gt;虽然数据存储不可能那么灵活，Red Hat和AWS还是做了一个尝试。在Red Hat summit上，发布了AWS broker类容器。这类容器是AWS公有云服务的代理容器，创建一个这样的容器，就等于在AWS创建了一个对应的服务，应用连接到这个容器就可以直接访问AWS服务。所以应用不用关心自己在哪里运行，访问的数据始终是在AWS上。这是一个很好的尝试。&lt;/p&gt;

&lt;p&gt;总的来说，使用容器来调度应用也是个事实上的标准了，OpenStack已经没有办法在这个领域中占到地盘了（所以我对Magnum项目的前途感到十分担忧啊）。如何和容器更好的结合，肯定是未来一两年内OpenStack要做的主要事情。&lt;/p&gt;
</description>
        <pubDate>Fri, 26 May 2017 00:00:00 +0800</pubDate>
        <link>/2017/05/26/openstack-summit-2017-boston-review.html</link>
        <guid isPermaLink="true">/2017/05/26/openstack-summit-2017-boston-review.html</guid>
        
        
      </item>
    
      <item>
        <title>Golang源码阅读笔记 -- go build(3)</title>
        <description>&lt;p&gt;在&lt;a href=&quot;/2017/02/26/golang-code-reading-notes-1.html&quot;&gt;第一篇文章go build(1)&lt;/a&gt;中，我们提到了&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;函数。该函数有两个主要的步骤，一个是调用&lt;code class=&quot;highlighter-rouge&quot;&gt;buildContext.Import()&lt;/code&gt;方法来获得要构建的package的基本信息，这个我们在&lt;a href=&quot;/2017/02/27/golang-code-reading-notes-2.html&quot;&gt;上一篇文章go build(2)&lt;/a&gt;中已经说明了其内部逻辑，另外一个调用是&lt;code class=&quot;highlighter-rouge&quot;&gt;p.load(stk, bp, err)&lt;/code&gt;，也就是载入这个package的依赖。本文要看的是第二个步骤的具体过程。&lt;/p&gt;

&lt;h1 id=&quot;cmdgopackage对象的load方法&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd/go.Package&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;方法&lt;/h1&gt;

&lt;p&gt;该方法位于&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件中。&lt;/p&gt;

&lt;h2 id=&quot;调用说明&quot;&gt;调用说明&lt;/h2&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;函数中执行的代码是&lt;code class=&quot;highlighter-rouge&quot;&gt;p.load(stk, bp, err)&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd/go.Package&lt;/code&gt;对象，这个是表示一个要构建的package。相对的&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Package&lt;/code&gt;表示一个被import的package。前者包含的信息更多。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stk&lt;/code&gt;是一个表示依赖深度的栈，用于记录import路径的一个栈。通过栈的&lt;strong&gt;push&lt;/strong&gt;和&lt;strong&gt;pop&lt;/strong&gt;操作，不断的记录import的路径，栈顶是当前正在处理的package，栈顶下的那个package则import了栈顶package。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bp&lt;/code&gt; 是&lt;code class=&quot;highlighter-rouge&quot;&gt;buildContext.Import&lt;/code&gt;方法返回的对象，是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Package&lt;/code&gt;对象，包含了要构建的package的基本信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;load方法的内部逻辑&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;方法的内部逻辑&lt;/h2&gt;

&lt;p&gt;强调一下，这里我们还是以最常见的import path形式，类似&lt;strong&gt;goexample/hello&lt;/strong&gt;这样，来看&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;方法的内部逻辑。&lt;/p&gt;

&lt;h3 id=&quot;拷贝信息&quot;&gt;拷贝信息&lt;/h3&gt;

&lt;p&gt;首先执行&lt;code class=&quot;highlighter-rouge&quot;&gt;p.copyBuild(bp)&lt;/code&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Package&lt;/code&gt;对象的内容拷贝到&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;，也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd/go.Package&lt;/code&gt;中，也会把&lt;code class=&quot;highlighter-rouge&quot;&gt;bp&lt;/code&gt;赋值给&lt;code class=&quot;highlighter-rouge&quot;&gt;p.build&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;构建结果存放位置的处理&quot;&gt;构建结果存放位置的处理&lt;/h3&gt;

&lt;p&gt;区分两个情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;package的名称是&lt;strong&gt;main&lt;/strong&gt;，也就是构建结果是一个可执行程序。这个时候构建结果的存放目录是在一个&lt;em&gt;bin&lt;/em&gt;目录下，最常见的情况就是&lt;em&gt;GOPATH/bin&lt;/em&gt;目录，输出的文件名是package的目录名。&lt;/li&gt;
  &lt;li&gt;如果是非&lt;strong&gt;main&lt;/strong&gt;的package，那么一般使用&lt;code class=&quot;highlighter-rouge&quot;&gt;p.build.PkgObj&lt;/code&gt;这个路径作为目标路径。这个路径在上一篇文章中有描述了生成过程，类似&lt;em&gt;GOPATH/pkg/linux_amd64/goexample/hello.a&lt;/em&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;依赖的预处理&quot;&gt;依赖的预处理&lt;/h3&gt;

&lt;p&gt;之前已经得到了要构建的package的依赖，保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;p.build.Imports&lt;/code&gt;中，又被拷贝到&lt;code class=&quot;highlighter-rouge&quot;&gt;p.Imports&lt;/code&gt;中。这些只是源码中写的&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;语句的依赖，构建过程还需要加上其他的内部依赖。对于最常见的情况，还需要把&lt;strong&gt;runtime&lt;/strong&gt;增加到依赖中。其他的情况会根据是否有cgo、架构平台、是否是标准库以及命令行参数等条件来增加相应的依赖。经过预处理的依赖存放在变量&lt;code class=&quot;highlighter-rouge&quot;&gt;importPaths&lt;/code&gt;中。&lt;/p&gt;

&lt;h3 id=&quot;文件的预处理&quot;&gt;文件的预处理&lt;/h3&gt;

&lt;p&gt;将这个package中的go文件和非go文件都生成绝对路径，保存到相应的变量中并按照文件名排序。&lt;/p&gt;

&lt;p&gt;检查package中的文件名是否有重名，&lt;strong&gt;这个要求是忽略大小的情况下也不能重名&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;处理依赖&quot;&gt;处理依赖&lt;/h3&gt;

&lt;p&gt;接下来，&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;方法开始处理依赖，也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;importPaths&lt;/code&gt;变量中的package。这里会遍历每个ImportPath，然后依次处理。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先，跳过ImportPath为&lt;strong&gt;C&lt;/strong&gt;的package，因为这是cgo的package，不属于依赖。&lt;/li&gt;
  &lt;li&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;p1 := loadImport(path, p.Dir, p, stk, p.build.ImportPos[path], useVendor)&lt;/code&gt;。看到&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;函数是不是觉得很熟悉？没错，这个就是在&lt;a href=&quot;% post_url 2017-02-26-golang-code-reading-notes-1 %}&quot;&gt;文章go build(1)&lt;/a&gt;中提到的&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;函数，也就是调用了我们正在讲解的这个&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd/go.Package&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;方法。所以，这里是一个递归调用，不过同样path的package只会收集一次信息，之后再遇到会直接从cache返回，这个在&lt;a href=&quot;% post_url 2017-02-26-golang-code-reading-notes-1 %}&quot;&gt;文章go build(1)&lt;/a&gt;中已经提到过了。&lt;/li&gt;
  &lt;li&gt;判断一下import进来的package的名称是否是&lt;strong&gt;main&lt;/strong&gt;，是的话就报错。&lt;/li&gt;
  &lt;li&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;p1&lt;/code&gt;加入到&lt;code class=&quot;highlighter-rouge&quot;&gt;deps&lt;/code&gt;这个map中，这样&lt;code class=&quot;highlighter-rouge&quot;&gt;deps&lt;/code&gt;就是一个包含所有package &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;的依赖的map。同样，也把&lt;code class=&quot;highlighter-rouge&quot;&gt;p1&lt;/code&gt;加入到&lt;code class=&quot;highlighter-rouge&quot;&gt;imports&lt;/code&gt;这个slice中，这样&lt;code class=&quot;highlighter-rouge&quot;&gt;imports&lt;/code&gt;就是一个包含所有package &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;的依赖的slice。&lt;/li&gt;
  &lt;li&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;p1.Incomplete&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，那么也设置&lt;code class=&quot;highlighter-rouge&quot;&gt;p.Incomplete&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;Incomplete&lt;/code&gt;表示在载入这个package或者它的依赖时出现错误。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;经过上面的处理，就已经递归的载入了package &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;的所有依赖，这些依赖的相关信息会被记录到&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;中，&lt;code class=&quot;highlighter-rouge&quot;&gt;p.imports = imports&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;p.deps&lt;/code&gt;会是排序过的&lt;code class=&quot;highlighter-rouge&quot;&gt;deps&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;计算buildid&quot;&gt;计算BuildID&lt;/h3&gt;

&lt;p&gt;对于编译一个package而言，&lt;strong&gt;buildID&lt;/strong&gt;是根据这个package的所有文件的文件名，和这个package的所有依赖的ImportPath以及依赖的buildID，计算出来的一个SHA-1值，主要是用来判断一个package是否需要重新构建。这个在后面会讲到。&lt;/p&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;完成上面这些步骤后，这个package的依赖也就都载入成功了，并且buildID也已经计算完成。&lt;/p&gt;

&lt;h1 id=&quot;reusepackage函数&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reusePackage&lt;/code&gt;函数&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reusePackage(p *Package, stk *importStack)&lt;/code&gt;函数位于文件&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件中。我们已经知道，这个函数会在&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;中被调用，用来判断是否有循环应用的情况。现在我们来仔细看一下这个逻辑。&lt;/p&gt;

&lt;p&gt;首先，看一下&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;中的代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func loadImport(path, srcDir string, parent *Package, stk *importStack, importPos []token.Position, mode int) *Package {
    ...
    importPath := path
    ...
    if p := packageCache[importPath]; p != nil {
        ...
        return reusePackage(p, stk)
    }

    p := new(Package)
    p.local = isLocal
    p.Importpath = importPath
    packageCache[importPath] = p
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从上面代码可以看出，在发现现在要import的path已经被处理过了之后，就可以直接返回cache中的&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd/go.Package&lt;/code&gt;对象，但是返回前要先调用&lt;code class=&quot;highlighter-rouge&quot;&gt;reusePackage&lt;/code&gt;函数检查是否循环引用。如果这个path不在cache中，那么创建新的package之后，立刻加入到cache。&lt;/p&gt;

&lt;p&gt;接下来看一下&lt;code class=&quot;highlighter-rouge&quot;&gt;reusePackage&lt;/code&gt;中是如何检查循环引用的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func reusePackage(p *Package, stk *importStack) *Package {
    if p.imports == nil {
        // import cycle
    }
    ...
    return p
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上一节中，我们看到了，&lt;code class=&quot;highlighter-rouge&quot;&gt;p.load&lt;/code&gt;这个方法在收集了所有的依赖的信息后，才会设置自己的&lt;code class=&quot;highlighter-rouge&quot;&gt;p.imports&lt;/code&gt;变量。所以，只要&lt;code class=&quot;highlighter-rouge&quot;&gt;p.imports&lt;/code&gt;这个变量还是空的，就说明这个package还没有处理完依赖，所以只要在处理依赖的过程中再次遇到自己，就会触发&lt;code class=&quot;highlighter-rouge&quot;&gt;reusePackage&lt;/code&gt;函数的调用，就会看到&lt;code class=&quot;highlighter-rouge&quot;&gt;p.imports == nil&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;回到packagesanderrors函数&quot;&gt;回到&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesAndErrors&lt;/code&gt;函数&lt;/h1&gt;

&lt;p&gt;现在回到&lt;a href=&quot;% post_url 2017-02-26-golang-code-reading-notes-1 %}&quot;&gt;文章go build(1)&lt;/a&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesAndErrors&lt;/code&gt;函数。我们回顾一下到目前为止走过的流程：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;packagesAndErrors()
    loadPackage()
        loadImport()
            reusePackage()
            buildContext.Import()
            p.load()
    computeStale()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到目前为止，我们已经分析了从&lt;code class=&quot;highlighter-rouge&quot;&gt;loadPackage()&lt;/code&gt;函数开始往下的流程。现在，在&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesAndErrors&lt;/code&gt;函数中，我们通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;loadPackage&lt;/code&gt;函数，得到了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd/go.Package&lt;/code&gt;对象&lt;code class=&quot;highlighter-rouge&quot;&gt;pkg&lt;/code&gt;。下面就开始调用&lt;code class=&quot;highlighter-rouge&quot;&gt;computeStale(pkg)&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;computestale函数&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;computeStale&lt;/code&gt;函数&lt;/h2&gt;

&lt;p&gt;这个函数会判断一个package是否需要重新构建，也就是是否stale。如果需要，就设置&lt;code class=&quot;highlighter-rouge&quot;&gt;pkg.Stale&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;。判断的工作是由&lt;code class=&quot;highlighter-rouge&quot;&gt;isStale(p *Package) (bool, string)&lt;/code&gt;函数完成的，这个函数位于&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件中。&lt;/p&gt;

&lt;p&gt;判断stale的逻辑在&lt;code class=&quot;highlighter-rouge&quot;&gt;isStale&lt;/code&gt;函数的注释中写的非常清楚，包括演变过程，主要是基于buildID和文件修改时间来判断的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;buildID的方法如下：编译输出时，将这个package的buildID记录到目标文件中，在&lt;code class=&quot;highlighter-rouge&quot;&gt;isStale&lt;/code&gt;函数中，会读取目标文件中保存的buildID，如果和现在package中计算出来的buildID不同，那么就需要重新构建。&lt;/li&gt;
  &lt;li&gt;基于文件修改时间的方法如下：只要构建package有关的文件中，有一个文件的修改时间比目标文件晚，那么就需要重新构建。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面这个是最基本的方法介绍，&lt;code class=&quot;highlighter-rouge&quot;&gt;isStale&lt;/code&gt;函数中还考虑了命令行参数，以及文件是否存在等情况。&lt;/p&gt;

&lt;h2 id=&quot;小结-1&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesAndErrors&lt;/code&gt;函数调用完&lt;code class=&quot;highlighter-rouge&quot;&gt;computeStale&lt;/code&gt;之后，就返回所获取到的packages对象。&lt;/p&gt;

&lt;p&gt;因为&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesForBuild&lt;/code&gt;函数是调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesAndErrors&lt;/code&gt;函数来获得packages，如果获取的过程没有错误，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesForBuild&lt;/code&gt;就返回获取到的packages。我们又回到了&lt;code class=&quot;highlighter-rouge&quot;&gt;runBuild&lt;/code&gt;函数中。&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Feb 2017 00:00:00 +0800</pubDate>
        <link>/2017/02/28/golang-code-reading-notes-3.html</link>
        <guid isPermaLink="true">/2017/02/28/golang-code-reading-notes-3.html</guid>
        
        
      </item>
    
      <item>
        <title>Golang源码阅读笔记 -- go build(2)</title>
        <description>&lt;p&gt;在&lt;a href=&quot;/2017/02/26/golang-code-reading-notes-1.html&quot;&gt;上一篇文章go build(1)&lt;/a&gt;中，我们已经来到了&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件的&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;函数中，在这个函数里，会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;buildContext.Import()&lt;/code&gt;方法来载入一个package的信息。本文会深入的看一下这个&lt;code class=&quot;highlighter-rouge&quot;&gt;buildContext.Import()&lt;/code&gt;中的逻辑。&lt;/p&gt;

&lt;h1 id=&quot;gobuildcontext的import方法&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Context&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;方法&lt;/h1&gt;

&lt;p&gt;这个方法位于&lt;em&gt;go/build/build.go&lt;/em&gt;文件中，是&lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt;对象的一个导出接口。该接口的声明是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ctx *Context) Import(path string, srcDir string, mode ImportMode) (*Package, error)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;它的参数含义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; 表示这个package的ImportPath。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;srcDir&lt;/code&gt; 当&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;是一个local path的时候，相对路径是以&lt;code class=&quot;highlighter-rouge&quot;&gt;srcDir&lt;/code&gt;开始的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mode&lt;/code&gt; 是用来控制&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;方法的行为的。目前有三个值:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FindOnly&lt;/code&gt; 只查找package所在的目录，不读取其中的源码的内容&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ImportComment&lt;/code&gt; 解析import comment。Golang允许在&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;语句之后跟随一个有含义的comment，具体的功能见&lt;a href=&quot;http://golang.org/s/go14customimport&quot;&gt;http://golang.org/s/go14customimport&lt;/a&gt;。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IgnoreVendor&lt;/code&gt; 忽略Vendor目录的搜索。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;方法很长，这里还是只描述最常见情况下的代码路径，也就是参数&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;的值是&lt;em&gt;goexample/hello&lt;/em&gt;这样的形式，且没有vendor目录，而&lt;code class=&quot;highlighter-rouge&quot;&gt;srcDir&lt;/code&gt;的值是命令执行时的当前工作目录。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;方法工作就是生产一个&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Package&lt;/code&gt;对象（在本文中我们简称为&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象，在上一篇文章中还有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd/go.Package&lt;/code&gt;对象，不要弄混了）。&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;方法的逻辑主要分为几块，我们分别来看。&lt;/p&gt;

&lt;h2 id=&quot;设置构建结果的目标路径&quot;&gt;设置构建结果的目标路径&lt;/h2&gt;

&lt;p&gt;当要构建一个package的时候，就要知道构建结果的存放位置，包括最终结果和中间结果。这里首先会设置设置两个变量的值。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pkgtargetroot&lt;/code&gt;，这个是存放结果的根目录，这个目录下会存放很多不同的package的构建结果。在Golang的环境中，你可以在GOPATH和GOROOT目录下分别找到&lt;strong&gt;pkg/&lt;/strong&gt;目录，这个目录就是存放构建结果的地方，其中，&lt;strong&gt;GOROOT下的pkg目录中存放的是Golang的标准库构建的结果，都是以arcihve的文件格式存放的，当你的代码引用了标准库时，标准库可以不用重新编译，直接进行链接&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pkgtargetroot&lt;/code&gt;的值是由&lt;em&gt;pkg/&lt;/em&gt;前缀、操作系统、架构和suffix组成的。最常用的情况下，使用&lt;strong&gt;gc&lt;/strong&gt;编译器（也就是Golang官方编译器，另一种是gccgo），没有suffix，是linux系统和x86_64架构，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;pkgtargetroot&lt;/code&gt;的值是&lt;em&gt;pkg/linux_amd64&lt;/em&gt;。这个目录就这个最常用的情况下，package存放构建结果的地方。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pkgtargetroot&lt;/code&gt;下还要为每个package建立单独的子目录用于存放构建结果。这里是否有子目录，完全取决于package的ImportPath，也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;方法的&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;参数。比如我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;goexample/hello&lt;/code&gt;，最终生成的构建目标文件路径为&lt;em&gt;pkg/linux_amd64/goexample/hello.a&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;最后，当&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;返回前，会把这些路径设置到&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象中。其中&lt;code class=&quot;highlighter-rouge&quot;&gt;PkgObj&lt;/code&gt;成员用来存放package构建结果的完整存放路径，类似&lt;em&gt;GOPATH/pkg/linux_amd64/goexample/hello.a&lt;/em&gt;。&lt;/p&gt;

&lt;h2 id=&quot;查找package的位置&quot;&gt;查找package的位置&lt;/h2&gt;

&lt;p&gt;接下来，&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;方法会根据是否是local import来查找package的位置，这里我们只看非local import的情况。按照下面的顺序来查找：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果允许查找vendor目录，就先查找vendor目录。这里我们先忽略。&lt;/li&gt;
  &lt;li&gt;如果GOROOT不为空，那么就先查找GOROOT的src目录下是否存在&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;的值这个目录，就是&lt;em&gt;GOROOT/src/goexample/hello&lt;/em&gt;这个目录，找到则跳转到&lt;code class=&quot;highlighter-rouge&quot;&gt;Found&lt;/code&gt;标签。&lt;/li&gt;
  &lt;li&gt;遍历所有的GOPATH，进行和上面一样的查找，找到则跳转到&lt;code class=&quot;highlighter-rouge&quot;&gt;Found&lt;/code&gt;标签。&lt;/li&gt;
  &lt;li&gt;如果上面都找不到，那么说明这个package不存在，也就是你提供的ImportPath指向了一个不存在的目录，那么就在这里返回失败。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;找到了之后，设置&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;Root&lt;/code&gt;为包含这个package的GOROOT或者GOPATH的路径，设置&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;Dir&lt;/code&gt;为这个package的完整路径（绝对路径）。&lt;/p&gt;

&lt;h2 id=&quot;found标签下的处理&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Found&lt;/code&gt;标签下的处理&lt;/h2&gt;

&lt;p&gt;现在，已经找到了package所在的位置。接下来就要处理package的内容。在&lt;code class=&quot;highlighter-rouge&quot;&gt;Found&lt;/code&gt;标签开始的地方，先读取package目录下的所有文件，然后针对每个文件进行一段复杂的处理。所有的文件都处理过后，就收集了这个package的绝大部分信息，然后再进行一些汇总处理。这里的重点是针对每个文件的处理过程。&lt;/p&gt;

&lt;p&gt;针对每个文件的处理过程只处理于package目录下的文件，跳过子目录，原因是Golang把每个目录都当成一个独立的package。这个处理过程大概分为4个部分。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;匹配文件
 你会先看到一行代码&lt;code class=&quot;highlighter-rouge&quot;&gt;match, data, filename, err := ctxt.matchFile(p.Dir, name, true, allTags, &amp;amp;p.BinaryOnly)&lt;/code&gt;。这个&lt;code class=&quot;highlighter-rouge&quot;&gt;matchFile&lt;/code&gt;方法的功能是判断当前文件是否需要参与到构建中来。这个判断条件有两个：
    &lt;ol&gt;
      &lt;li&gt;根据文件名中的os和arch信息来判断是否符合。Golang支持的文件名格式有六种：
        &lt;ol&gt;
          &lt;li&gt;name_$(GOOS).*&lt;/li&gt;
          &lt;li&gt;name_$(GOARCH).*&lt;/li&gt;
          &lt;li&gt;name_$(GOOS)_$(GOARCH).*&lt;/li&gt;
          &lt;li&gt;name_$(GOOS)_test.*&lt;/li&gt;
          &lt;li&gt;name_$(GOARCH)_test.*&lt;/li&gt;
          &lt;li&gt;name_$(GOOS)_$(GOARCH)_test.*&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;根据文件投的注释中的build tag来判断是否符合。这个可以查看文档&lt;a href=&quot;https://golang.org/pkg/go/build/&quot;&gt;Package buld&lt;/a&gt;。&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;上面看到&lt;code class=&quot;highlighter-rouge&quot;&gt;matchFile&lt;/code&gt;文件返回了4个参数，第一个参数&lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt;表示这个文件是否需要参与到构建中，&lt;strong&gt;第二个参数&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;包含了这个文件从开头到&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;语句结束的内容&lt;/strong&gt;，第三个参数是这个文件的绝对路径名。&lt;/p&gt;

    &lt;p&gt;如果这里得到的&lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;，说明文件不需要参与构建，可以开始处理下一个文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;忽略非Golang源码的文件&lt;/p&gt;

    &lt;p&gt;对于扩展名不是&lt;em&gt;.go&lt;/em&gt;的文件，会把文件名记录到对应的列表中，然后开始处理下一个文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解析文件内容&lt;/p&gt;

    &lt;p&gt;严格的说，是解析从文件开头到&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;语句结束这部分的内容，这部分内容是我们在上面调用&lt;code class=&quot;highlighter-rouge&quot;&gt;matchFile&lt;/code&gt;方法时获得的。 解析过程是执行代码：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pf, err := parser.ParseFile(fset, filename, data, parser.ImportsOnly|parser.ParseComments)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parser&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;go/parser&lt;/code&gt;这个package，一个专门用于解析Golang源码的package。这个会在专门的文章说阐述，不在本文中展开讲解。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parser.ParseFile&lt;/code&gt;函数的最后一个参数我们执行了两个mode：&lt;code class=&quot;highlighter-rouge&quot;&gt;ImportsOnly&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ParseComments&lt;/code&gt;，这个是因为我们传递进去的内容只包含了从文件开头到&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;语句结束的地方，&lt;code class=&quot;highlighter-rouge&quot;&gt;ImportsOnly&lt;/code&gt;表示解析到&lt;code class=&quot;highlighter-rouge&quot;&gt;imports&lt;/code&gt;语句结束的地方就返回，而&lt;code class=&quot;highlighter-rouge&quot;&gt;ParseComments&lt;/code&gt;表示会解析注释，如果文件开头存在注释，那么就可以得到一个文件doc。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parser.ParseFile&lt;/code&gt;函数的第一个参数&lt;code class=&quot;highlighter-rouge&quot;&gt;fset&lt;/code&gt;是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;go/token.FileSet&lt;/code&gt;对象，用来表示多个Golang源码文件构成的集合，主要是用来在解析源码的过程中快速的处理文件位置。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parser.ParseFile&lt;/code&gt;函数的返回值是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;go/ast.File&lt;/code&gt;对象，这个是将一个文件的内容进行语法解析后得到的对象。&lt;em&gt;ast的是Abstract Syntax Tree的缩写，即抽象语法树&lt;/em&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;处理解析后的文件&lt;/p&gt;

    &lt;p&gt;解析完这个文件后，就可以根据得到的&lt;code class=&quot;highlighter-rouge&quot;&gt;go/ast.File&lt;/code&gt;对象继续进行处理：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果package名为&lt;strong&gt;documentation&lt;/strong&gt;时的情况&lt;/li&gt;
      &lt;li&gt;处理package名&lt;strong&gt;xxx_test&lt;/strong&gt;的情况，也就是允许同一个目录中包含有一个名为&lt;em&gt;xxx&lt;/em&gt;的package，以及它的黑盒测试package，名为&lt;em&gt;xxx_test&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;检查一个目录下的文件是否声明了多个不同的package名称（上面的_test情况除外）&lt;/li&gt;
      &lt;li&gt;处理import comment的内容&lt;/li&gt;
      &lt;li&gt;查找并记录这个文件中import的package&lt;/li&gt;
      &lt;li&gt;记录cgo的信息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;针对每个文件的处理流程结束后，就把记录的信息设置到要返回的&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象中。经过这些处理，我们得到的&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象中记录了这个package的基本信息，包括这个package中包含哪些文件、package名称以及这个package的依赖等。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;经过上面这些处理，当&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Context&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt;方法成功返回时，会给调用者一个&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Package&lt;/code&gt;对象，这个对象会包含这个package的基本信息，以及这个package的依赖信息。&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Feb 2017 00:00:00 +0800</pubDate>
        <link>/2017/02/27/golang-code-reading-notes-2.html</link>
        <guid isPermaLink="true">/2017/02/27/golang-code-reading-notes-2.html</guid>
        
        
      </item>
    
      <item>
        <title>Golang源码阅读笔记 -- go build(1)</title>
        <description>&lt;p&gt;&lt;strong&gt;go build&lt;/strong&gt;命令用来构建一个go package，最常用的就是构建一个package得到一个可执行文件。&lt;strong&gt;build&lt;/strong&gt;命令接受很多参数用来控制构建过程。本文使用的&lt;strong&gt;Golang&lt;/strong&gt;源码的版本是&lt;strong&gt;1.7.5&lt;/strong&gt;，这个版本的Go是自举的，也就是说Go构建器本身也是Go写的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;代码路径约定&lt;/strong&gt;: &lt;strong&gt;Golang&lt;/strong&gt;的仓库中所有的代码在子目录&lt;em&gt;src/&lt;/em&gt;下，所以下面提到代码路径时，会把前缀&lt;em&gt;src/&lt;/em&gt;去掉，避免表述过于冗长。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package中的符号&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Context&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build&lt;/code&gt;这个package中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt;这个表达式。&lt;/p&gt;

&lt;p&gt;另外，因为&lt;strong&gt;go build&lt;/strong&gt;命令的参数很多，支持的操作系统和架构平台也很多，这里只描述最简单的参数的情况下的代码路径。操作系统是&lt;strong&gt;Linux&lt;/strong&gt;，架构平台是&lt;strong&gt;x86_64&lt;/strong&gt;，在Golang源码里称为&lt;strong&gt;amd64&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;go-build命令入口&quot;&gt;&lt;strong&gt;go build&lt;/strong&gt;命令入口&lt;/h1&gt;

&lt;p&gt;Golang的源码中，&lt;strong&gt;go build&lt;/strong&gt;命令的入口在&lt;em&gt;cmd/go/build.go&lt;/em&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;runBuild(cmd *Command, args []string)&lt;/code&gt;函数。该函数会在&lt;em&gt;cmd/go/main.go&lt;/em&gt;的&lt;strong&gt;main()&lt;/strong&gt;函数中被调用。调用前，会先解析所有的命令行参数，解析的参数会设置到&lt;em&gt;cmd/go/build.go&lt;/em&gt;文件的全局变量中，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;buildA&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;buildN&lt;/code&gt;等。其他的非参数部分，就会通过&lt;code class=&quot;highlighter-rouge&quot;&gt;runBuild()&lt;/code&gt;函数的&lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;参数传递进来。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当你执行&lt;code class=&quot;highlighter-rouge&quot;&gt;go build -a a.go b.go&lt;/code&gt;时，&lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;的内容会是&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;a.go&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;b.go&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;当你执行&lt;code class=&quot;highlighter-rouge&quot;&gt;go build -a goexample/hello goexample/foo&lt;/code&gt;时，&lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;的内容会是&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;goexample/hello&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;goexample/foo&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;runBuild&lt;/code&gt;函数进来后，会先执行&lt;code class=&quot;highlighter-rouge&quot;&gt;instrumentInit()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;buildModeInit()&lt;/code&gt;这两个函数。&lt;code class=&quot;highlighter-rouge&quot;&gt;instrumentInit()&lt;/code&gt;函数处理&lt;strong&gt;-race&lt;/strong&gt;和&lt;strong&gt;-msan&lt;/strong&gt;两个参数，进行一些初始化配置。&lt;code class=&quot;highlighter-rouge&quot;&gt;buildModeInit()&lt;/code&gt;函数根据&lt;code class=&quot;highlighter-rouge&quot;&gt;-buildmode&lt;/code&gt;参数的值来设置一些全局变量。&lt;code class=&quot;highlighter-rouge&quot;&gt;-buildmode&lt;/code&gt;的默认值是&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;default&quot;&lt;/code&gt;。上面这两个函数我们先不用关心，不影响主线代码的阅读。&lt;/p&gt;

&lt;p&gt;接下来，&lt;code class=&quot;highlighter-rouge&quot;&gt;runBuild()&lt;/code&gt;函数会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesForBuild(args)&lt;/code&gt;获得需要构建的pkg的信息。&lt;/p&gt;

&lt;h1 id=&quot;packagesforbuild函数&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesForBuild&lt;/code&gt;函数&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesForBuild(args []string) []*Package&lt;/code&gt;函数位于&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件中。它的功能是载入参数&lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;指定的packages以及这些packages的依赖，生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象列表，这个列表随后会被用于构建。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesForBuild()&lt;/code&gt;本身并不执行载入packages的工作，而是调用&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesAndErrors()&lt;/code&gt;函数来载入packages，然后检查载入的packages是否有错误，有错的话就让&lt;code class=&quot;highlighter-rouge&quot;&gt;go build&lt;/code&gt;命令报错并返回。&lt;/p&gt;

&lt;h1 id=&quot;packagesanderrors函数&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesAndErrors&lt;/code&gt;函数&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;packagesAndErrors(args []string) []*Package&lt;/code&gt;函数也是位于&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件中，它开始执行载入packages的操作。分为两种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;中都是文件名，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;go build -a a.go b.go&lt;/code&gt;，那么会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;goFilesPackage(args)&lt;/code&gt;来执行载入package的操作。&lt;/li&gt;
  &lt;li&gt;否则，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;go build -a goexample/hello goexample/foo&lt;/code&gt;这种情况。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一种情况我们先跳过，回头再来看。先来看第二种情况，也就是更常见的情况。我们先限制命令行参数只传递了一个package &lt;em&gt;goexample/hello&lt;/em&gt;，然后来看下代码：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;args = importPaths(args)&lt;/code&gt;，该函数处理命令行传递进来的packages的特殊情况，比如Windows系统、路径中多余的部分、&lt;strong&gt;std/cmd/all&lt;/strong&gt;这些保留名称、扩展符&lt;strong&gt;…&lt;/strong&gt;&lt;em&gt;等，然后返回所有所有需要处理packages。此时返回的每个package都可以认为是一个&lt;strong&gt;ImportPath&lt;/strong&gt;。因为我们举的例子&lt;/em&gt;goexample/hello*都不在特殊情况里面，所以它会原样返回。&lt;/li&gt;
  &lt;li&gt;针对args中的每个ImportPath，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;loadPackage(arg, &amp;amp;stk)&lt;/code&gt;来载入这个package。其中&lt;code class=&quot;highlighter-rouge&quot;&gt;stk&lt;/code&gt;参数是一个表示依赖深度的栈，后面再仔细说明。在这一步，就得到了所需的&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象。&lt;/li&gt;
  &lt;li&gt;最后，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;computeStale()&lt;/code&gt;函数，该函数会判断一个package是否需要重新构建。如果&lt;code class=&quot;highlighter-rouge&quot;&gt;go build&lt;/code&gt;传递了&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;参数，那么所有的packages都要重新构建。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从上面的流程可以看出，载入一个package的主要工作都是在&lt;code class=&quot;highlighter-rouge&quot;&gt;loadPackage()&lt;/code&gt;函数中完成的。&lt;/p&gt;

&lt;h1 id=&quot;loadpackage函数&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;loadPackage&lt;/code&gt;函数&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;loadPackage(arg string, stk *importStack) *Package&lt;/code&gt;位于&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件中，它载入一个命令行参数指定的package。&lt;code class=&quot;highlighter-rouge&quot;&gt;stk&lt;/code&gt;参数是用于记录import路径的一个栈。&lt;/p&gt;

&lt;p&gt;该函数的流程分为4个部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断&lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt;是否是local import。&lt;strong&gt;Local Import&lt;/strong&gt;表是一个ImportPath是”.”、”..”、”./”开头后者是”../”开头。是的话，就对&lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt;进行特殊处理。&lt;/li&gt;
  &lt;li&gt;判断&lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt;是否以&lt;em&gt;cmd/&lt;/em&gt;开头且&lt;em&gt;cmd/&lt;/em&gt;之后没有&lt;em&gt;/&lt;/em&gt;。是的话表示构建的是一个go命令。会在这个分支里执行载入，然后返回。&lt;/li&gt;
  &lt;li&gt;如果构建的不是一个go命令，那么就是一个package。会先处理一下local import一个standard package的情况，也就是说使用local import的方式指定一个standard package的情况。&lt;strong&gt;standard package是指GOROOT中的那些package&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;最后，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport(arg, cwd, nil, stk, nil, 0)&lt;/code&gt;来进行arg的载入。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于我们的简单例子，在这里会直接走到最后的&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;调用。&lt;/p&gt;

&lt;h2 id=&quot;importstack&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;importStack&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;这个是一个简单的栈实现，用来在载入一个package的过程中，记录import的路径，栈底是命令行指定要载入的package，栈顶是当前正在处理的ImportPath。&lt;/p&gt;

&lt;h2 id=&quot;loadimport函数&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;函数&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport(path, srcDir string, parent *Package, stk *importStack, importPos []token.Position, mode int) *Package&lt;/code&gt;位于&lt;em&gt;cmd/go/pkg.go&lt;/em&gt;文件中。几个参数的含义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;，package的ImportPath，可能是local import的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;srcDir&lt;/strong&gt;，是执行命令时的当前路径，用于当arg是local import path的情况下，查找package用的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt;，是&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;的父package，也就是把&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; import进来的package。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;stk&lt;/strong&gt;，记录package import路径的栈。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;importPos&lt;/strong&gt;，记录import语句的位置用的，以便出错时可以显示出位置信息。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;，目前只有一个mode，&lt;strong&gt;useVendor&lt;/strong&gt;，表示是否需要进行vendor展开。useVendor为真，表示一个文件中的import path还没有被转换为一个vendor中的path，需要被进行vendor展开处理。当我们从&lt;code class=&quot;highlighter-rouge&quot;&gt;loadPackage&lt;/code&gt;中调用&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;时，传递的&lt;code class=&quot;highlighter-rouge&quot;&gt;mode&lt;/code&gt;为0，因为我们要构建的package显然不会在vendor目录中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面来看&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;中的主要流程。这个函数中还考虑了&lt;strong&gt;vendor&lt;/strong&gt;和&lt;strong&gt;internal&lt;/strong&gt;的情况，我们先跳过这些，只看主要步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stk.push(path)&lt;/code&gt;对&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;进行入栈处理，这个栈的作用上面已经讲过。&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;packageCache&lt;/code&gt;全局变量，判断这个&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;是否已经被处理过了，如果已经处理过，就直接进行重用，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;reusePackage(p, stk)&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;生产一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;，并且加入&lt;code class=&quot;highlighter-rouge&quot;&gt;packageCache&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;bp, err := buildContext.Import(path, srcDir, buildMode)&lt;/code&gt;来获得这个&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Package&lt;/code&gt;对象。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;p.load(stk, bp, err)&lt;/code&gt;把这个&lt;code class=&quot;highlighter-rouge&quot;&gt;build.Package&lt;/code&gt;对象载入到&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;中。&lt;/li&gt;
  &lt;li&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面这个流程里有几个新的东西，我们先来看一下。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reusePackage&lt;/code&gt;函数，这个函数的主要作用是判断是否存在循环应用的情况。在后面的文章会讲解判断方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;buildContext&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;cmd/go/build.go&lt;/em&gt;文件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;buildContext&lt;/code&gt;变量是用来保存构建上下文的全局变量，默认指向&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Default&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;注: &lt;code class=&quot;highlighter-rouge&quot;&gt;go/build&lt;/code&gt;这个package是用来收集一个go package有关的信息的，是Golang的一个基础package。&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Context&lt;/code&gt;包含有支持构建的上下文信息，会保存一些Golang的基本信息，以及其他和构建相关的信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Package&lt;/code&gt;对象位于文件&lt;em&gt;go/build/build.go&lt;/em&gt;中。这个&lt;code class=&quot;highlighter-rouge&quot;&gt;Package&lt;/code&gt;对象用来描述一个目录中的package（Golang的每个目录都是一个package）。当上面提到的&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;函数调用&lt;code class=&quot;highlighter-rouge&quot;&gt;buildContext.Import()&lt;/code&gt;时，它得到的就是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;go/build.Package&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在回过头来看&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;的流程。 上面已经列出了这个流程的主要步骤，这里的关键点在于步骤4和步骤5。步骤4的&lt;code class=&quot;highlighter-rouge&quot;&gt;buildContext.Import(path, srcDir, mode)&lt;/code&gt;是把这个&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;目录中的package的信息收集起来；而步骤5则是载入这个package相关的依赖。这两个步骤的内容就非常多了，在后面的文章独立说明。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;我们现在知道了&lt;code class=&quot;highlighter-rouge&quot;&gt;go build&lt;/code&gt;命令的入口，并且知道当要构建一个package的时候，要先载入这个package的信息。这个主要是在&lt;code class=&quot;highlighter-rouge&quot;&gt;loadPackage&lt;/code&gt;这个函数中完成的，载入的是通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;loadImport&lt;/code&gt;函数进行的，要分别载入这个package自己的信息，然后再载入它的依赖信息。这个过程说明了，载入一个命令行指定的package和载入一个&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;语句指定的package是差不多的。&lt;/p&gt;

&lt;p&gt;下一篇文章会说明&lt;code class=&quot;highlighter-rouge&quot;&gt;buildConext.Import&lt;/code&gt;内部的逻辑。&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 +0800</pubDate>
        <link>/2017/02/26/golang-code-reading-notes-1.html</link>
        <guid isPermaLink="true">/2017/02/26/golang-code-reading-notes-1.html</guid>
        
        
      </item>
    
      <item>
        <title>Golang的reflect有多慢？</title>
        <description>&lt;p&gt;由于Golang不支持泛型，所以我们会使用Golang的&lt;code class=&quot;highlighter-rouge&quot;&gt;interface{]&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;reflect&lt;/code&gt;来实现语言的动态特性。但是，这个也会带来很严重的性能下降问题。但是，到底有多慢呢？我们可以通过Golang的&lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt;库的&lt;code class=&quot;highlighter-rouge&quot;&gt;Benchmark&lt;/code&gt;来测试一下。&lt;/p&gt;

&lt;h1 id=&quot;测试程序&quot;&gt;测试程序&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;bench.go&lt;/em&gt;的代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bench&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staticRun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staticRun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamicRun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Run1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamicRun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Run2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;主要是测试 &lt;strong&gt;staticRun&lt;/strong&gt;和 &lt;strong&gt;dynamicRun&lt;/strong&gt;方法的性能差距。注意，&lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt;类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;Run1&lt;/code&gt;方法和&lt;code class=&quot;highlighter-rouge&quot;&gt;Run2&lt;/code&gt;方法必须是exported的。&lt;/p&gt;

&lt;p&gt;另外建一个文件 &lt;em&gt;bench_test.go&lt;/em&gt;保存benchmark代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bench&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkStaticRun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staticRun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkDynamicRun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamicRun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkStaticRun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staticRun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkDynamicRun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamicRun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkMethodByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Run2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkCallRun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Run2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;测试结果&quot;&gt;测试结果&lt;/h1&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;go test -bench-.&lt;/code&gt;来运行测试：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;➜ ~/go/src/goexamples/bench  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -bench&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.
testing: warning: no tests to run
BenchmarkStaticRun1-4           2000000000               0.45 ns/op
BenchmarkDynamicRun1-4           1000000              1840 ns/op
BenchmarkStaticRun2-4           2000000000               0.42 ns/op
BenchmarkDynamicRun2-4           1000000              1389 ns/op
BenchmarkValueOf-4              200000000                7.56 ns/op
BenchmarkMethodByName-4          2000000               753 ns/op
BenchmarkCallRun2-4              3000000               531 ns/op
PASS
ok      goexamples/bench        11.742s&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;BenchmarkStaticRun1&lt;/strong&gt;和&lt;strong&gt;BenchmarkDynamicRun1&lt;/strong&gt;
这两个测试结果显示，采用动态的方式来调用一个方法，并且传递一个动态的参数，要比使用纯静态的方式慢大概4000倍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BenchmarkStaticRun2&lt;/strong&gt;和&lt;strong&gt;BenchmarkDynamicRun2&lt;/strong&gt;
这两个测试结果显示，采用动态的方式来调用一个方法，不传递任何参数，要比使用纯静态的方式慢大概3300倍。&lt;/p&gt;

&lt;p&gt;另外的三个结果测给出了一次动态调用中，不同部分的耗时，可以看出动态获取方法以及调用这个方法都是很慢的。&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Nov 2016 00:00:00 +0800</pubDate>
        <link>/2016/11/05/how-slow-is-golang-reflect.html</link>
        <guid isPermaLink="true">/2016/11/05/how-slow-is-golang-reflect.html</guid>
        
        
      </item>
    
      <item>
        <title>理解Golang程序(1) -- 基础</title>
        <description>&lt;h1 id=&quot;为什么写这个系列&quot;&gt;为什么写这个系列&lt;/h1&gt;

&lt;p&gt;这个系列的文章是希望能帮助读者从Go汇编的层面更好的理解一个Golang程序。笔者刚工作的时候用的是C语言，深刻的感到理解一个程序的汇编代码对于编程的是非常有帮助的（这个也是读了&lt;a href=&quot;http://product.china-pub.com/216981&quot;&gt;深入理解计算机系统&lt;/a&gt;之后才意识到这个问题）。所以，笔者觉得，要想更好的使用Golang，也应该理解其汇编层面的东西（这里说的汇编是指Golang工具链使用的汇编格式）。&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;环境&quot;&gt;环境&lt;/h1&gt;

&lt;p&gt;Golang自带的工具就能够帮助我们理解其汇编代码了，我们只需要建立一个简单的编程环境即可。 &lt;strong&gt;Golang上个月刚刚发布了1.7版本&lt;/strong&gt;，所以本系列也会使用go1.7。主要的环境设置如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;➜ ~  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go version
go version go1.7 linux/amd64
➜ ~  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go env
&lt;span class=&quot;nv&quot;&gt;GOARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;amd64&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOBIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOEXE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOHOSTARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;amd64&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOHOSTOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;linux&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;linux&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/diabloneo/go&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GORACE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/opt/go&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOTOOLDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/opt/go/pkg/tool/linux_amd64&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后，我们建议一个本地的代码目录用来存放实验代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;➜ ~  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;go/src
➜ ~/go/src  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir -p goexamples/hello
➜ ~/go/src  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;goexamples/hello
➜ ~/go/src/goexamples/hello  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;后面的实验代码都会存放在 &lt;em&gt;${GOPATH}/goexamples/src&lt;/em&gt;这个目录下。&lt;/p&gt;

&lt;h1 id=&quot;编译和反汇编&quot;&gt;编译和反汇编&lt;/h1&gt;

&lt;p&gt;编译Golang程序，一般是用 &lt;strong&gt;go build&lt;/strong&gt;工具，不过为了查看汇编代码，我们需要使用 &lt;strong&gt;go tool compile&lt;/strong&gt;工具。其实 &lt;strong&gt;go build&lt;/strong&gt;也是使用了 &lt;strong&gt;go tool compile&lt;/strong&gt;和 &lt;strong&gt;go tool link&lt;/strong&gt;工具，一个负责编译，一个负责链接。&lt;/p&gt;

&lt;p&gt;先写个 &lt;em&gt;hello, world&lt;/em&gt; 程序 &lt;em&gt;goexamples/hello/hello.go&lt;/em&gt; ，在程序里定义一个看起来没用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;函数：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello, world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来，我们可以执行编译该文件来得到该文件的汇编代码，执行命令&lt;code class=&quot;highlighter-rouge&quot;&gt;go tool compile -S hello.go&lt;/code&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;➜ ~/go/src/goexamples/hello  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go tool compile -S hello.go
&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x8 &lt;span class=&quot;nv&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       TEXT    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;-8
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       NOP
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       NOP
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, gclocals·5184031d3a32a42d85027f073f873668&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;, gclocals·33cdeccccebe80329f1fdbee7f5874cb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.~r0+8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0009 00009 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       RET
        0x0000 48 c7 44 24 08 00 00 00 00 c3                    H.D&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;.....
&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.main &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;98 &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0 &lt;span class=&quot;nv&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x48
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      TEXT    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$72&lt;/span&gt;-0
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TLS&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, CX
        0x0009 00009 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      CMPQ    SP, 16&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CX&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x000d 00013 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      JLS     91
        0x000f 00015 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      SUBQ    &lt;span class=&quot;nv&quot;&gt;$72&lt;/span&gt;, SP
        0x0013 00019 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    BP, 64&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0018 00024 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      LEAQ    64&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, BP
        0x001d 00029 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, gclocals·33cdeccccebe80329f1fdbee7f5874cb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x001d 00029 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;, gclocals·33cdeccccebe80329f1fdbee7f5874cb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x001d 00029 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      LEAQ    go.string.&lt;span class=&quot;s2&quot;&gt;&quot;hello, world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, AX
        0x0024 00036 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    AX, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0028 00040 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    &lt;span class=&quot;nv&quot;&gt;$13&lt;/span&gt;, 8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0031 00049 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, 16&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x003a 00058 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, 24&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0043 00067 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, 32&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x004c 00076 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      PCDATA  &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;
        0x004c 00076 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      CALL    fmt.Printf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0051 00081 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:14&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    64&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, BP
        0x0056 00086 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:14&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      ADDQ    &lt;span class=&quot;nv&quot;&gt;$72&lt;/span&gt;, SP
        0x005a 00090 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:14&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      RET
        0x005b 00091 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:14&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      NOP
        0x005b 00091 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      CALL    runtime.morestack_noctxt&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0060 00096 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      JMP     0
        0x0000 64 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 4c 48  dH..%....H;a.vLH
        0x0010 83 ec 48 48 89 6c 24 40 48 8d 6c 24 40 48 8d 05  ..HH.l&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;H.l&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;H..
        0x0020 00 00 00 00 48 89 04 24 48 c7 44 24 08 0d 00 00  ....H..&lt;span class=&quot;nv&quot;&gt;$H&lt;/span&gt;.D&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;...
        0x0030 00 48 c7 44 24 10 00 00 00 00 48 c7 44 24 18 00  .H.D&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;....H.D&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;.
        0x0040 00 00 00 48 c7 44 24 20 00 00 00 00 e8 00 00 00  ...H.D&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;........
        0x0050 00 48 8b 6c 24 40 48 83 c4 48 c3 e8 00 00 00 00  .H.l&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;H..H......
        0x0060 eb 9e                                            ..
        rel 5+4 &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15 TLS+0
        rel 32+4 &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;14 go.string.&lt;span class=&quot;s2&quot;&gt;&quot;hello, world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;+0
        rel 77+4 &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7 fmt.Printf+0
        rel 92+4 &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7 runtime.morestack_noctxt+0
&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.init &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;61 &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0 &lt;span class=&quot;nv&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      TEXT    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.init&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;-0
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVQ    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TLS&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, CX
        0x0009 00009 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      CMPQ    SP, 16&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CX&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x000d 00013 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      JLS     54
        0x000f 00015 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      NOP
        0x000f 00015 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      NOP
        0x000f 00015 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, gclocals·33cdeccccebe80329f1fdbee7f5874cb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x000f 00015 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;, gclocals·33cdeccccebe80329f1fdbee7f5874cb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x000f 00015 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVBLZX &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.initdone·&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, AX
        0x0016 00022 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      CMPB    AL, &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
        0x0018 00024 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      JLS     &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, 27
        0x001a 00026 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      RET
        0x001b 00027 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      JNE     &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, 34
        0x001d 00029 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      PCDATA  &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;
        0x001d 00029 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      CALL    runtime.throwinit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0022 00034 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVB    &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.initdone·&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0029 00041 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      PCDATA  &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;
        0x0029 00041 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      CALL    fmt.init&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x002e 00046 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      MOVB    &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.initdone·&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0035 00053 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      RET
        0x0036 00054 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      NOP
        0x0036 00054 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      CALL    runtime.morestack_noctxt&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x003b 00059 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      JMP     0
        0x0000 64 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 27 0f  dH..%....H;a.v&lt;span class=&quot;s1&quot;&gt;'.
        0x0010 b6 05 00 00 00 00 3c 01 76 01 c3 75 05 e8 00 00  ......&amp;lt;.v..u....
        0x0020 00 00 c6 05 00 00 00 00 01 e8 00 00 00 00 c6 05  ................
        0x0030 00 00 00 00 02 c3 e8 00 00 00 00 eb c3           .............
        rel 5+4 t=15 TLS+0
        rel 18+4 t=14 &quot;&quot;.initdone·+0
        rel 30+4 t=7 runtime.throwinit+0
        rel 36+4 t=14 &quot;&quot;.initdone·+-1
        rel 42+4 t=7 fmt.init+0
        rel 48+4 t=14 &quot;&quot;.initdone·+-1
        rel 55+4 t=7 runtime.morestack_noctxt+0
gclocals·33cdeccccebe80329f1fdbee7f5874cb t=9 dupok size=8
        0x0000 01 00 00 00 00 00 00 00                          ........
gclocals·5184031d3a32a42d85027f073f873668 t=9 dupok size=12
        0x0000 01 00 00 00 01 00 00 00 00 00 00 00              ............
go.string.hdr.&quot;hello, world\n&quot; t=9 dupok size=16
        0x0000 00 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00  ................
        rel 0+8 t=1 go.string.&quot;hello, world\n&quot;+0
go.string.&quot;hello, world\n&quot; t=9 dupok size=13
        0x0000 68 65 6c 6c 6f 2c 20 77 6f 72 6c 64 0a           hello, world.
&quot;&quot;.initdone· t=34 size=1
&quot;&quot;.foo·f t=9 dupok size=8
        0x0000 00 00 00 00 00 00 00 00                          ........
        rel 0+8 t=1 &quot;&quot;.foo+0
&quot;&quot;.main·f t=9 dupok size=8
        0x0000 00 00 00 00 00 00 00 00                          ........
        rel 0+8 t=1 &quot;&quot;.main+0
&quot;&quot;.init·f t=9 dupok size=8
        0x0000 00 00 00 00 00 00 00 00                          ........
        rel 0+8 t=1 &quot;&quot;.init+0
type..importpath.fmt. t=9 dupok size=6
        0x0000 00 00 03 66 6d 74                                ...fmt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在我们得到了这个文件的汇编代码，可以看到这个代码里不仅有汇编指令，还有很多Golang实现相关的东西。现在，作为起步，我们先来看一些基本的内容：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x8 &lt;span class=&quot;nv&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0
...
&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.main &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;98 &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0 &lt;span class=&quot;nv&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x48
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面两行就是我们定义的两个函数：&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;，跟在这两行后面的是两个函数的内容。为了方便阐述，这里会把要研究的代码都写在&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;函数内。&lt;/p&gt;

&lt;p&gt;接下来，我们需要 &lt;strong&gt;关系编译优化&lt;/strong&gt;。Golang的编译器在编译的时候会执行一些默认的优化，这会提升性能和节约空间，但是会使得汇编代码和Golang代码对应不起来，所以我们要先关闭这个优化，然后才能更好的研究汇编代码。关闭优化需要传递 &lt;strong&gt;-N&lt;/strong&gt;选项给编译器：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;➜ ~/go/src/goexamples/hello  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go tool compile -N -S hello.go&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样得到的汇编输出会和前面略有不同，可以通过对比&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;函数的汇编代码来看到这些不同点：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;有优化&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x8 &lt;span class=&quot;nv&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       TEXT    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;-8
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       NOP
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       NOP
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, gclocals·5184031d3a32a42d85027f073f873668&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;, gclocals·33cdeccccebe80329f1fdbee7f5874cb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.~r0+8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0009 00009 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       RET
        0x0000 48 c7 44 24 08 00 00 00 00 c3                    H.D&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;.....&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;无优化&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50 &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x8 &lt;span class=&quot;nv&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x10
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       TEXT    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$16&lt;/span&gt;-8
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       SUBQ    &lt;span class=&quot;nv&quot;&gt;$16&lt;/span&gt;, SP
        0x0004 00004 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    BP, 8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0009 00009 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       LEAQ    8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, BP
        0x000e 00014 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, gclocals·5184031d3a32a42d85027f073f873668&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x000e 00014 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;, gclocals·33cdeccccebe80329f1fdbee7f5874cb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x000e 00014 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.~r0+24&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0017 00023 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x001f 00031 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.~r0+24&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0028 00040 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, BP
        0x002d 00045 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       ADDQ    &lt;span class=&quot;nv&quot;&gt;$16&lt;/span&gt;, SP
        0x0031 00049 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       RET
        0x0000 48 83 ec 10 48 89 6c 24 08 48 8d 6c 24 08 48 c7  H...H.l&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;H.l&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;H.
        0x0010 44 24 18 00 00 00 00 48 c7 04 24 00 00 00 00 48  D&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;....H..&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;...H
        0x0020 c7 44 24 18 00 00 00 00 48 8b 6c 24 08 48 83 c4  .D&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;....H.l&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;H..
        0x0030 10 c3                                            ..&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以看出，无优化的代码更长，包含了函数完整的栈帧操作。后续我们会一步一步的研究Golang的代码和无优化的汇编代码之间的关系，以帮助读者更好的理解Golang。&lt;/p&gt;

&lt;h1 id=&quot;golang汇编基础&quot;&gt;Golang汇编基础&lt;/h1&gt;

&lt;p&gt;Golang的汇编器采用的是Plan 9的汇编语法，官方有一篇关于Golang汇编器的快速入门：&lt;a href=&quot;https://golang.org/doc/asm&quot;&gt;A Quick Guide to Go’s Assembler&lt;/a&gt;，其中介绍了一些简单的语法。在开始研究Golang的汇编代码之前，我们也需要先了解一下基本的语法。&lt;/p&gt;

&lt;h2 id=&quot;伪寄存器&quot;&gt;伪寄存器&lt;/h2&gt;

&lt;p&gt;Golang汇编中有4个伪寄存器，这些伪寄存器是由Golang工具链维护的。这4个伪寄存器是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;FP&lt;/strong&gt;: Frame pointer：栈帧寄存器，指向参数和本地变量。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PC&lt;/strong&gt;：Program counter：程序计数器，用来进行跳转处理。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SB&lt;/strong&gt;：Static base pointer：全局符号表。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SP&lt;/strong&gt;：Stack pointer：栈顶指针。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;SB&lt;/strong&gt;寄存器的常用语法有以下几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;foo(SB)&lt;/strong&gt;是全局变量foo的地址&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;foo&amp;lt;&amp;gt;(SB)&lt;/strong&gt;是只在当前源文件可见的变量foo的地址&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;foo+4(SB)&lt;/strong&gt;是全局变量foo的地址偏移4字节的地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;FP&lt;/strong&gt;寄存器是用来访问函数参数的，理论上来说，&lt;strong&gt;0(FP)&lt;/strong&gt;是第一个参数，&lt;strong&gt;8(FP)&lt;/strong&gt;是第二个参数（64位系统）。但是，实际使用时，需要把参数名加进去：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;first_arg+0(FP)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;second_arg+8(FP)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;SP&lt;/strong&gt;寄存器是一个虚拟的栈指针，用于指向当前栈帧的栈顶，用于访问局部变量和函数参数（除了 &lt;strong&gt;FP&lt;/strong&gt;，这个也可以访问到函数参数）。&lt;strong&gt;SP&lt;/strong&gt;是指向栈顶的，所以访问数据通常是做减法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;x-8(SP)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;y-4(SP)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-8(SP)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，这里的两个不同语法。在有 &lt;strong&gt;SP&lt;/strong&gt;寄存器的机器上，带有一个名称前缀的语法表示访问Golang虚拟的SP寄存器，而不带名称前缀的则是访问硬件的SP寄存器。&lt;/p&gt;

&lt;h2 id=&quot;寻址模式&quot;&gt;寻址模式&lt;/h2&gt;

&lt;p&gt;说到汇编，就不得不提到寻址模式。Plan 9汇编的寻址模式挺多的，具体的可以看&lt;a href=&quot;https://9p.io/sys/doc/asm.html&quot;&gt;A Manual for Plan 9 assembler&lt;/a&gt;。这里我们列举一些常用的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;$con&lt;/em&gt; 常量&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;$fcon&lt;/em&gt; 浮点数常量&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;name+o(SB)&lt;/em&gt; 外部符号&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;name&amp;lt;&amp;gt;+o(SB)&lt;/em&gt; 本地符号&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;name+o(FP)&lt;/em&gt; 函数参数&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;$name+o(SB)&lt;/em&gt; 外部符号地址&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;$name&amp;lt;&amp;gt;+o(SB)&lt;/em&gt; 本地符号地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;o&lt;/em&gt;表示整数偏移量。&lt;/p&gt;

&lt;h2 id=&quot;指令&quot;&gt;指令&lt;/h2&gt;

&lt;p&gt;下面来介绍一下上文代码中的&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;函数的汇编代码中用到的汇编指令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50 &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x8 &lt;span class=&quot;nv&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x10
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       TEXT    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.foo&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$16&lt;/span&gt;-8
        0x0000 00000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       SUBQ    &lt;span class=&quot;nv&quot;&gt;$16&lt;/span&gt;, SP
        0x0004 00004 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    BP, 8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0009 00009 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       LEAQ    8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, BP
        0x000e 00014 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, gclocals·5184031d3a32a42d85027f073f873668&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x000e 00014 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       FUNCDATA        &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;, gclocals·33cdeccccebe80329f1fdbee7f5874cb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x000e 00014 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.~r0+24&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0017 00023 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x001f 00031 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;.~r0+24&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        0x0028 00040 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       MOVQ    8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, BP
        0x002d 00045 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       ADDQ    &lt;span class=&quot;nv&quot;&gt;$16&lt;/span&gt;, SP
        0x0031 00049 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello.go:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       RET&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TEXT &quot;&quot;.foo(SB), $16-8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TEXT&lt;/strong&gt;是一个伪指令，表示定义一个入口点，也就是定义一个函数。它可以带三个参数：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;第一个参数表示函数名，就是这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;.foo(SB)&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;第二个参数是flag，这里没有体现出来，以后的文章再说。&lt;/li&gt;
  &lt;li&gt;第三个参数是frame size，表示当前函数的栈帧大小以及参数大小，形式如同&lt;code class=&quot;highlighter-rouge&quot;&gt;$framesize-argsize&lt;/code&gt;，减号前面是栈帧大小，减号后面是参数大小（包括返回值）。比如&lt;code class=&quot;highlighter-rouge&quot;&gt;$16-8&lt;/code&gt;表示该函数栈帧大小为16，参数大小为8。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SUBQ $16, SP
MOVQ BP, 8(SP)
LEAQ 8(SP), BP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是一段入栈的代码。在这段代码执行前，&lt;strong&gt;SP&lt;/strong&gt;指针指向调用函数，这里分配栈帧，并且保存函数返回地址，也就是 &lt;strong&gt;BP&lt;/strong&gt;寄存器的内容到栈的开始部分，然后设置新的 &lt;strong&gt;BP&lt;/strong&gt;寄存器的值。随后就可以开始执行这个函数了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BP&lt;/strong&gt;寄存器是 &lt;em&gt;base pointer&lt;/em&gt; ，一般用于指向当前栈帧的某个位置，和 &lt;em&gt;SP&lt;/em&gt; 寄存器配合完成函数调用的操作。&lt;/p&gt;

&lt;p&gt;这里的三个指令都是常用指令，格式都是源操作数在前，目标操作数在后：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;SUBQ&lt;/strong&gt; 减&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MOVQ&lt;/strong&gt; 拷贝&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LEAQ&lt;/strong&gt; 载入有效地址。LEA的全称是 &lt;em&gt;Load Effective Address&lt;/em&gt;，LEA指令计算源操作数所表示的地址的值，然后保存在目标操作数中。有时候LEA指令也会被用来进行简单的无符号计算（支持加、减、乘）。关于LEA指令的更多资料，可以看这里&lt;a href=&quot;https://en.wikibooks.org/wiki/X86_Assembly/Data_Transfer&quot;&gt;X86 Assembly/Data Transfer&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FUNCDATA        $0, gclocals·5184031d3a32a42d85027f073f873668(SB)
FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这两行是用于保存GC所需要的数据。相关指定以后再介绍。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MOVQ $0, &quot;&quot;.~r0+24(FP)
MOVQ $0, &quot;&quot;.a(SP)
MOVQ $0, &quot;&quot;.~r0+24(FP)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里没有新的指令，赋值操作实现了返回&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;变量。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MOVQ 8(SP), BP
ADDQ $16, SP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这些是出栈的代码，通过把 &lt;em&gt;SP&lt;/em&gt; 寄存器和 &lt;em&gt;BP&lt;/em&gt; 寄存器设置为调用函数的值来完成返回。&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>/2016/11/01/understanding-golang-internals-1.html</link>
        <guid isPermaLink="true">/2016/11/01/understanding-golang-internals-1.html</guid>
        
        
      </item>
    
      <item>
        <title>通过demo学习OpenStack开发所需的基础知识 -- 单元测试</title>
        <description>&lt;p&gt;本文将进入单元测试的部分，这也是基础知识中最后一个大块。本文将重点讲述Python和OpenStack中的单元测试的生态环境。&lt;/p&gt;

&lt;h1 id=&quot;单元测试的重要性&quot;&gt;单元测试的重要性&lt;/h1&gt;

&lt;p&gt;github上有个人画了一些不同语言的学习曲线图：&lt;a href=&quot;https://github.com/dobiasd/articles/blob/master/programming_language_learning_curves.md&quot;&gt;Learning Curves (for different programming languages)&lt;/a&gt;，虽然有些恶搞的倾向，不过确实说明了问题。这里贴一下Python的部分：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00008_python_learning_curve.png&quot; alt=&quot;Python Learning Curve&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个图说明了，会单元测试对于提高Python生产力的重要性，这主要是因为Python是个动态语言，很多问题都无法通过静态编译检查来发现，因此单元测试就成了一个重要的确保质量的手段。OpenStack的核心项目都对单元测试有极高的要求，以保证项目的高质量。&lt;/p&gt;

&lt;h1 id=&quot;单元测试工具&quot;&gt;单元测试工具&lt;/h1&gt;

&lt;p&gt;Python的单元测试工具很多，为单元测试提供不同方面的功能。OpenStack的项目也基本把现在流行的单元测试工具都用全了。单元测试可以说是入门OpenStack开发的最难的部分，也是最后一公里。本章，我们就介绍一下在OpenStack中会用到的单元测试的工具。由于数量很多，不可能详细介绍，因此主要做一些概念和用途上的介绍。&lt;/p&gt;

&lt;h2 id=&quot;unittest&quot;&gt;unittest&lt;/h2&gt;

&lt;p&gt;unittest是Python的标准库，提供了最基本的单元测试功能，包括单元测试运行器（简称runner）和单元测试框架。项目的单元测试代码的测试类可以继承&lt;code class=&quot;highlighter-rouge&quot;&gt;unittest.TestCase&lt;/code&gt;类，这样这个类就能够被runner发现并且执行。同时，&lt;code class=&quot;highlighter-rouge&quot;&gt;unittest.TestCase&lt;/code&gt;这个类还定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;setUp()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;tearDown()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;setUpClass()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;tearDownClass()&lt;/code&gt;方法，是用来运行单元测试前的设置工作代码和单元测试后的清理工作代码，这个也是所有Python代码遵守的规范，所以第三方的单元测试库和框架也都遵循这个规范。&lt;/p&gt;

&lt;p&gt;unittest库也提供了一个runner，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$ python -m unittest test_module&lt;/code&gt;的命令来执行某个模块的单元测试。另外，在Python中指定要运行的单元测试用例的完整语法是：&lt;strong&gt;path.to.your.module:ClassOfYourTest.test_method&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;unittest是学习Python单元测试最基本也最重要的一个库，完整的说明请查看官方文档：&lt;a href=&quot;https://docs.python.org/2.7/library/unittest.html&quot;&gt;https://docs.python.org/2.7/library/unittest.html&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;mock&quot;&gt;mock&lt;/h2&gt;

&lt;p&gt;mock也是另一个重要的单元测试库，在Python 2中是作为一个第三方库被使用的，到Python 3时，就被纳入了标准库，可见这个库的重要性。简单的说，mock就是用来模拟对象的行为，这样在进行单元测试的时候，可以指定任何对象的返回值，便于测试对外部接口有依赖的代码。关于mock的使用，可以查看我之前写的这篇文章&lt;a href=&quot;https://segmentfault.com/a/1190000002965620&quot;&gt;Python Mock的入门&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;testtools&quot;&gt;testtools&lt;/h2&gt;

&lt;p&gt;testtools是个unittest的扩展框架，主要是在unittest的基础上提供了更好的assert功能，使得写单元测试更加方便。具体可以查看文档：&lt;a href=&quot;http://testtools.readthedocs.org/en/latest/&quot;&gt;http://testtools.readthedocs.org/en/latest/&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;fixtures&quot;&gt;fixtures&lt;/h2&gt;

&lt;p&gt;fixture的意思是固定装置，在Python的单元测试中，是指某段可以复用的单元测试&lt;code class=&quot;highlighter-rouge&quot;&gt;setUp&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;tearDown&lt;/code&gt;代码组合。一个fixture一般用来实现某个组件的setUp和tearDown逻辑，比如测试前要先创建好某些数据，测试后要删掉这些数据，这些操作就可以封装到一个fixture中。这样不同的测试用例就不用重复写这些代码，只要使用fixture即可。fixtures模块是一个第三方模块，提供了一种简单的创建fixture类和对象的机制，并且也提供了一些内置的fixture。具体的使用方法可以查看官方文档：&lt;a href=&quot;https://pypi.python.org/pypi/fixtures/&quot;&gt;https://pypi.python.org/pypi/fixtures/&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;testscenarios&quot;&gt;testscenarios&lt;/h2&gt;

&lt;p&gt;testscenarios模块满足了场景测试的需求。它的基本用法是在测试类中添加一个类属性&lt;code class=&quot;highlighter-rouge&quot;&gt;scenarios&lt;/code&gt;，该属性是一个元组，定义了每一种场景下不同的变量的值。比如说你测试一段数据访问代码，你需要测试该代码在使用不同的驱动时，比如MongoDB、SQL、File，是否都能正常工作。我们有三种办法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最笨的办法是为不同的驱动把同一个测试用例编写3遍。&lt;/li&gt;
  &lt;li&gt;比较好的办法是，编写一个统一的非测试用例方法，接收driver作为参数，执行测试逻辑，然后再分别编写三个测试用例方法去调用这个非测试用例方法。&lt;/li&gt;
  &lt;li&gt;更好的办法就是使用testscenarios模块，定义好scenarios变量，然后实现一个测试用例方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;testscenarios模块在OpenStack Ceilometer中被大量使用。更多的信息可以查看文档：&lt;a href=&quot;https://pypi.python.org/pypi/testscenarios/&quot;&gt;https://pypi.python.org/pypi/testscenarios/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;subunit&quot;&gt;subunit&lt;/h2&gt;

&lt;p&gt;subunit是一个用于传输单元测试结果的流协议。一般来说，运行单元测试的时候是把单元测试的结果直接输出到标准输出，但是如果运行大量的测试用例，这些测试结果就很难被分析。因此就可以使用python-subunit模块来运行测试用例，并且把测试用例通过subunit协议输出，这样测试结果就可以被分析工具聚合以及分析。python-subunit模块自带了一些工具用来解析subunit协议，比如你可以这样运行测试用例：&lt;code class=&quot;highlighter-rouge&quot;&gt;$ python -m subunit.run test_module | subunit2pyunit&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;subunit2pyunit&lt;/code&gt;命令会解析subunit协议，并且输出到标准输出。关于subunit的更多信息，请查看官方文档：&lt;a href=&quot;https://pypi.python.org/pypi/python-subunit/&quot;&gt;https://pypi.python.org/pypi/python-subunit/&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;testrepository&quot;&gt;testrepository&lt;/h2&gt;

&lt;p&gt;OpenStack中使用testrepository模块管理单元测试用例。当一个项目中的测试用例很多时，如何更有效的处理单元测试用例的结果就变得很重要。testrepository的出现就是为了解决这个问题。testrepository使用python-subunit模块来运行测试用例，然后分析subunit的输出并对测试结果进行记录（记录到本地文件）。举例来说，testrepository允许你做这样的事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;知道哪些用例运行时间最长&lt;/li&gt;
  &lt;li&gt;显示运行失败的用例&lt;/li&gt;
  &lt;li&gt;重新运行上次运行失败的用例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;testrepository的更多信息，请查看官方文档：&lt;a href=&quot;http://testrepository.readthedocs.org/en/latest/&quot;&gt;http://testrepository.readthedocs.org/en/latest/&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;coverage&quot;&gt;coverage&lt;/h2&gt;

&lt;p&gt;coverage是用来计算代码运行时的覆盖率的，也就是统计多少代码被执行了。它可以和testrepository一起使用，用来统计单元测试的覆盖率，在运行完单元测试之后，输出覆盖率报告。具体的使用方法可以查看官方文档：&lt;a href=&quot;http://coverage.readthedocs.org/en/latest/&quot;&gt;http://coverage.readthedocs.org/en/latest/&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;tox&quot;&gt;tox&lt;/h2&gt;

&lt;p&gt;tox是用来管理和构建虚拟环境(virtualenv)的。对于一个项目，我们需要运行Python 2.7的单元测试，也需要运行Python 3.4的单元测试，还需要运行PEP8的代码检查。这些不同的任务需要依赖不同的库，所以需要使用不同的虚拟环境。使用tox的时候，我们会在tox的配置文件&lt;strong&gt;tox.ini&lt;/strong&gt;中指定不同任务的虚拟环境名称，该任务在虚拟环境中需要安装哪些包，以及该任务执行的时候需要运行哪些命令。更多信息，请查看官方文档：&lt;a href=&quot;https://testrun.org/tox/latest/&quot;&gt;https://testrun.org/tox/latest/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;单元测试工具小结&quot;&gt;单元测试工具小结&lt;/h2&gt;

&lt;p&gt;本章介绍了OpenStack中常用的单元测试工具的基本用途，希望大家对这些工具有个大概的认识。这里我们可以按照类别总结一下这些工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;测试环境管理&lt;/strong&gt;: tox
使用tox来管理测试运行的虚拟环境，并且调用testrepository来执行测试用例。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;测试用例的运行和管理&lt;/strong&gt;: testrepository, subunit, coverage
testrepository调用subunit来执行测试用例，对测试结果进行聚合和管理；调用coverage来执行代码覆盖率的计算。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;测试用例的编写&lt;/strong&gt;: unittest, mock, testtools, fixtures, testscenarios
使用testtools作为所有测试用例的基类，同时应用mock, fixtures, testscenarios来更好的编写测试用例。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在&lt;em&gt;The Hacker’s Guide to Python&lt;/em&gt;（《Python高手之路》）一书中，也有专门的一章介绍了各种单元测试工具及其用法，读者也可以参考一下。下一章，我们来分析Keystone项目的单元测试框架，可以让你看到在OpenStack的实际项目中，这些工具是如何被使用的。&lt;/p&gt;

&lt;h1 id=&quot;keystone的单元测试框架&quot;&gt;Keystone的单元测试框架&lt;/h1&gt;

&lt;p&gt;现在，我们以Keystone项目为例，来看下真实项目中的单元测试是如何架构的。我们采用自顶向下的方式，先从最上层的部分介绍起。&lt;/p&gt;

&lt;h2 id=&quot;使用tox进行测试环境管理&quot;&gt;使用tox进行测试环境管理&lt;/h2&gt;

&lt;p&gt;大部分情况下，我们都是通过&lt;strong&gt;tox&lt;/strong&gt;命令来执行单元测试的，并且传递环境名称给tox命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ ~/openstack/env/p/keystone git:(master) ✗ $ tox -e py27
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;tox命令首先会读取项目根目录下的&lt;em&gt;tox.ini&lt;/em&gt;文件，获取相关的信息，然后根据配置构建virtualenv，保存在&lt;em&gt;.tox/&lt;/em&gt;目录下，以环境名称命名：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ ~/openstack/env/p/keystone git:(master) ✗ $ ls .tox
log  pep8  py27
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了&lt;em&gt;log&lt;/em&gt;目录，其他的都是普通的virtualenv环境，你可以自己查看一下内容。我们来看下&lt;em&gt;py27&lt;/em&gt;这个环境的相关配置（在tox.ini）中，我直接在内容上注释一些配置的用途：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[tox]
minversion = 1.6
skipsdist = True
# envlist表示本文件中配置的环境都有哪些
envlist = py34,py27,pep8,docs,genconfig,releasenotes

# testenv是默认配置，如果某个配置在环境专属的section中没有，就从这个section中读取
[testenv]
# usedevelop表示安装virtualenv的时候，本项目自己的代码采用开发模式安装，也就是不会拷贝代码到virtualenv目录中，只是做个链接
usedevelop = True
# install_command表示构建环境的时候要执行的命令，一般是使用pip安装
install_command = pip install -U {opts} {packages}
setenv = VIRTUAL_ENV={envdir}
# deps指定构建环境的时候需要安装的依赖包，这个就是作为pip命令的参数
# keystone这里使用的写法比较特殊一点，第二行的.[ldap,memcache,mongodb]是两个依赖，第一个点'.'表示当前项目的依赖，也就是requirements.txt，第二个部分[ldap,memcache,mongodb]表示extra，是在setup.cfg文件中定义的一个段的名称，该段下定义了额外的依赖，这些可以查看PEP0508
# 一般的项目这里会采用更简单的方式来书写，直接安装两个文件中的依赖：
#    -r{toxinidir}/requirements.txt
#    -r{toxinidir}/test-requirements.txt
deps = -r{toxinidir}/test-requirements.txt
       .[ldap,memcache,mongodb]
# commands表示构建好virtualenv之后要执行的命令，这里调用了tools/pretty_tox.sh来执行测试
commands =
  find keystone -type f -name &quot;*.pyc&quot; -delete
  bash tools/pretty_tox.sh '{posargs}'
whitelist_externals =
  bash
  find
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY PBR_VERSION

# 这个section是为py34环境定制某些配置的，没有定制的配置，从[testenv]读取
[testenv:py34]
commands =
  find keystone -type f -name &quot;*.pyc&quot; -delete
  bash tools/pretty_tox_py3.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面提到的&lt;a href=&quot;https://www.python.org/dev/peps/pep-0508/&quot;&gt;PEP-0508&lt;/a&gt;是依赖格式的完整说明。setup.cfg的&lt;em&gt;extra&lt;/em&gt;部分如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[extras]
ldap =
  python-ldap&amp;gt;=2.4:python_version=='2.7' # PSF
  ldappool&amp;gt;=1.0:python_version=='2.7' # MPL
memcache =
  python-memcached&amp;gt;=1.56 # PSF
mongodb =
  pymongo!=3.1,&amp;gt;=3.0.2 # Apache-2.0
bandit =
  bandit&amp;gt;=0.17.3 # Apache-2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;使用testrepository管理测试的运行&quot;&gt;使用testrepository管理测试的运行&lt;/h2&gt;

&lt;p&gt;上面我们看到&lt;em&gt;tox.ini&lt;/em&gt;文件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;commands&lt;/code&gt;参数中执行的是&lt;em&gt;tools/pretty_tox.sh&lt;/em&gt;命令。这个脚本的内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -o pipefail

&lt;span class=&quot;nv&quot;&gt;TESTRARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# testr和setuptools已经集成，所以可以通过setup.py testr命令来执行&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --testr-args表示传递给testr命令的参数，告诉testr要传递给subunit的参数&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# subunit-trace是os-testr包中的命令（os-testr是OpenStack的一个项目），用来解析subunit的输出的。&lt;/span&gt;
python setup.py testr --testr-args&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--subunit &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TESTRARGS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | subunit-trace -f
&lt;span class=&quot;nv&quot;&gt;retval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# NOTE(mtreinish) The pipe above would eat the slowest display from pbr's testr&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# wrapper so just manually print the slowest tests.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Slowest Tests:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 测试结束后，让testr显示出执行时间最长的那些测试用例&lt;/span&gt;
testr slowest
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$retval&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;tox就是从&lt;em&gt;tools/pretty_tox.sh&lt;/em&gt;这个命令开始调用testr来执行单元测试的。testr本身的配置是放在项目根目录下的&lt;em&gt;.testr.conf&lt;/em&gt;文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[DEFAULT]
test_command=
    ${PYTHON:-python} -m subunit.run discover -t ./ ${OS_TEST_PATH:-./keystone/tests/unit} $LISTOPT $IDOPTION

test_id_option=--load-list $IDFILE
test_list_option=--list
group_regex=.*(test_cert_setup)


# NOTE(morganfainberg): If single-worker mode is wanted (e.g. for live tests)
# the environment variable ``TEST_RUN_CONCURRENCY`` should be set to ``1``. If
# a non-default (1 worker per available core) concurrency is desired, set
# environment variable ``TEST_RUN_CONCURRENCY`` to the desired number of
# workers.
test_run_concurrency=echo ${TEST_RUN_CONCURRENCY:-0}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个文件中的配置项可以从&lt;a href=&quot;http://testrepository.readthedocs.org/en/latest/&quot;&gt;testr官方文档&lt;/a&gt;中找到。其中&lt;code class=&quot;highlighter-rouge&quot;&gt;test_command&lt;/code&gt;命令表示要执行什么命令来运行测试用例，这里使用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;subunit.run&lt;/code&gt;，这个我们在上面提到过了。&lt;/p&gt;

&lt;p&gt;到目前为止的流程就是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;tox建好virtualenv&lt;/li&gt;
  &lt;li&gt;tox调用testr&lt;/li&gt;
  &lt;li&gt;testr调用subunit来执行测试用例&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每个OpenStack项目基本上也都是这样。如果你自己在开发一个Python项目，你也可以参考这个架构。&lt;/p&gt;

&lt;h2 id=&quot;单元测试用例的代码架构&quot;&gt;单元测试用例的代码架构&lt;/h2&gt;

&lt;p&gt;下面我们来看一下Keystone的单元测试代码是如何写的，主要是看一下其层次结构。每个OpenStack项目的单元测试代码结构可能都不一样，不过你了解完Keystone的结构之后，看其他项目的就会比较快了。&lt;/p&gt;

&lt;p&gt;我们以一个测试类为例来分析测试代码的结构：&lt;code class=&quot;highlighter-rouge&quot;&gt;keystone.tests.unit.test_v3_assignment:AssignmentTestCase&lt;/code&gt;。下面是这个类的继承结构，同一级别的缩进表示多重继承，增加缩进表示父类，这里删掉了不必要的路径前缀（从unit目录开始），如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 这个测试类是测RoleAssignment的API的
unit.test_v3_assignment.RoleAssignmentBaseTestCase
-&amp;gt; unit.test_v3.AssignmentTestMixin  这个类包含了一下测试Assignment的工具函数
-&amp;gt; unit.test_v3.RestfulTestCase      这个类是进行V3 REST API测试的基类，实现了V3 API的请求发起和校验
  -&amp;gt; unit.core.SQLDriverOverride     用于修改各个配置的driver字段为sql
  -&amp;gt; unit.test_v3.AuthTestMixin      包含创建认证请求的辅助函数
  -&amp;gt; unit.rest.RestfulTestCase       这个类是进行RESP API测试的基类，V2和V3的API测试都是以这个类为基类，这个类的setUp方法会初始化数据库，创建好TestApp。
    -&amp;gt; unit.TestCase                 这个类是Keystone中所有单元测试类的基类，它主要初始化配置，以及初始化log
      -&amp;gt; unit.BaseTestCase           这个类主要是配置测试运行的基本环境，修改一些环境变量，比如HOME等。
        -&amp;gt; oslotest.BaseTestCase     这个是在oslotest中定义的基类，原来所有的OpenStack项目的单元测试都继承自这个基类。
                                     不过，这个继承在Keystone中已经被删除了，Keystone自己在unit.BaseTestCase中做了差不多的事情。
                                     这个是2016-02-17做的变更，具体的可以查看这个revision 262d0b66c3bcb82eadb663910ee21ded63e77a78。
          -&amp;gt; testtools.TestCase      使用testtools作为测试框架
            -&amp;gt; unittest.TestCase     testtools本身是unittest的扩展
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从上面的层次结构可以看出，OpenStack中的大项目，由于单元测试用例很多（Keystone现在有超过6200个单元测试用例），所以其单元测试架构也会比较复杂。要写好单元测试，需要先了解一下整个测试代码的架构。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;本文我们了解了Python中的单元测试的概念和工具，并且通过Keystone项目了解了实际项目中的单元测试的架构，希望有助于各位读者更好的掌握OpenStack项目的单元测试基础。&lt;a href=&quot;https://github.com/diabloneo/webdemo&quot;&gt;webdemo项目&lt;/a&gt;目前没有单元测试的代码，有兴趣的读者可以自己fork然后参考Keystone的架构为其增加完整的单元测试架构。&lt;/p&gt;

&lt;h1 id=&quot;系列后记&quot;&gt;系列后记&lt;/h1&gt;

&lt;p&gt;这个系列我打算就此结束，到目前为止一共写了8篇文章，写写停停，前后写了9个月。这里也做个小结。&lt;/p&gt;

&lt;p&gt;一开始写这个系列的文章是因为我自己在学习OpenStack开发的过程中遇到很多困难，很难找到所需的入门文章。所以打算写点文章，既能作为自己的总结，也能为其他人提供些帮助。如果这些文章能帮到你，我就非常的开心。当然，这些文章的质量肯定有好有坏，欢迎大家提意见，如果有时间，我会继续修改。&lt;/p&gt;

&lt;p&gt;然后，我想说一下写这类文章的难点，主要是要保证细节都是正确的，然后又不能太啰嗦。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;细节都是正确的&lt;/strong&gt;。举个例子，大学的很多数据结构教材中的代码，你直接贴到电脑上，然后编译，大部分是编译不通过的。这个会让初学者非常沮丧。所以我希望能够保证这些文章里的细节都是正确的，包括一些工具的配置，如果觉得有必要，我也会描述下配置的作用，以及要去哪里找更多的信息。如果这方面有遗漏，请和我说。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;不能太啰嗦&lt;/strong&gt;。这8篇文章里涉及的库有好几十个，每个库如果都讲仔细了，那就会让文章显得非常啰嗦。但是又不能直接让读者去看库的官方文档，所以权衡内容也是很麻烦的。如果各位有这方面的建议，也请和我说。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个系列的文章是关于OpenStack的基础知识，其实OpenStack开发还要涉及到很多其他的知识，比如消息队列、非阻塞IO等，而且还要了解整个OpenStack的开发生态，包括Gerrit评审系统、Zuul持续集成、devstack开发环境、oslo项目等。&lt;/p&gt;

</description>
        <pubDate>Sun, 13 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/13/learn-openstack-dev-skill-by-demo-08.html</link>
        <guid isPermaLink="true">/2016/03/13/learn-openstack-dev-skill-by-demo-08.html</guid>
        
        
      </item>
    
      <item>
        <title>通过demo学习OpenStack开发所需的基础知识 -- 数据库(2)</title>
        <description>&lt;p&gt;在上一篇文章，我们介绍了SQLAlchemy的基本概念，也介绍了基本的使用流程。本文我们结合webdemo这个项目来介绍如何在项目中使用SQLAlchemy。另外，我们还会介绍数据库版本管理的概念和实践，这也是OpenStack每个项目都需要做的事情。&lt;/p&gt;

&lt;h1 id=&quot;webdemo中的数据模型的定义和实现&quot;&gt;Webdemo中的数据模型的定义和实现&lt;/h1&gt;

&lt;p&gt;我们之前在&lt;a href=&quot;https://github.com/diabloneo/webdemo&quot;&gt;webdemo&lt;/a&gt;项目中已经开发了一个user管理的API，可以在&lt;a href=&quot;https://segmentfault.com/a/1190000004004179&quot;&gt;这里&lt;/a&gt;回顾。当时只是接收了API请求并且打印信息，并没有实际的进行数据存储。现在我们就要引入数据库操作，来完成user管理的API。&lt;/p&gt;

&lt;h2 id=&quot;user数据模型&quot;&gt;User数据模型&lt;/h2&gt;

&lt;p&gt;在开发数据库应用前，需要先定义好数据模型。因为本文只是要演示SQLAlchemy的应用，所以我们定义个最简单的数据模型。user表的定义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: 主键，一般由数据库的自增类型实现。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;user_id&lt;/strong&gt;: user id，是一个UUID字符串，是OpenStack中最常用来标记资源的方式，全局唯一，并且为该字段建立索引。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: user的名称，允许修改，全局唯一，不能为空。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;email&lt;/strong&gt;: user的email，允许修改，可以为空。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;搭建数据库层的代码框架&quot;&gt;搭建数据库层的代码框架&lt;/h2&gt;

&lt;p&gt;OpenStack项目中我见过两种数据库的代码框架分隔，一种是Keystone的风格，它把一组API的API代码和数据库代码都放在同一个目录下，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00004_keystone_db_code.png&quot; alt=&quot;Keystone的数据库代码&quot; /&gt;&lt;/p&gt;

&lt;p&gt;采用Pecan框架的项目则大多把数据库相关代码都放在db目录下，比如Magnum项目，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00005_magnum_db_code.png&quot; alt=&quot;Magnum的数据库代码&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于webdemo采用的是Pecan框架，而且把数据库操作的代码放到同一个目录下也会比较清晰，所以我们采用和Magnum项目相同的方式来编写数据库相关的代码，创建&lt;strong&gt;webdemo/db&lt;/strong&gt;目录，然后把数据库操作的相关代码都放在这个目录下，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00006_webdemo_db_code.png&quot; alt=&quot;webdemo的数据库代码&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于webdemo项目还没有使用&lt;strong&gt;oslo_db&lt;/strong&gt;库，所以代码看起来比较直观，没有Magnum项目复杂。接下来，我们就要开始写数据库操作的相关代码，分为两个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在&lt;em&gt;db/models.py&lt;/em&gt;中定义&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;类，对应数据库的user表。&lt;/li&gt;
  &lt;li&gt;在&lt;em&gt;db/api.py&lt;/em&gt;中实现一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Connection&lt;/code&gt;类，这个类封装了所有的数据库操作接口。我们会在这个类中实现对user表的CRUD等操作。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;定义user数据模型映射类&quot;&gt;定义User数据模型映射类&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;db/models.py&lt;/em&gt;中的代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy.ext&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarative&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;declarative_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;User table&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;__tablename__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__table_args__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ix_user_user_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'user_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们按照我们之前定义的数据模型，实现了映射类。&lt;/p&gt;

&lt;h3 id=&quot;实现db-api&quot;&gt;实现DB API&lt;/h3&gt;

&lt;h4 id=&quot;db通用函数&quot;&gt;DB通用函数&lt;/h4&gt;

&lt;p&gt;在&lt;em&gt;db/api.py&lt;/em&gt;中，我们先定义了一些通用函数，代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy.orm&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;webdemo.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_models&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_SESSION_MAKER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sqlite://'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db_models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_session_maker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SESSION_MAKER&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SESSION_MAKER&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SESSION_MAKER&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_SESSION_MAKER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlalchemy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionmaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SESSION_MAKER&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_session_maker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的代码中，我们定义了三个函数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_engine&lt;/code&gt;：返回全局唯一的engine，不需要重复分配。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_session_maker&lt;/code&gt;：返回全局唯一的session maker，不需要重复分配。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_session&lt;/code&gt;：每次返回一个新的session，因为一个session不能同时被两个数据库客户端使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三个函数是使用SQLAlchemy中经常会封装的，所以OpenStack的&lt;strong&gt;oslo_db&lt;/strong&gt;项目就封装了这些函数，供所有的OpenStack项目使用。&lt;/p&gt;

&lt;p&gt;这里需要注意一个地方，在&lt;code class=&quot;highlighter-rouge&quot;&gt;get_engine()&lt;/code&gt;中：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sqlite://'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db_models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们使用了sqlite内存数据库，并且立刻创建了所有的表。这么做只是为了演示方便。在实际的项目中，&lt;code class=&quot;highlighter-rouge&quot;&gt;create_engine()&lt;/code&gt;的数据库URL参数应该是从配置文件中读取的，而且也不能在创建engine后就创建所有的表（这样数据库的数据都丢了）。要解决在数据库中建表的问题，就要先了解数据库版本管理的知识，也就是&lt;strong&gt;database migration&lt;/strong&gt;，我们在下文中会说明。&lt;/p&gt;

&lt;h4 id=&quot;connection实现&quot;&gt;Connection实现&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Connection&lt;/code&gt;的实现就简单得多了，直接看代码。这里只实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;get_user()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;list_users()&lt;/code&gt;方法。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoResultFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# TODO(developer): process this situation&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;在api-controller中使用db-api&quot;&gt;在API Controller中使用DB API&lt;/h3&gt;

&lt;p&gt;现在我们有了DB API，接下来就是要在Controller中使用它。对于使用Pecan框架的应用来说，我们定义一个Pecan hook，这个hook在每个请求进来的时候实例化一个db的&lt;code class=&quot;highlighter-rouge&quot;&gt;Connection&lt;/code&gt;对象，然后在controller代码中我们可以直接使用这个&lt;code class=&quot;highlighter-rouge&quot;&gt;Connection&lt;/code&gt;实例。关于Pecan hook的相关信息，请查看&lt;a href=&quot;http://pecan.readthedocs.org/en/latest/hooks.html&quot;&gt;Pecan官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先，我们要实现这个hook，并且加入到app中。hook的实现代码在&lt;em&gt;webdemo/api/hooks.py&lt;/em&gt;中：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pecan&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;webdemo.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_api&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DBHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PecanHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Create a db connection instance.&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后，修改&lt;em&gt;webdemo/api/app.py&lt;/em&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;setup_app()&lt;/code&gt;方法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_pecan_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;app_hooks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app_conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pecan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app_conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'logging'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_conf&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在，我们就可以在controller使用DB API了。我们这里要重新实现&lt;a href=&quot;https://segmentfault.com/a/1190000004004179&quot;&gt;API服务(4)&lt;/a&gt;实现的&lt;em&gt;GET /v1/users&lt;/em&gt;这个接口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wtypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wtypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wtypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wtypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wtypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@pecan.expose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@expose.expose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db_conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_conn&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# 获取DBHook中创建的Connection实例&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 调用所需的DB API&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;users_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;users_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@expose.expose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在，我们就已经完整的实现了这个API，客户端访问API时是从数据库拿数据，而不是返回一个模拟的数据。读者可以使用&lt;a href=&quot;https://segmentfault.com/a/1190000004004179&quot;&gt;API服务(4)&lt;/a&gt;中的方法运行测试服务器来测试这个API。注意：由于数据库操作依赖于SQLAlchemy库，所以需要把它添加到&lt;em&gt;requirement.txt&lt;/em&gt;中：&lt;strong&gt;SQLAlchemy&amp;lt;1.1.0,&amp;gt;=0.9.9&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;现在我们已经完成了数据库层的代码框架搭建，读者可以大概了解到一个OpenStack项目中是如何进行数据库操作的。上面的代码可以到&lt;a href=&quot;https://github.com/diabloneo/webdemo&quot;&gt;https://github.com/diabloneo/webdemo&lt;/a&gt;下载。&lt;/p&gt;

&lt;h1 id=&quot;数据库版本管理&quot;&gt;数据库版本管理&lt;/h1&gt;

&lt;h2 id=&quot;数据库版本管理的概念&quot;&gt;数据库版本管理的概念&lt;/h2&gt;

&lt;p&gt;上面我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;get_engine()&lt;/code&gt;函数中使用了内存数据库，并且创建了所有的表。在实际项目中，这么做肯定是不行的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;实际项目中不会使用内存数据库，这种数据库一般只是在单元测试中使用。&lt;/li&gt;
  &lt;li&gt;如果每次&lt;code class=&quot;highlighter-rouge&quot;&gt;create_engine&lt;/code&gt;都把数据库的表重新创建一次，那么数据库中的数据就丢失了，绝对不可容忍。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;解决这个问题的办法也很简单：&lt;strong&gt;不使用内存数据库，并且在运行项目代码前先把数据库中的表都建好&lt;/strong&gt;。这么做确实是解决了问题，但是看起来有点麻烦：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果每次都手动写SQL语句来创建数据库中的表，会很容易出错，而且很麻烦。&lt;/li&gt;
  &lt;li&gt;如果项目修改了数据模型，那么不能简单的修改建表的SQL语句，因为重新建表会让数据丢失。我们只能增加新的SQL语句来修改现有的数据库。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;最关键的是&lt;/strong&gt;：我们怎么知道一个正在生产运行的数据库是要执行那些SQL语句？如果数据库第一次使用，那么执行全部的语句是正确的；如果数据库已经在使用，里面有数据，那么我们只能执行那些修改表定义的SQL语句，而不能执行那些重新建表的SQL语句。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了解决这种问题，就有人发明了数据库版本管理的概念，也称为&lt;strong&gt;Database Migration&lt;/strong&gt;。基本原理是：&lt;strong&gt;在我们要使用的数据库中建立一张表，里面保存了数据库的当前版本，然后我们在代码中为每个数据库版本写好所需的SQL语句。当对一个数据库执行migration操作时，会执行从当前版本到目标版本之间的所有SQL语句&lt;/strong&gt;。举个例子：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在&lt;em&gt;Version 1&lt;/em&gt;时，我们在数据库中建立一个user表。&lt;/li&gt;
  &lt;li&gt;在&lt;em&gt;Version 2&lt;/em&gt;时，我们在数据库中建立一个project表。&lt;/li&gt;
  &lt;li&gt;在&lt;em&gt;Version 3&lt;/em&gt;时，我们修改user表，增加一个age列。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么在我们对一个数据库执行migration操作，数据库的当前版本&lt;em&gt;Version 1&lt;/em&gt;，我们设定的目标版本是&lt;em&gt;Version 3&lt;/em&gt;，那么操作就是：建立一个project表，修改user表，增加一个age列，并且把数据库当前版本设置为&lt;em&gt;Version 3&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;数据库的版本管理是所有大型数据库项目的需求，每种语言都有自己的解决方案。OpenStack中主要使用SQLAlchemy的两种解决方案：&lt;a href=&quot;https://github.com/openstack/sqlalchemy-migrate&quot;&gt;sqlalchemy-migrate&lt;/a&gt;和&lt;a href=&quot;https://alembic.readthedocs.org/en/latest/&quot;&gt;Alembic&lt;/a&gt;。早期的OpenStack项目使用了sqlalchemy-migrate，后来换成了Alembic。做出这个切换的主要原因是Alembic对数据库版本的设计和管理更灵活，可以支持分支，而sqlalchemy-migrate只能支持直线的版本管理，具体可以看OpenStack的WiKi文档&lt;a href=&quot;https://wiki.openstack.org/wiki/Obsolete:Alembic&quot;&gt;Alembic&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;接下来，我们就在我们的webdemo项目中引入Alembic来进行版本管理。&lt;/p&gt;

&lt;h2 id=&quot;alembic&quot;&gt;Alembic&lt;/h2&gt;

&lt;p&gt;要使用Alembic，大概需要以下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装Alembic&lt;/li&gt;
  &lt;li&gt;在项目中创建Alembic的migration环境&lt;/li&gt;
  &lt;li&gt;修改Alembic配置文件&lt;/li&gt;
  &lt;li&gt;创建migration脚本&lt;/li&gt;
  &lt;li&gt;执行迁移动作&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看起来步骤很复杂，其实搭建好环境后，新增数据库版本只需要执行最后两个步骤。&lt;/p&gt;

&lt;h3 id=&quot;安装alembic&quot;&gt;安装Alembic&lt;/h3&gt;

&lt;p&gt;在&lt;em&gt;webdemo/requirements.txt&lt;/em&gt;中加入：&lt;strong&gt;alembic&amp;gt;=0.8.0&lt;/strong&gt;。然后在virtualenv中安装即可。&lt;/p&gt;

&lt;h3 id=&quot;在项目中创建alembic的migration环境&quot;&gt;在项目中创建Alembic的migration环境&lt;/h3&gt;

&lt;p&gt;一般OpenStack项目中，Alembic的环境都是放在&lt;em&gt;db/sqlalchemy/&lt;/em&gt;目录下，因此，我们先建立目录&lt;em&gt;webdemo/db/sqlalchemy/&lt;/em&gt;，然后在这个目录下初始化Alembic环境：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(.venv)➜ ~/programming/python/webdemo git:(master) ✗ $ cd webdemo/db
(.venv)➜ ~/programming/python/webdemo/webdemo/db git:(master) ✗ $ ls
api.py  api.pyc  __init__.py  __init__.pyc  models.py  models.pyc  sqlalchemy
(.venv)➜ ~/programming/python/webdemo/webdemo/db git:(master) ✗ $ cd sqlalchemy
(.venv)➜ ~/programming/python/webdemo/webdemo/db/sqlalchemy git:(master) ✗ $ ls
(.venv)➜ ~/programming/python/webdemo/webdemo/db/sqlalchemy git:(master) ✗ $ alembic init alembic
  Creating directory /home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic ... done
  Creating directory /home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic/versions ... done
  Generating /home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic/script.py.mako ... done
  Generating /home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic.ini ... done
  Generating /home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic/README ... done
  Generating /home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic/env.pyc ... done
  Generating /home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic/env.py ... done
  Please edit configuration/connection/logging settings in '/home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic.ini' before proceeding.
(.venv)➜ ~/programming/python/webdemo/webdemo/db/sqlalchemy git:(master) ✗ $
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在，我们就在&lt;em&gt;webdemo/db/sqlalchemy/alembic/&lt;/em&gt;目录下建立了一个Alembic migration环境：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00007_alembic_migration_environment.png&quot; alt=&quot;Alembic Migration Environment&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;修改alembic配置文件&quot;&gt;修改Alembic配置文件&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;webdemo/db/sqlalchemy/alembic.ini&lt;/em&gt;文件是Alembic的配置文件，我们现在需要修改文件中的&lt;strong&gt;sqlalchemy.url&lt;/strong&gt;这个配置项，用来指向我们的数据库。这里，我们使用SQLite数据库，数据库文件存放在webdemo项目的根目录下，名称是&lt;strong&gt;webdemo.db&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# sqlalchemy.url = driver://user:pass@localhost/dbname
sqlalchemy.url = sqlite:///../../../webdemo.db
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：实际项目中，数据库的URL信息是从项目配置文件中读取，然后通过动态的方式传递给Alembic的。具体的做法，读者可以参考Magnum项目的实现：&lt;a href=&quot;https://github.com/openstack/magnum/blob/master/magnum/db/sqlalchemy/migration.py&quot;&gt;https://github.com/openstack/magnum/blob/master/magnum/db/sqlalchemy/migration.py&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;创建migration脚本&quot;&gt;创建migration脚本&lt;/h3&gt;

&lt;p&gt;现在，我们可以创建第一个迁移脚本了，我们的第一个数据库版本就是创建我们的user表：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(.venv)➜ ~/programming/python/webdemo/webdemo/db/sqlalchemy git:(master) ✗ $ alembic revision -m &quot;Create user table&quot;
  Generating /home/diabloneo/programming/python/webdemo/webdemo/db/sqlalchemy/alembic/versions/4bafdb464737_create_user_table.py ... done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在脚本已经帮我们生成好了，不过这个只是一个空的脚本，我们需要自己实现里面的具体操作，补充完整后的脚本如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Create user table

Revision ID: 4bafdb464737
Revises:
Create Date: 2016-02-21 12:24:46.640894

&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# revision identifiers, used by Alembic.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;revision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'4bafdb464737'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;down_revision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;branch_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;alembic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sa&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其实就是把&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;类的定义再写了一遍，使用了Alembic提供的接口来方便的创建和删除表。&lt;/p&gt;

&lt;h3 id=&quot;执行迁移操作&quot;&gt;执行迁移操作&lt;/h3&gt;

&lt;p&gt;我们需要在&lt;em&gt;webdemo/db/sqlalchemy/&lt;/em&gt;目录下执行迁移操作，可能需要手动指定PYTHONPATH：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(.venv)➜ ~/programming/python/webdemo/webdemo/db/sqlalchemy git:(master) ✗ $ PYTHONPATH=../../../ alembic upgrade head
INFO  [alembic.migration] Context impl SQLiteImpl.
INFO  [alembic.migration] Will assume non-transactional DDL.
INFO  [alembic.migration] Running upgrade  -&amp;gt; 4bafdb464737, Create user table
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alembic upgrade head&lt;/code&gt;会把数据库升级到最新的版本。这个时候，在webdemo的根目录下会出现&lt;strong&gt;webdemo.db&lt;/strong&gt;这个文件，可以使用sqlite3命令查看内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(.venv)➜ ~/programming/python/webdemo git:(master) ✗ $ ls
AUTHORS  build  ChangeLog  dist  LICENSE  README.md  requirements.txt  Session.vim  setup.cfg  setup.py  webdemo  webdemo.db  webdemo.egg-info
(.venv)➜ ~/programming/python/webdemo git:(master) ✗ $ sqlite3 webdemo.db
SQLite version 3.8.11.1 2015-07-29 20:00:57
Enter &quot;.help&quot; for usage hints.
sqlite&amp;gt; .tables
alembic_version  user
sqlite&amp;gt; .schema alembic_version
CREATE TABLE alembic_version (
        version_num VARCHAR(32) NOT NULL
);
sqlite&amp;gt; .schema user
CREATE TABLE user (
        id INTEGER NOT NULL,
        user_id VARCHAR(255) NOT NULL,
        name VARCHAR(64) NOT NULL,
        email VARCHAR(255),
        PRIMARY KEY (id),
        UNIQUE (name)
);
sqlite&amp;gt; .header on
sqlite&amp;gt; select * from alembic_version;
version_num
4bafdb464737
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;测试新的数据库&quot;&gt;测试新的数据库&lt;/h3&gt;

&lt;p&gt;现在我们可以把之前使用的内存数据库换掉，使用我们的文件数据库，修改&lt;code class=&quot;highlighter-rouge&quot;&gt;get_engine()&lt;/code&gt;函数：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sqlite:///webdemo.db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ENGINE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在你可以手动往webdemo.db中添加数据，然后测试下API：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ ~/programming/python/webdemo git:(master) ✗ $ sqlite3 webdemo.db
SQLite version 3.8.11.1 2015-07-29 20:00:57
Enter &quot;.help&quot; for usage hints.
sqlite&amp;gt; .header on
sqlite&amp;gt; select * from user;
sqlite&amp;gt; .schema user
CREATE TABLE user (
        id INTEGER NOT NULL,
        user_id VARCHAR(255) NOT NULL,
        name VARCHAR(64) NOT NULL,
        email VARCHAR(255),
        PRIMARY KEY (id),
        UNIQUE (name)
);
sqlite&amp;gt; insert into user values(1, &quot;user_id&quot;, &quot;Alice&quot;, &quot;alice@example.com&quot;);
sqlite&amp;gt; select * from user;
id|user_id|name|email
1|user_id|Alice|alice@example.com
sqlite&amp;gt; .q
➜ ~/programming/python/webdemo git:(master) ✗ $
➜ ~/programming/python/webdemo git:(master) ✗ $ curl http://localhost:8080/v1/users
{&quot;users&quot;: [{&quot;email&quot;: &quot;alice@example.com&quot;, &quot;user_id&quot;: &quot;user_id&quot;, &quot;id&quot;: 1, &quot;name&quot;: &quot;Alice&quot;}]}% 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;小结-1&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;现在，我们就已经完成了database migration代码框架的搭建，可以成功执行了第一个版本的数据库迁移。OpenStack项目中也是这么来做数据库迁移的。后续，一旦修改了项目，需要修改数据模型时，只要新增migration脚本即可。这部分代码也可以在&lt;a href=&quot;https://github.com/diabloneo/webdemo&quot;&gt;https://github.com/diabloneo/webdemo&lt;/a&gt;中看到。&lt;/p&gt;

&lt;p&gt;在实际生产环境中，当我们发布了一个项目的新版本后，在上线的时候，都会自动执行数据库迁移操作，升级数据库版本到最新的版本。如果线上的数据库版本已经是最新的，那么这个操作没有任何影响；如果不是最新的，那么会把数据库升级到最新的版本。&lt;/p&gt;

&lt;p&gt;关于Alembic的更多使用方法，请阅读官方文档&lt;a href=&quot;https://alembic.readthedocs.org/en/latest/&quot;&gt;Alembic&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;本文到这边就结束了，这两篇文章我们了解OpenStack中数据库应用开发的基础知识。接下来，我们将会了解OpenStack中单元测试的相关知识。&lt;/p&gt;

</description>
        <pubDate>Sun, 21 Feb 2016 00:00:00 +0800</pubDate>
        <link>/2016/02/21/learn-openstack-dev-skill-by-demo-07.html</link>
        <guid isPermaLink="true">/2016/02/21/learn-openstack-dev-skill-by-demo-07.html</guid>
        
        
      </item>
    
      <item>
        <title>通过demo学习OpenStack开发所需的基础知识 -- 数据库(1)</title>
        <description>&lt;h1 id=&quot;openstack中的关系型数据库应用&quot;&gt;OpenStack中的关系型数据库应用&lt;/h1&gt;

&lt;p&gt;OpenStack中的数据库应用主要是关系型数据库，主要使用的是MySQL数据库。当然也有一些NoSQL的应用，比如Ceilometer项目。就SQL数据库本身的应用而言，OpenStack的项目和其他项目并没有什么区别，也是采用ORM技术对数据进行增删改查而已。&lt;/p&gt;

&lt;p&gt;本文的重点是讲解OpenStack项目中对关系型数据库的应用的基础知识，更多的是涉及ORM库的使用。对于数据库的安装和配置，需要读者自己查找一下MySQL的教程，如果只是为了验证ORM的相关知识，也可以使用sqlite数据库。&lt;/p&gt;

&lt;h2 id=&quot;数据库的选择&quot;&gt;数据库的选择&lt;/h2&gt;

&lt;p&gt;OpenStack官方推荐的保存生产数据的是MySQL数据库，在devstack项目（这个项目用于快速搭建OpenStack开发环境）中也是安装了MySQL数据库。不过，因为OpenStack的项目中没有使用特定的只有在MySQL上才能用的功能，而且所采用的ORM库SQLAlchemy也支持多种数据库，所以理论上选择PostgreSQL之类的数据库来替代MySQL也是可行的。&lt;/p&gt;

&lt;p&gt;另外，OpenStack项目在单元测试中使用的是sqlite的内存数据库，这样开发者运行单元测试的时候不需要安装和配置复杂的MySQL数据库，只要安装好sqlite3就可以了。而且，数据库是保存在内存中的，会提高单元测试的速度。&lt;/p&gt;

&lt;h2 id=&quot;orm的选择&quot;&gt;ORM的选择&lt;/h2&gt;

&lt;h3 id=&quot;什么是orm&quot;&gt;什么是ORM&lt;/h3&gt;

&lt;p&gt;ORM的全称是&lt;strong&gt;Object-Relational Mapping&lt;/strong&gt;，即&lt;strong&gt;对象关系映射&lt;/strong&gt;，是一种利用编程语言的对象来表示关系数据库中的数据的技术，其更形式化的定义可以参考&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;Wiki页面Orject-relational mapping&lt;/a&gt;。简单的说，ORM就是把数据库的一张表和编程语言中的一个对象对应起来，这样我们在编程语言中操作一个对象的时候，实际上就是在操作这张表，ORM（一般是一个库）负责把我们对一个对象的操作转换成对数据库的操作。&lt;/p&gt;

&lt;h3 id=&quot;python中的orm实现&quot;&gt;Python中的ORM实现&lt;/h3&gt;

&lt;p&gt;一般来说，各种主流语言都有自己的ORM实现，一般来说也不只一种，比较出名的有Java的Hibernate，Ruby on Rails的ORM，C++的ODB等。&lt;strong&gt;在Python中也存在多种ORM的实现，最著名的两种是Django的Model层的ORM实现，以及SQLAlchemy库&lt;/strong&gt;。这两种ORM实现基本上是Python中ORM的事实上的标准，如果你写Django应用，那么你就用Django自带的实现；不然，你就可以选择SQLAlchemy库。&lt;/p&gt;

&lt;p&gt;OpenStack基本上都是Python项目，所以在OpenStack中，ORM主要是使用了SQLAlchemy库（Keystone, Nova, Neutron等）；不过使用了Django的Horizon项目（面板）还是使用了Django自带的ORM实现。本文主要是讲解OpenStack中如何使用SQLAlchemy库，这个也是开发OpenStack项目的最基本知识。&lt;/p&gt;

&lt;h1 id=&quot;sqlalchemy&quot;&gt;SQLAlchemy&lt;/h1&gt;

&lt;h2 id=&quot;sqlalchemy简介&quot;&gt;SQLAlchemy简介&lt;/h2&gt;

&lt;p&gt;SQLAlchemy项目是Python中最著名的ORM实现，不仅在Python项目中也得到了广泛的应用，而且对其他语言的ORM有很大的影响。OpenStack一开始选择这个库，也是看中了它足够稳定、足够强大的特点。&lt;/p&gt;

&lt;p&gt;SQLAlchemy项目的官网是&lt;a href=&quot;http://www.sqlalchemy.org/&quot;&gt;http://www.sqlalchemy.org/&lt;/a&gt;，目前该项目最新的版本是&lt;strong&gt;1.0.11&lt;/strong&gt;，&lt;strong&gt;1.0&lt;/strong&gt;系列是今年刚发的，&lt;strong&gt;0.9&lt;/strong&gt;系列应该还是应用最广泛的版本。对于一般的应用来说，0.9系列和1.0系列差别不大。&lt;/p&gt;

&lt;h2 id=&quot;关于sqlalchemy的学习&quot;&gt;关于SQLAlchemy的学习&lt;/h2&gt;

&lt;p&gt;我个人觉得SQLAlchemy的学习难度会比Django的Model层难一些，因为一个最简单的例子也会有一些不太直观的地方，对于没用过的人来说，会比较难以理解。不过SQLAlchemy官网整理了一些比较不错的入门教程，是一个比较好的学习起点：&lt;a href=&quot;http://www.sqlalchemy.org/library.html#tutorials&quot;&gt;Tutorials&lt;/a&gt;。另外，官方的Reference其实是一个很好的教程，讲了很多基本的概念，有助于理解SQLAlchemy的库的使用。Reference的地址是：&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/&quot;&gt;http://docs.sqlalchemy.org/en/rel_1_0/&lt;/a&gt;，还可以直接下载PDF版本。我个人建议大家直接阅读Reference即可，阅读顺序就按照PDF文件的章节编排顺序进行。虽然这个文档很长，但是我最后发现这么做是最节约时间的。&lt;/p&gt;

&lt;h2 id=&quot;sqlalchemy的架构&quot;&gt;SQLAlchemy的架构&lt;/h2&gt;

&lt;p&gt;先让我们来看一下SQLAlchemy这个库的总体架构，如下图（图来自官网）所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/00002_sql_alchemy_architecture.png&quot; alt=&quot;sqla_arch_small.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SQLAlchemy这个库分为两层：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上面这层是ORM层，为用户提供ORM接口，即通过操作Python对象来实现数据库操作的接口。&lt;/li&gt;
  &lt;li&gt;下面这层是Core层，这层包含了&lt;em&gt;Schema/Types&lt;/em&gt;, &lt;em&gt;SQL Expression Language&lt;/em&gt;, &lt;em&gt;Engine&lt;/em&gt;这三个部分：
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;SQL Expression Language&lt;/em&gt;是SQLAlchemy中实现的一套SQL表达系统，主要是实现了对SQL的DML(Data Manipulation Language)的封装。这里实现了对数据库的SELECT、DELETE、UPDATE等语句的封装。SQL Expression Language是实现ORM层的基础。&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Schema/Types&lt;/em&gt;这部分主要是实现了对SQL的DDL(Data Definition Language)的封装。实现了Table类用来表示一个表，Column类用来表示一个列，也是实现了将数据库的数据类型映射到Python的数据类型。上面的&lt;em&gt;SQL Expression Language&lt;/em&gt;的操作对象就是这里定义的Table。&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Engine&lt;/em&gt;实现了对各种不同的数据库客户端的封装和调度，是所有SQLAlchemy应用程序的入口点，要使用SQLAlchemy库来操作一个数据库，首先就要有一个Engine对象，后续的所有对数据库的操作都要通过这个Engine对象来进行。下图是官方文档中的Engine位置的描述图：
&lt;img src=&quot;/assets/imgs/00003_sql_alchemy_engine_position.png&quot; alt=&quot;sqla_engine_arch.png&quot; /&gt;
        &lt;ul&gt;
          &lt;li&gt;Pool是Engine下面的一个模块，用来管理应用程序到数据库的连接。&lt;/li&gt;
          &lt;li&gt;Dialect是Engine下的另一个模块，用来对接不同的数据库驱动（即DBMS客户端），这些驱动要实现DBAPI接口。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;最后，SQLAlchemy还要依赖各个数据库驱动的DBAPI接口来实现对数据库服务的调用。DBAPI是Python定义的数据库API的实现规范，具体见&lt;a href=&quot;https://www.python.org/dev/peps/pep-0249/&quot;&gt;&lt;strong&gt;PEP0249&lt;/strong&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面简单的总结了SQLAlchemy的架构，希望大家能够大概了解一下SQLAlchemy，在后面介绍一些相关概念时，能够知道这个概念是属于整个架构的哪个部分。&lt;/p&gt;

&lt;h3 id=&quot;dialect和数据库客户端&quot;&gt;Dialect和数据库客户端&lt;/h3&gt;

&lt;p&gt;上面提到了Dialect是用来对接不同的数据库驱动的，它主要负责将SQLAlchemy最后生成的数据库操作转换成对数据库驱动的调用，其中会处理一些不同数据库和不同DBAPI实现的差别。这个部分一般是SQLAlchemy的开发者关心的内容，如果你只是使用SQLAlchemy来操作数据库，那么可以不用关心这个部分。不过我们还是要来了解一下SQLAlchemy支持的和OpenStack相关的数据库驱动。&lt;/p&gt;

&lt;h4 id=&quot;mysql&quot;&gt;MySQL&lt;/h4&gt;

&lt;p&gt;OpenStack项目主要是使用MySQL，之前一直都在使用&lt;a href=&quot;https://pypi.python.org/pypi/MySQL-python/&quot;&gt;&lt;strong&gt;MySQL-Python&lt;/strong&gt;&lt;/a&gt;驱动，因为这个驱动足够成熟和稳定。不过这个情况正在转变，有如下两个原因：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;MySQL-Python&lt;/strong&gt;不支持Python3，而OpenStack正在转换到Python3的过程中，所以这个驱动最终是要放弃的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MySQL-Python&lt;/strong&gt;是用C语言写的，不支持eventlet库的monkey-patch操作，无法被eventlet库转换成异步操作，所以使用了eventlet库的到OpenStack项目在使用MySQL数据库时，都是进行同步的串行操作，有性能损失。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了解决这个问题，社区发起了一次对新驱动的评估，主要是评估&lt;a href=&quot;https://pypi.python.org/pypi/PyMySQL/&quot;&gt;&lt;strong&gt;PyMySQL&lt;/strong&gt;&lt;/a&gt;驱动：&lt;a href=&quot;https://wiki.openstack.org/wiki/PyMySQL_evaluation&quot;&gt;PyMySQL Evaluation&lt;/a&gt;。这个评估还在社区的邮件列表发起了好几次讨论，到目前为止的结果是：&lt;strong&gt;如果使用Python 2.7，那么继续使用MySQL-Python这个驱动，否则就使用PyMySQL这个驱动&lt;/strong&gt;。&lt;strong&gt;PyMySQL&lt;/strong&gt;驱动是使用纯Python写的，不仅支持Python3而且可以支持eventlet的异步。&lt;/p&gt;

&lt;h4 id=&quot;sqlite3&quot;&gt;SQLite3&lt;/h4&gt;

&lt;p&gt;OpenStack项目一般会使用SQLite3数据库来运行单元测试。OpenStack在Python2.7下会使用&lt;a href=&quot;https://pypi.python.org/pypi/pysqlite/&quot;&gt;&lt;strong&gt;pysqlite&lt;/strong&gt;&lt;/a&gt;驱动，不过这个驱动和标准库中的&lt;strong&gt;sqlite3&lt;/strong&gt;模块是一样的，也就是Python内置了SQLite3的驱动，你无需选择其他的驱动。&lt;/p&gt;

&lt;h2 id=&quot;sqlalchemy的基本概念和使用&quot;&gt;SQLAlchemy的基本概念和使用&lt;/h2&gt;

&lt;p&gt;使用SQLAlchemy大体上分为三个步骤：连接到数据库，定义数据模型，执行数据操作。&lt;/p&gt;

&lt;h3 id=&quot;连接到数据库&quot;&gt;连接到数据库&lt;/h3&gt;

&lt;p&gt;在你的应用可以使用数据库前，你要先定义好数据库的连接，包括数据库在哪里，用什么账号访问等。所有的这些工作都是通过Engine对象来进行的（记得上面提到的Engine了么？）。&lt;/p&gt;

&lt;h4 id=&quot;数据库url&quot;&gt;数据库URL&lt;/h4&gt;

&lt;p&gt;SQLAlchemy使用URL的方式来指定要访问的数据库，整个URL的具体格式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dialect+driver://username:password@host:port/database
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，&lt;strong&gt;dialect&lt;/strong&gt;就是指DBMS的名称，一般可选的值有：&lt;em&gt;postgresql&lt;/em&gt;, &lt;em&gt;mysql&lt;/em&gt;, &lt;em&gt;sqlite&lt;/em&gt;等。&lt;strong&gt;driver&lt;/strong&gt;就是指驱动的名称，如果不指定，SQLAlchemy会使用默认值。&lt;em&gt;database&lt;/em&gt;就是指DBMS中的一个数据库，一般是指通过&lt;em&gt;CREATE DATABASE&lt;/em&gt;语句创建的数据库。其他的参数就不言而喻了。dialect和driver参数有很多选择，具体的可以参考官方文档：&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html#database-urls&quot;&gt;Database URLs&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建engine对象&quot;&gt;创建Engine对象&lt;/h4&gt;

&lt;p&gt;确定了要连接的数据库信息后，就可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;create_engine&lt;/code&gt;函数来创建一个&lt;strong&gt;Engine&lt;/strong&gt;对象了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sqlite://:memory:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create_engine&lt;/code&gt;函数还支持以下几个参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;connect_args&lt;/em&gt;：一个字典，用来自定义数据库连接的参数，比如指定客户端使用的字符编码。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;pool_size&lt;/em&gt;和&lt;em&gt;max_overflow&lt;/em&gt;：指定连接池的大小。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;poolclass&lt;/em&gt;：指定连接池的实现&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;echo&lt;/em&gt;：一个布尔值，用来指定是否打印执行的SQL语句到日志中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有很多其他的参数，可以参考官方文档：&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html&quot;&gt;Engine Configuration&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;一般来说，Engine对象会默认启用连接池，会根据不同的dialect来选择不同的默认值。一般来说，你是不用考虑连接池的配置的，默认情况都配置好了。想了解关于连接池的更多内容，请查看官方文档：&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/core/pooling.html&quot;&gt;Connection Pooling&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;使用engine对象&quot;&gt;使用Engine对象&lt;/h4&gt;

&lt;p&gt;一般来说，应用程序的代码是不直接使用Engine对象的，而是把Engine对象交给ORM去使用，或者创建session对象来使用。不过，我们还是来简单看一下Engine对象能做什么事情。&lt;/p&gt;

&lt;p&gt;应用程序可以调用Engine对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt;方法来获得一个到数据库的连接对象；然后可以在这个连接对象上调用&lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt;来执行SQL语句，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;begin()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;commit()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;rollback()&lt;/code&gt;来执行事务操作；调用&lt;code class=&quot;highlighter-rouge&quot;&gt;close()&lt;/code&gt;来关闭连接。Engine对象也有一些快捷方法来直接执行上述操作，避免了每次都要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt;来获取连接这种繁琐的代码，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;engine.execute()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;with engine.begin()&lt;/code&gt;等。&lt;/p&gt;

&lt;h3 id=&quot;定义数据模型&quot;&gt;定义数据模型&lt;/h3&gt;

&lt;p&gt;有了数据库连接后，我们就可以来定义数据模型了，也就是定义映射数据库表的Python类。在SQLAlchemy中，这是通过&lt;strong&gt;Declarative&lt;/strong&gt;的系统来完成的。&lt;/p&gt;

&lt;h4 id=&quot;declarative系统&quot;&gt;Declarative系统&lt;/h4&gt;

&lt;p&gt;根据官方文档的描述，SQLAlchemy一开始是采用下面这种方式来定义ORM的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先定义一个映射类，这个类是数据库表在代码中的对象表示，这类的类属性是很多Column类的实例。&lt;/li&gt;
  &lt;li&gt;然后定义一个Table对象，这里的Table就是上面提到的在&lt;strong&gt;Schema/Types&lt;/strong&gt;模块中的一个类，用来表示一个数据库中的表。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;sqlalchemy.orm.mapper&lt;/code&gt;函数把步骤1中定义的类映射到步骤2中定义的Table。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面这种方式称为&lt;em&gt;Classical Mappings&lt;/em&gt;，看起来好麻烦啊。所以就有了&lt;strong&gt;Declarative&lt;/strong&gt;系统。这个系统就是一次完成这三个步骤，你只需要定义步骤1中的类即可。这也是现在在SQLAlchemy中使用ORM的方式，无需在使用过去这种麻烦的方法。&lt;/p&gt;

&lt;p&gt;要使用Declarative系统，你需要为所有映射类创建一个基类，这个基类用来维护所有映射类的元信息。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarative_base&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarative_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;定义映射类&quot;&gt;定义映射类&lt;/h4&gt;

&lt;p&gt;现在我们可以开始创建映射类了。假设我们在数据库中有一个表Person，这个表有两个列，分别是id和name，那么我们创建的映射类如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 这里的基类Base是上面我们通过declarative_base函数生成的&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__tablename__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'person'&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样我们就定义了一个映射类&lt;strong&gt;Person&lt;/strong&gt;，后续我们可以通过操作这个类的实例来实现对数据库表&lt;strong&gt;person&lt;/strong&gt;的操作。在我们的映射类中，我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;__tablename__&lt;/code&gt;属性来指定该映射类所对应的数据库表，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Column&lt;/code&gt;类实例的方式来指定数据库的字段。这里，读者可能会问：&lt;strong&gt;我如何能知道&lt;code class=&quot;highlighter-rouge&quot;&gt;Column&lt;/code&gt;都能支持哪些类型呢？&lt;/strong&gt;这个查看官方文档获得：&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/core/type_basics.html&quot;&gt;Column And Data Types&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;因为我们使用了Declarative系统，所以虽然我们自己没有定义Table对象，但是Declarative系统帮我们做了，并且帮我们调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;mapper&lt;/code&gt;函数。因此，当我们定义好一个表的映射类后，这个类的&lt;code class=&quot;highlighter-rouge&quot;&gt;__table__&lt;/code&gt;属性就保存了该映射类所映射的&lt;em&gt;Table&lt;/em&gt;对象：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [6]: Person.__table__
Out[6]: Table('person', MetaData(bind=None),
    Column('id', Integer(), table=&amp;lt;person&amp;gt;, primary_key=True, nullable=False),
    Column('name', String(length=250), table=&amp;lt;person&amp;gt;, nullable=False), schema=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;定义映射类是我们使用ORM的最主要的功能之一，不仅可以指定单表的映射，还能够指定表之间的关系。由于篇幅限制，我们在本文就不展开讲了。&lt;/p&gt;

&lt;h3 id=&quot;schema和metadata&quot;&gt;Schema和Metadata&lt;/h3&gt;

&lt;p&gt;关于Table对象，我们上面也提到了，它属于SQLAlchemy的core层的&lt;strong&gt;Schema/Types&lt;/strong&gt;这个部分。SQLAlchemy中的Schema可以理解为和DDL相关的一套体系，它告诉SQLAlchemy的其他部分，数据库中的表是如何定义的。这个相当于我们在MySQL中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt;命令，或者在PostgreSQL中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;\d&lt;/code&gt;命令。&lt;/p&gt;

&lt;p&gt;SQLAlchemy中通过&lt;strong&gt;schema metadata&lt;/strong&gt;来实现上面说的Schema。&lt;strong&gt;Schema metadata&lt;/strong&gt;，官方文档中也称为&lt;strong&gt;database metadata&lt;/strong&gt;，简称为metadata，是一个容器，其中包含了和DDL相关的所有信息，包括Table, Column等对象。当SQLAlchemy要根据映射类生成SQL语句时，它会查询metadata中的信息，根据信息来生成SQL语句。&lt;/p&gt;

&lt;p&gt;为了要让metadata可以工作，我们需要把DDL的相关信息放到metadata中。如果你注意看上面&lt;code class=&quot;highlighter-rouge&quot;&gt;Person.__table__&lt;/code&gt;的输出，就会发现&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;类的第二个参数就是一个Metadata实例，也就是说，我们需要在定义Table的时候就把DDL信息放到metadata中。如果是是用classical mapping的方式，我们需要先创建一个metadata实例，然后每次创建一个Table对象的时候就把metadata传递进去。从写代码的角度来说，这个方式没有什么问题，也不算麻烦；问题是我们在使用ORM的过程中，几乎不会用到metadata，metadata基本上是给SQLAlchemy用的，对于用户来说metadata提供的接口只能用来创建表和删除表，这种操作的频率远低于查询操作。&lt;/p&gt;

&lt;p&gt;好在Declarative系统则帮我们把这些都做好了。当我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;declarative_base()&lt;/code&gt;生成一个基类Base的时候，这个基类就已经包含了一个metadata实例，后面基于Base定义映射类都会被自动加入到这个metadata中。我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Base.metadata&lt;/code&gt;来访问这个metadata实例。&lt;/p&gt;

&lt;p&gt;说了这么多关于metadata的内容，简单总结一下：metadata是schema在SQLAlchemy中的实现，包含了DDL的信息，SQLAlchemy中的其他部分需要依赖于metadata中的信息，一般用户很少使用metadata。&lt;/p&gt;

&lt;p&gt;很少用？那说这么多是做啥？主要是让读者可以理解下面这个语句的原理：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarative_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 基于Base定义映射类&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后这行代码是我们最常用到metadata的地方：&lt;strong&gt;创建所有的表&lt;/strong&gt;。我们告诉&lt;code class=&quot;highlighter-rouge&quot;&gt;create_all&lt;/code&gt;使用哪个engine，它就会生成所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE TABLE&lt;/code&gt;语句，并且通过engine发送到数据库上执行。这个在单元测试的时候很有用。你可以执行一下下面的代码来观察输出：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarative_base&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declarative_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__tablename__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'person'&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sqlite:///:memory:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;输出结果如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
...
2016-01-06 09:56:03,600 INFO sqlalchemy.engine.base.Engine PRAGMA table_info&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
2016-01-06 09:56:03,601 INFO sqlalchemy.engine.base.Engine &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
2016-01-06 09:56:03,602 INFO sqlalchemy.engine.base.Engine
CREATE TABLE person &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        id INTEGER NOT NULL,
        name VARCHAR&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;250&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOT NULL,
        PRIMARY KEY &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

2016-01-06 09:56:03,603 INFO sqlalchemy.engine.base.Engine &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
2016-01-06 09:56:03,603 INFO sqlalchemy.engine.base.Engine COMMIT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于Metadata的更多信息，请查看官方文档：&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/core/schema.html&quot;&gt;Schema Definition Language&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;会话&quot;&gt;会话&lt;/h3&gt;

&lt;p&gt;会话(&lt;strong&gt;session&lt;/strong&gt;)是我们通过SQLAlchemy来操作数据库的入口。我们前面有介绍过SQLAlchemy的架构，session是属于ORM层的。Session的功能是管理我们的程序和数据库之间的会话，它利用Engine的连接管理功能来实现会话。我们在上文有提到，我们创建了Engine对象，但是一般不直接使用它，而是把它交给ORM去使用。其中，通过session来使用Engine就是一个常用的方式。&lt;/p&gt;

&lt;p&gt;要是用session，我们需要先通过&lt;code class=&quot;highlighter-rouge&quot;&gt;sessionmaker&lt;/code&gt;函数创建一个session类，然后通过这个类的实例来使用会话，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionmaker&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DBSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionmaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;sessionmaker&lt;/code&gt;的&lt;em&gt;bind&lt;/em&gt;参数把Engine对象传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;DBSession&lt;/code&gt;去管理。然后，&lt;code class=&quot;highlighter-rouge&quot;&gt;DBSession&lt;/code&gt;实例化的对象&lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt;就能被我们使用了。&lt;/p&gt;

&lt;h3 id=&quot;crud&quot;&gt;CRUD&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CRUD&lt;/strong&gt;就是CREATE, READ, UPDATE, DELETE，增删改查。这个也是SQLAlchemy中最常用的功能，而且都是通过上一小节中的&lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt;对象来使用的。我们这简单的介绍一下这四个操作，后面会给出官方文档的位置。&lt;/p&gt;

&lt;h4 id=&quot;create&quot;&gt;Create&lt;/h4&gt;

&lt;p&gt;在数据库中插入一条记录，是通过session的&lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt;方法来实现的，你需要先创建一个映射类的实例，然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;session.add()&lt;/code&gt;方法，然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;session.commit()&lt;/code&gt;方法提交你的事务（关于事务，我们下面会专门讲解）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'new person'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;delete&quot;&gt;Delete&lt;/h4&gt;

&lt;p&gt;删除操作和创建操作差不多，是把一个映射类实例传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;session.delete()&lt;/code&gt;方法。&lt;/p&gt;

&lt;h4 id=&quot;update&quot;&gt;Update&lt;/h4&gt;

&lt;p&gt;更新一条记录需要先使用查询操作获得一条记录对应的对象，然后修改对象的属性，再通过&lt;code class=&quot;highlighter-rouge&quot;&gt;session.add()&lt;/code&gt;方法来完成更新操作。&lt;/p&gt;

&lt;h4 id=&quot;read&quot;&gt;Read&lt;/h4&gt;

&lt;p&gt;查询操作，一般称为query，在SQLAlchemy中一般是通过&lt;strong&gt;Query&lt;/strong&gt;对象来完成的。我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;session.query()&lt;/code&gt;方法来创建一个Query对象，然后调用Query对象的众多方法来完成查询操作。&lt;/p&gt;

&lt;h3 id=&quot;事务&quot;&gt;事务&lt;/h3&gt;

&lt;p&gt;使用session，就会涉及到事务，我们的应用程序也会有很多事务操作的要求。当你调用一个session的方法，导致session执行一条SQL语句时，它会自动开始一个事务，直到你下次调用&lt;code class=&quot;highlighter-rouge&quot;&gt;session.commit()&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;session.rollback()&lt;/code&gt;，它就会结束这个事务。你也可以显示的调用&lt;code class=&quot;highlighter-rouge&quot;&gt;session.begin()&lt;/code&gt;来开始一个事务，并且&lt;code class=&quot;highlighter-rouge&quot;&gt;session.begin()&lt;/code&gt;还可以配合Python的with来使用。&lt;/p&gt;

&lt;h3 id=&quot;会话-crud-事务的小结&quot;&gt;会话, CRUD, 事务的小结&lt;/h3&gt;

&lt;p&gt;上面关于session, CRUD和事务的内容写的比较少，因为这些功能的内容很多，而且官方文档也写得很全面，本文就不做一些重复说明了。我们会在下一篇文章中通过webdemo的代码来看看如何使用这些功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/orm/session.html&quot;&gt;Session的文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/orm/tutorial.html#adding-new-objects&quot;&gt;官方文档中关于CRUD操作的教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_1_0/orm/session_transaction.html&quot;&gt;Session中的事务管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;本文介绍了OpenStack中和数据库相关的一些知识，重点讲解了SQLAlchemy这个库的基本概念和架构。下一篇文章，我们会通过demo来实际项目中如何使用SQLAlchemy。&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Jan 2016 00:00:00 +0800</pubDate>
        <link>/2016/01/06/learn-openstack-dev-skill-by-demo-06.html</link>
        <guid isPermaLink="true">/2016/01/06/learn-openstack-dev-skill-by-demo-06.html</guid>
        
        
      </item>
    
  </channel>
</rss>
